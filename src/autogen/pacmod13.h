#pragma once

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>

// DBC file version
#define VER_PACMOD13_MAJ (13U)
#define VER_PACMOD13_MIN (1U)

// include current dbc-driver compilation config
#include "pacmod13-config.h"

#ifdef PACMOD13_USE_DIAG_MONITORS
// This file must define:
// base monitor struct
#include <canmonitorutil.h>

#endif // PACMOD13_USE_DIAG_MONITORS


// Not for new development.
// def @GLOBAL_RPT CAN Message (16   0x10)
#define GLOBAL_RPT_IDE (0U)
#define GLOBAL_RPT_DLC (8U)
#define GLOBAL_RPT_CANID (0x10)

// Value tables for @PACMOD_SYSTEM_ENABLED signal

#ifndef PACMOD_SYSTEM_ENABLED_GLOBAL_RPT_CONTROL_DISABLED
#define PACMOD_SYSTEM_ENABLED_GLOBAL_RPT_CONTROL_DISABLED (0)
#endif

#ifndef PACMOD_SYSTEM_ENABLED_GLOBAL_RPT_CONTROL_ENABLED
#define PACMOD_SYSTEM_ENABLED_GLOBAL_RPT_CONTROL_ENABLED (1)
#endif


// Value tables for @PACMOD_SYSTEM_OVERRIDE_ACTIVE signal

#ifndef PACMOD_SYSTEM_OVERRIDE_ACTIVE_GLOBAL_RPT_NOT_OVERRIDDEN
#define PACMOD_SYSTEM_OVERRIDE_ACTIVE_GLOBAL_RPT_NOT_OVERRIDDEN (0)
#endif

#ifndef PACMOD_SYSTEM_OVERRIDE_ACTIVE_GLOBAL_RPT_OVERRIDDEN
#define PACMOD_SYSTEM_OVERRIDE_ACTIVE_GLOBAL_RPT_OVERRIDDEN (1)
#endif


// Value tables for @USR_CAN_TIMEOUT signal

#ifndef USR_CAN_TIMEOUT_GLOBAL_RPT_FALSE
#define USR_CAN_TIMEOUT_GLOBAL_RPT_FALSE (0)
#endif

#ifndef USR_CAN_TIMEOUT_GLOBAL_RPT_TRUE
#define USR_CAN_TIMEOUT_GLOBAL_RPT_TRUE (1)
#endif


// Value tables for @STR_CAN_TIMEOUT signal

#ifndef STR_CAN_TIMEOUT_GLOBAL_RPT_NO_ACTIVE_CAN_TIMEOUT
#define STR_CAN_TIMEOUT_GLOBAL_RPT_NO_ACTIVE_CAN_TIMEOUT (0)
#endif

#ifndef STR_CAN_TIMEOUT_GLOBAL_RPT_ACTIVE_CAN_TIMEOUT
#define STR_CAN_TIMEOUT_GLOBAL_RPT_ACTIVE_CAN_TIMEOUT (1)
#endif


// Value tables for @BRK_CAN_TIMEOUT signal

#ifndef BRK_CAN_TIMEOUT_GLOBAL_RPT_NO_ACTIVE_CAN_TIMEOUT
#define BRK_CAN_TIMEOUT_GLOBAL_RPT_NO_ACTIVE_CAN_TIMEOUT (0)
#endif

#ifndef BRK_CAN_TIMEOUT_GLOBAL_RPT_ACTIVE_CAN_TIMEOUT
#define BRK_CAN_TIMEOUT_GLOBAL_RPT_ACTIVE_CAN_TIMEOUT (1)
#endif


// Value tables for @PACMOD_SUBSYSTEM_TIMEOUT signal

#ifndef PACMOD_SUBSYSTEM_TIMEOUT_GLOBAL_RPT_FALSE
#define PACMOD_SUBSYSTEM_TIMEOUT_GLOBAL_RPT_FALSE (0)
#endif

#ifndef PACMOD_SUBSYSTEM_TIMEOUT_GLOBAL_RPT_TRUE
#define PACMOD_SUBSYSTEM_TIMEOUT_GLOBAL_RPT_TRUE (1)
#endif


// Value tables for @VEH_CAN_TIMEOUT signal

#ifndef VEH_CAN_TIMEOUT_GLOBAL_RPT_FALSE
#define VEH_CAN_TIMEOUT_GLOBAL_RPT_FALSE (0)
#endif

#ifndef VEH_CAN_TIMEOUT_GLOBAL_RPT_TRUE
#define VEH_CAN_TIMEOUT_GLOBAL_RPT_TRUE (1)
#endif


// Value tables for @PACMOD_SYSTEM_FAULT_ACTIVE signal

#ifndef PACMOD_SYSTEM_FAULT_ACTIVE_GLOBAL_RPT_FALSE
#define PACMOD_SYSTEM_FAULT_ACTIVE_GLOBAL_RPT_FALSE (0)
#endif

#ifndef PACMOD_SYSTEM_FAULT_ACTIVE_GLOBAL_RPT_TRUE
#define PACMOD_SYSTEM_FAULT_ACTIVE_GLOBAL_RPT_TRUE (1)
#endif


// Value tables for @SUPERVISORY_ENABLE_REQUIRED signal

#ifndef SUPERVISORY_ENABLE_REQUIRED_GLOBAL_RPT_NOT_REQUIRED
#define SUPERVISORY_ENABLE_REQUIRED_GLOBAL_RPT_NOT_REQUIRED (0)
#endif

#ifndef SUPERVISORY_ENABLE_REQUIRED_GLOBAL_RPT_REQUIRED
#define SUPERVISORY_ENABLE_REQUIRED_GLOBAL_RPT_REQUIRED (1)
#endif


// Value tables for @CONFIG_FAULT_ACTIVE signal

#ifndef CONFIG_FAULT_ACTIVE_GLOBAL_RPT_FALSE
#define CONFIG_FAULT_ACTIVE_GLOBAL_RPT_FALSE (0)
#endif

#ifndef CONFIG_FAULT_ACTIVE_GLOBAL_RPT_TRUE
#define CONFIG_FAULT_ACTIVE_GLOBAL_RPT_TRUE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "CONTROL_DISABLED"
  //  1 : "CONTROL_ENABLED"
  uint8_t PACMOD_SYSTEM_ENABLED : 1;           //      Bits= 1

  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t PACMOD_SYSTEM_OVERRIDE_ACTIVE : 1;   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t USR_CAN_TIMEOUT : 1;                 //      Bits= 1

  //  0 : "NO_ACTIVE_CAN_TIMEOUT"
  //  1 : "ACTIVE_CAN_TIMEOUT"
  uint8_t STR_CAN_TIMEOUT : 1;                 //      Bits= 1

  //  0 : "NO_ACTIVE_CAN_TIMEOUT"
  //  1 : "ACTIVE_CAN_TIMEOUT"
  uint8_t BRK_CAN_TIMEOUT : 1;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SUBSYSTEM_TIMEOUT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t VEH_CAN_TIMEOUT : 1;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SYSTEM_FAULT_ACTIVE : 1;      //      Bits= 1

  // Supervisory Enablement Rules apply when SUPERVISORY_ENABLE_REQUIRED is REQUIRED.  It provides backward compatibility with prior versions of this specification that did not have the SUPERVISORY_CTRL message.
  //  0 : "NOT_REQUIRED"
  //  1 : "REQUIRED"
  uint8_t SUPERVISORY_ENABLE_REQUIRED : 1;     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CONFIG_FAULT_ACTIVE : 1;             //      Bits= 1

  uint16_t USR_CAN_READ_ERRORS;                //      Bits=16

#else

  //  0 : "CONTROL_DISABLED"
  //  1 : "CONTROL_ENABLED"
  uint8_t PACMOD_SYSTEM_ENABLED;               //      Bits= 1

  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t PACMOD_SYSTEM_OVERRIDE_ACTIVE;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t USR_CAN_TIMEOUT;                     //      Bits= 1

  //  0 : "NO_ACTIVE_CAN_TIMEOUT"
  //  1 : "ACTIVE_CAN_TIMEOUT"
  uint8_t STR_CAN_TIMEOUT;                     //      Bits= 1

  //  0 : "NO_ACTIVE_CAN_TIMEOUT"
  //  1 : "ACTIVE_CAN_TIMEOUT"
  uint8_t BRK_CAN_TIMEOUT;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SUBSYSTEM_TIMEOUT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t VEH_CAN_TIMEOUT;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SYSTEM_FAULT_ACTIVE;          //      Bits= 1

  // Supervisory Enablement Rules apply when SUPERVISORY_ENABLE_REQUIRED is REQUIRED.  It provides backward compatibility with prior versions of this specification that did not have the SUPERVISORY_CTRL message.
  //  0 : "NOT_REQUIRED"
  //  1 : "REQUIRED"
  uint8_t SUPERVISORY_ENABLE_REQUIRED;         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CONFIG_FAULT_ACTIVE;                 //      Bits= 1

  uint16_t USR_CAN_READ_ERRORS;                //      Bits=16

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} GLOBAL_RPT_t;

// def @GLOBAL_RPT_2 CAN Message (17   0x11)
#define GLOBAL_RPT_2_IDE (0U)
#define GLOBAL_RPT_2_DLC (2U)
#define GLOBAL_RPT_2_CANID (0x11)

// Value tables for @SYSTEM_ENABLED signal

#ifndef SYSTEM_ENABLED_GLOBAL_RPT_2_CONTROL_DISABLED
#define SYSTEM_ENABLED_GLOBAL_RPT_2_CONTROL_DISABLED (0)
#endif

#ifndef SYSTEM_ENABLED_GLOBAL_RPT_2_CONTROL_ENABLED
#define SYSTEM_ENABLED_GLOBAL_RPT_2_CONTROL_ENABLED (1)
#endif


// Value tables for @SYSTEM_OVERRIDE_ACTIVE signal

#ifndef SYSTEM_OVERRIDE_ACTIVE_GLOBAL_RPT_2_NOT_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_GLOBAL_RPT_2_NOT_OVERRIDDEN (0)
#endif

#ifndef SYSTEM_OVERRIDE_ACTIVE_GLOBAL_RPT_2_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_GLOBAL_RPT_2_OVERRIDDEN (1)
#endif


// Value tables for @SYSTEM_FAULT_ACTIVE signal

#ifndef SYSTEM_FAULT_ACTIVE_GLOBAL_RPT_2_FALSE
#define SYSTEM_FAULT_ACTIVE_GLOBAL_RPT_2_FALSE (0)
#endif

#ifndef SYSTEM_FAULT_ACTIVE_GLOBAL_RPT_2_TRUE
#define SYSTEM_FAULT_ACTIVE_GLOBAL_RPT_2_TRUE (1)
#endif


// Value tables for @SUPERVISORY_ENABLE_REQUIRED signal

#ifndef SUPERVISORY_ENABLE_REQUIRED_GLOBAL_RPT_2_NOT_REQUIRED
#define SUPERVISORY_ENABLE_REQUIRED_GLOBAL_RPT_2_NOT_REQUIRED (0)
#endif

#ifndef SUPERVISORY_ENABLE_REQUIRED_GLOBAL_RPT_2_REQUIRED
#define SUPERVISORY_ENABLE_REQUIRED_GLOBAL_RPT_2_REQUIRED (1)
#endif


// Value tables for @DISABLE_ALL_SYSTEMS signal

#ifndef DISABLE_ALL_SYSTEMS_GLOBAL_RPT_2_FALSE
#define DISABLE_ALL_SYSTEMS_GLOBAL_RPT_2_FALSE (0)
#endif

#ifndef DISABLE_ALL_SYSTEMS_GLOBAL_RPT_2_TRUE
#define DISABLE_ALL_SYSTEMS_GLOBAL_RPT_2_TRUE (1)
#endif


// Value tables for @SYSTEM_READY signal

#ifndef SYSTEM_READY_GLOBAL_RPT_2_NOT_READY
#define SYSTEM_READY_GLOBAL_RPT_2_NOT_READY (0)
#endif

#ifndef SYSTEM_READY_GLOBAL_RPT_2_READY
#define SYSTEM_READY_GLOBAL_RPT_2_READY (1)
#endif


// Value tables for @ENABLE_METHOD signal

#ifndef ENABLE_METHOD_GLOBAL_RPT_2_INDIVIDUAL_SYSTEM_ENABLE
#define ENABLE_METHOD_GLOBAL_RPT_2_INDIVIDUAL_SYSTEM_ENABLE (0)
#endif

#ifndef ENABLE_METHOD_GLOBAL_RPT_2_GLOBAL_SYSTEM_ENABLE
#define ENABLE_METHOD_GLOBAL_RPT_2_GLOBAL_SYSTEM_ENABLE (1)
#endif


// Value tables for @OVERRIDE_MODE signal

#ifndef OVERRIDE_MODE_GLOBAL_RPT_2_OVERRIDES_DISABLED
#define OVERRIDE_MODE_GLOBAL_RPT_2_OVERRIDES_DISABLED (0)
#endif

#ifndef OVERRIDE_MODE_GLOBAL_RPT_2_OVERRIDES_ENABLED
#define OVERRIDE_MODE_GLOBAL_RPT_2_OVERRIDES_ENABLED (1)
#endif


// Value tables for @DEVELOPMENT_MODE signal

#ifndef DEVELOPMENT_MODE_GLOBAL_RPT_2_FALSE
#define DEVELOPMENT_MODE_GLOBAL_RPT_2_FALSE (0)
#endif

#ifndef DEVELOPMENT_MODE_GLOBAL_RPT_2_TRUE
#define DEVELOPMENT_MODE_GLOBAL_RPT_2_TRUE (1)
#endif


// Value tables for @DEVELOPMENT_MODE_ALLOWED signal

#ifndef DEVELOPMENT_MODE_ALLOWED_GLOBAL_RPT_2_FALSE
#define DEVELOPMENT_MODE_ALLOWED_GLOBAL_RPT_2_FALSE (0)
#endif

#ifndef DEVELOPMENT_MODE_ALLOWED_GLOBAL_RPT_2_TRUE
#define DEVELOPMENT_MODE_ALLOWED_GLOBAL_RPT_2_TRUE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // One or more systems are enabled.
  //  0 : "CONTROL_DISABLED"
  //  1 : "CONTROL_ENABLED"
  uint8_t SYSTEM_ENABLED : 1;                //      Bits= 1

  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE : 1;        //      Bits= 1

  // One or more faults are active.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SYSTEM_FAULT_ACTIVE : 1;           //      Bits= 1

  // Supervisory Enablement Rules apply when SUPERVISORY_ENABLE_REQUIRED is REQUIRED.  It provides backward compatibility with prior versions of this specification that did not have the SUPERVISORY_CTRL message.
  //  0 : "NOT_REQUIRED"
  //  1 : "REQUIRED"
  uint8_t SUPERVISORY_ENABLE_REQUIRED : 1;   //      Bits= 1

  // Global Command Sanity Check Rules and System Global Disable Rules apply when SANITY_CHECK_REQUIRED is REQUIRED.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DISABLE_ALL_SYSTEMS : 1;           //      Bits= 1

  // System Ready Rules apply at all times.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t SYSTEM_READY : 1;                  //      Bits= 1

  // This value reports which enable method is used. The file user_can_protocol.md lists the available enable methods.
  //  0 : "INDIVIDUAL_SYSTEM_ENABLE"
  //  1 : "GLOBAL_SYSTEM_ENABLE"
  uint8_t ENABLE_METHOD : 2;                 //      Bits= 2

  //  0 : "OVERRIDES_DISABLED"
  //  1 : "OVERRIDES_ENABLED"
  uint8_t OVERRIDE_MODE : 1;                 //      Bits= 1

  // Indicates if PACMOD is currently in development mode.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DEVELOPMENT_MODE : 1;              //      Bits= 1

  // Indicates if PACMOD will allow a transition into development mode.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DEVELOPMENT_MODE_ALLOWED : 1;      //      Bits= 1

#else

  // One or more systems are enabled.
  //  0 : "CONTROL_DISABLED"
  //  1 : "CONTROL_ENABLED"
  uint8_t SYSTEM_ENABLED;                    //      Bits= 1

  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE;            //      Bits= 1

  // One or more faults are active.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SYSTEM_FAULT_ACTIVE;               //      Bits= 1

  // Supervisory Enablement Rules apply when SUPERVISORY_ENABLE_REQUIRED is REQUIRED.  It provides backward compatibility with prior versions of this specification that did not have the SUPERVISORY_CTRL message.
  //  0 : "NOT_REQUIRED"
  //  1 : "REQUIRED"
  uint8_t SUPERVISORY_ENABLE_REQUIRED;       //      Bits= 1

  // Global Command Sanity Check Rules and System Global Disable Rules apply when SANITY_CHECK_REQUIRED is REQUIRED.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DISABLE_ALL_SYSTEMS;               //      Bits= 1

  // System Ready Rules apply at all times.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t SYSTEM_READY;                      //      Bits= 1

  // This value reports which enable method is used. The file user_can_protocol.md lists the available enable methods.
  //  0 : "INDIVIDUAL_SYSTEM_ENABLE"
  //  1 : "GLOBAL_SYSTEM_ENABLE"
  uint8_t ENABLE_METHOD;                     //      Bits= 2

  //  0 : "OVERRIDES_DISABLED"
  //  1 : "OVERRIDES_ENABLED"
  uint8_t OVERRIDE_MODE;                     //      Bits= 1

  // Indicates if PACMOD is currently in development mode.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DEVELOPMENT_MODE;                  //      Bits= 1

  // Indicates if PACMOD will allow a transition into development mode.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DEVELOPMENT_MODE_ALLOWED;          //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} GLOBAL_RPT_2_t;

// def @COMPONENT_RPT_00 CAN Message (32   0x20)
#define COMPONENT_RPT_00_IDE (0U)
#define COMPONENT_RPT_00_DLC (8U)
#define COMPONENT_RPT_00_CANID (0x20)

// Value tables for @COMPONENT_TYPE signal

#ifndef COMPONENT_TYPE_COMPONENT_RPT_00_PACMOD
#define COMPONENT_TYPE_COMPONENT_RPT_00_PACMOD (0)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_00_PACMINI
#define COMPONENT_TYPE_COMPONENT_RPT_00_PACMINI (1)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_00_PACMICRO
#define COMPONENT_TYPE_COMPONENT_RPT_00_PACMICRO (2)
#endif


// Value tables for @ACCEL signal

#ifndef ACCEL_COMPONENT_RPT_00_ABSENT
#define ACCEL_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef ACCEL_COMPONENT_RPT_00_PRESENT
#define ACCEL_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @BRAKE signal

#ifndef BRAKE_COMPONENT_RPT_00_ABSENT
#define BRAKE_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef BRAKE_COMPONENT_RPT_00_PRESENT
#define BRAKE_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @CRUISE_CONTROL_BUTTONS signal

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_00_ABSENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_00_PRESENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_LEFT signal

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_00_ABSENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_00_PRESENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_RIGHT signal

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_00_ABSENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_00_PRESENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @HAZARD_LIGHTS signal

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_00_ABSENT
#define HAZARD_LIGHTS_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_00_PRESENT
#define HAZARD_LIGHTS_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @HEADLIGHT signal

#ifndef HEADLIGHT_COMPONENT_RPT_00_ABSENT
#define HEADLIGHT_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef HEADLIGHT_COMPONENT_RPT_00_PRESENT
#define HEADLIGHT_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @HORN signal

#ifndef HORN_COMPONENT_RPT_00_ABSENT
#define HORN_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef HORN_COMPONENT_RPT_00_PRESENT
#define HORN_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @MEDIA_CONTROLS signal

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_00_ABSENT
#define MEDIA_CONTROLS_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_00_PRESENT
#define MEDIA_CONTROLS_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @PARKING_BRAKE signal

#ifndef PARKING_BRAKE_COMPONENT_RPT_00_ABSENT
#define PARKING_BRAKE_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef PARKING_BRAKE_COMPONENT_RPT_00_PRESENT
#define PARKING_BRAKE_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @SHIFT signal

#ifndef SHIFT_COMPONENT_RPT_00_ABSENT
#define SHIFT_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef SHIFT_COMPONENT_RPT_00_PRESENT
#define SHIFT_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @SPRAYER signal

#ifndef SPRAYER_COMPONENT_RPT_00_ABSENT
#define SPRAYER_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef SPRAYER_COMPONENT_RPT_00_PRESENT
#define SPRAYER_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @STEERING signal

#ifndef STEERING_COMPONENT_RPT_00_ABSENT
#define STEERING_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef STEERING_COMPONENT_RPT_00_PRESENT
#define STEERING_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @TURN signal

#ifndef TURN_COMPONENT_RPT_00_ABSENT
#define TURN_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef TURN_COMPONENT_RPT_00_PRESENT
#define TURN_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @WIPER signal

#ifndef WIPER_COMPONENT_RPT_00_ABSENT
#define WIPER_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef WIPER_COMPONENT_RPT_00_PRESENT
#define WIPER_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @WATCHDOG signal

#ifndef WATCHDOG_COMPONENT_RPT_00_ABSENT
#define WATCHDOG_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef WATCHDOG_COMPONENT_RPT_00_PRESENT
#define WATCHDOG_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @BRAKE_DECEL signal

#ifndef BRAKE_DECEL_COMPONENT_RPT_00_ABSENT
#define BRAKE_DECEL_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef BRAKE_DECEL_COMPONENT_RPT_00_PRESENT
#define BRAKE_DECEL_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @REAR_PASS_DOOR signal

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_00_ABSENT
#define REAR_PASS_DOOR_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_00_PRESENT
#define REAR_PASS_DOOR_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @ENGINE_BRAKE signal

#ifndef ENGINE_BRAKE_COMPONENT_RPT_00_ABSENT
#define ENGINE_BRAKE_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef ENGINE_BRAKE_COMPONENT_RPT_00_PRESENT
#define ENGINE_BRAKE_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @MARKER_LAMP signal

#ifndef MARKER_LAMP_COMPONENT_RPT_00_ABSENT
#define MARKER_LAMP_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef MARKER_LAMP_COMPONENT_RPT_00_PRESENT
#define MARKER_LAMP_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @CABIN_CLIMATE signal

#ifndef CABIN_CLIMATE_COMPONENT_RPT_00_ABSENT
#define CABIN_CLIMATE_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef CABIN_CLIMATE_COMPONENT_RPT_00_PRESENT
#define CABIN_CLIMATE_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @CABIN_FAN_SPEED signal

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_00_ABSENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_00_PRESENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @CABIN_TEMP signal

#ifndef CABIN_TEMP_COMPONENT_RPT_00_ABSENT
#define CABIN_TEMP_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef CABIN_TEMP_COMPONENT_RPT_00_PRESENT
#define CABIN_TEMP_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @EXHAUST_BRAKE signal

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_00_ABSENT
#define EXHAUST_BRAKE_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_00_PRESENT
#define EXHAUST_BRAKE_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @POWER_TAKE_OFF signal

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_00_ABSENT
#define POWER_TAKE_OFF_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_00_PRESENT
#define POWER_TAKE_OFF_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_00 signal

#ifndef TIPPER_BODY_00_COMPONENT_RPT_00_ABSENT
#define TIPPER_BODY_00_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef TIPPER_BODY_00_COMPONENT_RPT_00_PRESENT
#define TIPPER_BODY_00_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @TRAILER_AIR_SUPPLY signal

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_00_ABSENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_00_PRESENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @TRAILER_BRAKE signal

#ifndef TRAILER_BRAKE_COMPONENT_RPT_00_ABSENT
#define TRAILER_BRAKE_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef TRAILER_BRAKE_COMPONENT_RPT_00_PRESENT
#define TRAILER_BRAKE_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @CONFIG_FAULT signal

#ifndef CONFIG_FAULT_COMPONENT_RPT_00_NO_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_00_NO_FAULT (0)
#endif

#ifndef CONFIG_FAULT_COMPONENT_RPT_00_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_00_FAULT (1)
#endif


// Value tables for @CAN_TIMEOUT_FAULT signal

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_00_NO_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_00_NO_FAULT (0)
#endif

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_00_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_00_FAULT (1)
#endif


// Value tables for @INTERNAL_SUPPLY_VOLTAGE_FAULT signal

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_00_NO_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_00_NO_FAULT (0)
#endif

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_00_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_00_FAULT (1)
#endif


// Value tables for @SUPERVISORY_TIMEOUT signal

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_00_NO_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_00_NO_TIMEOUT (0)
#endif

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_00_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_00_TIMEOUT (1)
#endif


// Value tables for @SUPERVISORY_SANITY_FAULT signal

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_00_NO_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_00_NO_FAULT (0)
#endif

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_00_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_00_FAULT (1)
#endif


// Value tables for @WATCHDOG_SANITY_FAULT signal

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_00_NO_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_00_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_00_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_00_FAULT (1)
#endif


// Value tables for @WATCHDOG_SYSTEM_PRESENT_FAULT signal

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_00_NO_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_00_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_00_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_00_FAULT (1)
#endif


// Value tables for @COMPONENT_READY signal

#ifndef COMPONENT_READY_COMPONENT_RPT_00_NOT_READY
#define COMPONENT_READY_COMPONENT_RPT_00_NOT_READY (0)
#endif

#ifndef COMPONENT_READY_COMPONENT_RPT_00_READY
#define COMPONENT_READY_COMPONENT_RPT_00_READY (1)
#endif


// Value tables for @ENGINE signal

#ifndef ENGINE_COMPONENT_RPT_00_ABSENT
#define ENGINE_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef ENGINE_COMPONENT_RPT_00_PRESENT
#define ENGINE_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_01 signal

#ifndef TIPPER_BODY_01_COMPONENT_RPT_00_ABSENT
#define TIPPER_BODY_01_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef TIPPER_BODY_01_COMPONENT_RPT_00_PRESENT
#define TIPPER_BODY_01_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_02 signal

#ifndef TIPPER_BODY_02_COMPONENT_RPT_00_ABSENT
#define TIPPER_BODY_02_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef TIPPER_BODY_02_COMPONENT_RPT_00_PRESENT
#define TIPPER_BODY_02_COMPONENT_RPT_00_PRESENT (1)
#endif


// Value tables for @SYSTEM_ENABLED signal

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_00_DISABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_00_DISABLED (0)
#endif

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_00_ENABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_00_ENABLED (1)
#endif


// Value tables for @SYSTEM_OVERRIDE_ACTIVE signal

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_00_NOT_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_00_NOT_OVERRIDDEN (0)
#endif

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_00_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_00_OVERRIDDEN (1)
#endif


// Value tables for @SYSTEM_FAULT_ACTIVE signal

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_00_NO_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_00_NO_FAULT (0)
#endif

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_00_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_00_FAULT (1)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_00 signal

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_00_OKAY
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_00_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_00_FAULT
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_00_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_00_NOT_USED
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_00_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_00_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_00_NOT_AVAIL (3)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_01 signal

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_00_OKAY
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_00_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_00_FAULT
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_00_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_00_NOT_USED
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_00_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_00_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_00_NOT_AVAIL (3)
#endif


// Value tables for @DIFFERENTIAL_LOCKS signal

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_00_ABSENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_00_ABSENT (0)
#endif

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_00_PRESENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_00_PRESENT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE : 4;                  //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS : 1;          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT : 1;             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT : 1;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER : 1;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE : 1;                    //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP : 1;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE : 1;                   //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER : 4;                         //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT : 4;                      //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT : 1;                    //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT : 1;   //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT : 1;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT : 1;        //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT : 1;           //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT : 1;   //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE : 1;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02 : 1;                  //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED : 1;                  //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE : 1;          //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE : 1;             //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00 : 2;         //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01 : 2;         //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS : 1;              //      Bits= 1

#else

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE;                      //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER;                             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE;                       //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                             //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT;                          //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT;                        //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT;       //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT;                 //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT;            //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT;               //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT;       //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE;                              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02;                      //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED;                      //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE;              //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE;                 //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00;             //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01;             //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS;                  //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} COMPONENT_RPT_00_t;

// def @COMPONENT_RPT_01 CAN Message (33   0x21)
#define COMPONENT_RPT_01_IDE (0U)
#define COMPONENT_RPT_01_DLC (8U)
#define COMPONENT_RPT_01_CANID (0x21)

// Value tables for @COMPONENT_TYPE signal

#ifndef COMPONENT_TYPE_COMPONENT_RPT_01_PACMOD
#define COMPONENT_TYPE_COMPONENT_RPT_01_PACMOD (0)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_01_PACMINI
#define COMPONENT_TYPE_COMPONENT_RPT_01_PACMINI (1)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_01_PACMICRO
#define COMPONENT_TYPE_COMPONENT_RPT_01_PACMICRO (2)
#endif


// Value tables for @ACCEL signal

#ifndef ACCEL_COMPONENT_RPT_01_ABSENT
#define ACCEL_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef ACCEL_COMPONENT_RPT_01_PRESENT
#define ACCEL_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @BRAKE signal

#ifndef BRAKE_COMPONENT_RPT_01_ABSENT
#define BRAKE_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef BRAKE_COMPONENT_RPT_01_PRESENT
#define BRAKE_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @CRUISE_CONTROL_BUTTONS signal

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_01_ABSENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_01_PRESENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_LEFT signal

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_01_ABSENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_01_PRESENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_RIGHT signal

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_01_ABSENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_01_PRESENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @HAZARD_LIGHTS signal

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_01_ABSENT
#define HAZARD_LIGHTS_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_01_PRESENT
#define HAZARD_LIGHTS_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @HEADLIGHT signal

#ifndef HEADLIGHT_COMPONENT_RPT_01_ABSENT
#define HEADLIGHT_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef HEADLIGHT_COMPONENT_RPT_01_PRESENT
#define HEADLIGHT_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @HORN signal

#ifndef HORN_COMPONENT_RPT_01_ABSENT
#define HORN_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef HORN_COMPONENT_RPT_01_PRESENT
#define HORN_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @MEDIA_CONTROLS signal

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_01_ABSENT
#define MEDIA_CONTROLS_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_01_PRESENT
#define MEDIA_CONTROLS_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @PARKING_BRAKE signal

#ifndef PARKING_BRAKE_COMPONENT_RPT_01_ABSENT
#define PARKING_BRAKE_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef PARKING_BRAKE_COMPONENT_RPT_01_PRESENT
#define PARKING_BRAKE_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @SHIFT signal

#ifndef SHIFT_COMPONENT_RPT_01_ABSENT
#define SHIFT_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef SHIFT_COMPONENT_RPT_01_PRESENT
#define SHIFT_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @SPRAYER signal

#ifndef SPRAYER_COMPONENT_RPT_01_ABSENT
#define SPRAYER_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef SPRAYER_COMPONENT_RPT_01_PRESENT
#define SPRAYER_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @STEERING signal

#ifndef STEERING_COMPONENT_RPT_01_ABSENT
#define STEERING_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef STEERING_COMPONENT_RPT_01_PRESENT
#define STEERING_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @TURN signal

#ifndef TURN_COMPONENT_RPT_01_ABSENT
#define TURN_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef TURN_COMPONENT_RPT_01_PRESENT
#define TURN_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @WIPER signal

#ifndef WIPER_COMPONENT_RPT_01_ABSENT
#define WIPER_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef WIPER_COMPONENT_RPT_01_PRESENT
#define WIPER_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @WATCHDOG signal

#ifndef WATCHDOG_COMPONENT_RPT_01_ABSENT
#define WATCHDOG_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef WATCHDOG_COMPONENT_RPT_01_PRESENT
#define WATCHDOG_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @BRAKE_DECEL signal

#ifndef BRAKE_DECEL_COMPONENT_RPT_01_ABSENT
#define BRAKE_DECEL_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef BRAKE_DECEL_COMPONENT_RPT_01_PRESENT
#define BRAKE_DECEL_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @REAR_PASS_DOOR signal

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_01_ABSENT
#define REAR_PASS_DOOR_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_01_PRESENT
#define REAR_PASS_DOOR_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @ENGINE_BRAKE signal

#ifndef ENGINE_BRAKE_COMPONENT_RPT_01_ABSENT
#define ENGINE_BRAKE_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef ENGINE_BRAKE_COMPONENT_RPT_01_PRESENT
#define ENGINE_BRAKE_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @MARKER_LAMP signal

#ifndef MARKER_LAMP_COMPONENT_RPT_01_ABSENT
#define MARKER_LAMP_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef MARKER_LAMP_COMPONENT_RPT_01_PRESENT
#define MARKER_LAMP_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @CABIN_CLIMATE signal

#ifndef CABIN_CLIMATE_COMPONENT_RPT_01_ABSENT
#define CABIN_CLIMATE_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef CABIN_CLIMATE_COMPONENT_RPT_01_PRESENT
#define CABIN_CLIMATE_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @CABIN_FAN_SPEED signal

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_01_ABSENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_01_PRESENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @CABIN_TEMP signal

#ifndef CABIN_TEMP_COMPONENT_RPT_01_ABSENT
#define CABIN_TEMP_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef CABIN_TEMP_COMPONENT_RPT_01_PRESENT
#define CABIN_TEMP_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @EXHAUST_BRAKE signal

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_01_ABSENT
#define EXHAUST_BRAKE_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_01_PRESENT
#define EXHAUST_BRAKE_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @POWER_TAKE_OFF signal

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_01_ABSENT
#define POWER_TAKE_OFF_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_01_PRESENT
#define POWER_TAKE_OFF_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_00 signal

#ifndef TIPPER_BODY_00_COMPONENT_RPT_01_ABSENT
#define TIPPER_BODY_00_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef TIPPER_BODY_00_COMPONENT_RPT_01_PRESENT
#define TIPPER_BODY_00_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @TRAILER_AIR_SUPPLY signal

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_01_ABSENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_01_PRESENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @TRAILER_BRAKE signal

#ifndef TRAILER_BRAKE_COMPONENT_RPT_01_ABSENT
#define TRAILER_BRAKE_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef TRAILER_BRAKE_COMPONENT_RPT_01_PRESENT
#define TRAILER_BRAKE_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @CONFIG_FAULT signal

#ifndef CONFIG_FAULT_COMPONENT_RPT_01_NO_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_01_NO_FAULT (0)
#endif

#ifndef CONFIG_FAULT_COMPONENT_RPT_01_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_01_FAULT (1)
#endif


// Value tables for @CAN_TIMEOUT_FAULT signal

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_01_NO_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_01_NO_FAULT (0)
#endif

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_01_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_01_FAULT (1)
#endif


// Value tables for @INTERNAL_SUPPLY_VOLTAGE_FAULT signal

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_01_NO_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_01_NO_FAULT (0)
#endif

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_01_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_01_FAULT (1)
#endif


// Value tables for @SUPERVISORY_TIMEOUT signal

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_01_NO_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_01_NO_TIMEOUT (0)
#endif

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_01_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_01_TIMEOUT (1)
#endif


// Value tables for @SUPERVISORY_SANITY_FAULT signal

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_01_NO_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_01_NO_FAULT (0)
#endif

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_01_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_01_FAULT (1)
#endif


// Value tables for @WATCHDOG_SANITY_FAULT signal

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_01_NO_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_01_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_01_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_01_FAULT (1)
#endif


// Value tables for @WATCHDOG_SYSTEM_PRESENT_FAULT signal

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_01_NO_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_01_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_01_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_01_FAULT (1)
#endif


// Value tables for @COMPONENT_READY signal

#ifndef COMPONENT_READY_COMPONENT_RPT_01_NOT_READY
#define COMPONENT_READY_COMPONENT_RPT_01_NOT_READY (0)
#endif

#ifndef COMPONENT_READY_COMPONENT_RPT_01_READY
#define COMPONENT_READY_COMPONENT_RPT_01_READY (1)
#endif


// Value tables for @ENGINE signal

#ifndef ENGINE_COMPONENT_RPT_01_ABSENT
#define ENGINE_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef ENGINE_COMPONENT_RPT_01_PRESENT
#define ENGINE_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_01 signal

#ifndef TIPPER_BODY_01_COMPONENT_RPT_01_ABSENT
#define TIPPER_BODY_01_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef TIPPER_BODY_01_COMPONENT_RPT_01_PRESENT
#define TIPPER_BODY_01_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_02 signal

#ifndef TIPPER_BODY_02_COMPONENT_RPT_01_ABSENT
#define TIPPER_BODY_02_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef TIPPER_BODY_02_COMPONENT_RPT_01_PRESENT
#define TIPPER_BODY_02_COMPONENT_RPT_01_PRESENT (1)
#endif


// Value tables for @SYSTEM_ENABLED signal

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_01_DISABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_01_DISABLED (0)
#endif

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_01_ENABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_01_ENABLED (1)
#endif


// Value tables for @SYSTEM_OVERRIDE_ACTIVE signal

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_01_NOT_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_01_NOT_OVERRIDDEN (0)
#endif

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_01_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_01_OVERRIDDEN (1)
#endif


// Value tables for @SYSTEM_FAULT_ACTIVE signal

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_01_NO_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_01_NO_FAULT (0)
#endif

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_01_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_01_FAULT (1)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_00 signal

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_01_OKAY
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_01_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_01_FAULT
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_01_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_01_NOT_USED
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_01_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_01_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_01_NOT_AVAIL (3)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_01 signal

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_01_OKAY
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_01_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_01_FAULT
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_01_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_01_NOT_USED
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_01_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_01_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_01_NOT_AVAIL (3)
#endif


// Value tables for @DIFFERENTIAL_LOCKS signal

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_01_ABSENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_01_ABSENT (0)
#endif

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_01_PRESENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_01_PRESENT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE : 4;                  //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS : 1;          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT : 1;             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT : 1;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER : 1;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE : 1;                    //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP : 1;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE : 1;                   //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER : 4;                         //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT : 4;                      //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT : 1;                    //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT : 1;   //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT : 1;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT : 1;        //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT : 1;           //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT : 1;   //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE : 1;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02 : 1;                  //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED : 1;                  //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE : 1;          //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE : 1;             //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00 : 2;         //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01 : 2;         //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS : 1;              //      Bits= 1

#else

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE;                      //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER;                             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE;                       //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                             //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT;                          //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT;                        //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT;       //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT;                 //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT;            //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT;               //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT;       //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE;                              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02;                      //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED;                      //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE;              //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE;                 //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00;             //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01;             //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS;                  //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} COMPONENT_RPT_01_t;

// def @COMPONENT_RPT_02 CAN Message (34   0x22)
#define COMPONENT_RPT_02_IDE (0U)
#define COMPONENT_RPT_02_DLC (8U)
#define COMPONENT_RPT_02_CANID (0x22)

// Value tables for @COMPONENT_TYPE signal

#ifndef COMPONENT_TYPE_COMPONENT_RPT_02_PACMOD
#define COMPONENT_TYPE_COMPONENT_RPT_02_PACMOD (0)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_02_PACMINI
#define COMPONENT_TYPE_COMPONENT_RPT_02_PACMINI (1)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_02_PACMICRO
#define COMPONENT_TYPE_COMPONENT_RPT_02_PACMICRO (2)
#endif


// Value tables for @ACCEL signal

#ifndef ACCEL_COMPONENT_RPT_02_ABSENT
#define ACCEL_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef ACCEL_COMPONENT_RPT_02_PRESENT
#define ACCEL_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @BRAKE signal

#ifndef BRAKE_COMPONENT_RPT_02_ABSENT
#define BRAKE_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef BRAKE_COMPONENT_RPT_02_PRESENT
#define BRAKE_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @CRUISE_CONTROL_BUTTONS signal

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_02_ABSENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_02_PRESENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_LEFT signal

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_02_ABSENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_02_PRESENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_RIGHT signal

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_02_ABSENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_02_PRESENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @HAZARD_LIGHTS signal

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_02_ABSENT
#define HAZARD_LIGHTS_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_02_PRESENT
#define HAZARD_LIGHTS_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @HEADLIGHT signal

#ifndef HEADLIGHT_COMPONENT_RPT_02_ABSENT
#define HEADLIGHT_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef HEADLIGHT_COMPONENT_RPT_02_PRESENT
#define HEADLIGHT_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @HORN signal

#ifndef HORN_COMPONENT_RPT_02_ABSENT
#define HORN_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef HORN_COMPONENT_RPT_02_PRESENT
#define HORN_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @MEDIA_CONTROLS signal

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_02_ABSENT
#define MEDIA_CONTROLS_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_02_PRESENT
#define MEDIA_CONTROLS_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @PARKING_BRAKE signal

#ifndef PARKING_BRAKE_COMPONENT_RPT_02_ABSENT
#define PARKING_BRAKE_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef PARKING_BRAKE_COMPONENT_RPT_02_PRESENT
#define PARKING_BRAKE_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @SHIFT signal

#ifndef SHIFT_COMPONENT_RPT_02_ABSENT
#define SHIFT_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef SHIFT_COMPONENT_RPT_02_PRESENT
#define SHIFT_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @SPRAYER signal

#ifndef SPRAYER_COMPONENT_RPT_02_ABSENT
#define SPRAYER_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef SPRAYER_COMPONENT_RPT_02_PRESENT
#define SPRAYER_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @STEERING signal

#ifndef STEERING_COMPONENT_RPT_02_ABSENT
#define STEERING_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef STEERING_COMPONENT_RPT_02_PRESENT
#define STEERING_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @TURN signal

#ifndef TURN_COMPONENT_RPT_02_ABSENT
#define TURN_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef TURN_COMPONENT_RPT_02_PRESENT
#define TURN_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @WIPER signal

#ifndef WIPER_COMPONENT_RPT_02_ABSENT
#define WIPER_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef WIPER_COMPONENT_RPT_02_PRESENT
#define WIPER_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @WATCHDOG signal

#ifndef WATCHDOG_COMPONENT_RPT_02_ABSENT
#define WATCHDOG_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef WATCHDOG_COMPONENT_RPT_02_PRESENT
#define WATCHDOG_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @BRAKE_DECEL signal

#ifndef BRAKE_DECEL_COMPONENT_RPT_02_ABSENT
#define BRAKE_DECEL_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef BRAKE_DECEL_COMPONENT_RPT_02_PRESENT
#define BRAKE_DECEL_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @REAR_PASS_DOOR signal

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_02_ABSENT
#define REAR_PASS_DOOR_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_02_PRESENT
#define REAR_PASS_DOOR_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @ENGINE_BRAKE signal

#ifndef ENGINE_BRAKE_COMPONENT_RPT_02_ABSENT
#define ENGINE_BRAKE_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef ENGINE_BRAKE_COMPONENT_RPT_02_PRESENT
#define ENGINE_BRAKE_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @MARKER_LAMP signal

#ifndef MARKER_LAMP_COMPONENT_RPT_02_ABSENT
#define MARKER_LAMP_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef MARKER_LAMP_COMPONENT_RPT_02_PRESENT
#define MARKER_LAMP_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @CABIN_CLIMATE signal

#ifndef CABIN_CLIMATE_COMPONENT_RPT_02_ABSENT
#define CABIN_CLIMATE_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef CABIN_CLIMATE_COMPONENT_RPT_02_PRESENT
#define CABIN_CLIMATE_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @CABIN_FAN_SPEED signal

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_02_ABSENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_02_PRESENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @CABIN_TEMP signal

#ifndef CABIN_TEMP_COMPONENT_RPT_02_ABSENT
#define CABIN_TEMP_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef CABIN_TEMP_COMPONENT_RPT_02_PRESENT
#define CABIN_TEMP_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @EXHAUST_BRAKE signal

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_02_ABSENT
#define EXHAUST_BRAKE_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_02_PRESENT
#define EXHAUST_BRAKE_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @POWER_TAKE_OFF signal

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_02_ABSENT
#define POWER_TAKE_OFF_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_02_PRESENT
#define POWER_TAKE_OFF_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_00 signal

#ifndef TIPPER_BODY_00_COMPONENT_RPT_02_ABSENT
#define TIPPER_BODY_00_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef TIPPER_BODY_00_COMPONENT_RPT_02_PRESENT
#define TIPPER_BODY_00_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @TRAILER_AIR_SUPPLY signal

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_02_ABSENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_02_PRESENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @TRAILER_BRAKE signal

#ifndef TRAILER_BRAKE_COMPONENT_RPT_02_ABSENT
#define TRAILER_BRAKE_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef TRAILER_BRAKE_COMPONENT_RPT_02_PRESENT
#define TRAILER_BRAKE_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @CONFIG_FAULT signal

#ifndef CONFIG_FAULT_COMPONENT_RPT_02_NO_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_02_NO_FAULT (0)
#endif

#ifndef CONFIG_FAULT_COMPONENT_RPT_02_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_02_FAULT (1)
#endif


// Value tables for @CAN_TIMEOUT_FAULT signal

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_02_NO_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_02_NO_FAULT (0)
#endif

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_02_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_02_FAULT (1)
#endif


// Value tables for @INTERNAL_SUPPLY_VOLTAGE_FAULT signal

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_02_NO_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_02_NO_FAULT (0)
#endif

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_02_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_02_FAULT (1)
#endif


// Value tables for @SUPERVISORY_TIMEOUT signal

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_02_NO_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_02_NO_TIMEOUT (0)
#endif

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_02_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_02_TIMEOUT (1)
#endif


// Value tables for @SUPERVISORY_SANITY_FAULT signal

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_02_NO_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_02_NO_FAULT (0)
#endif

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_02_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_02_FAULT (1)
#endif


// Value tables for @WATCHDOG_SANITY_FAULT signal

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_02_NO_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_02_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_02_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_02_FAULT (1)
#endif


// Value tables for @WATCHDOG_SYSTEM_PRESENT_FAULT signal

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_02_NO_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_02_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_02_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_02_FAULT (1)
#endif


// Value tables for @COMPONENT_READY signal

#ifndef COMPONENT_READY_COMPONENT_RPT_02_NOT_READY
#define COMPONENT_READY_COMPONENT_RPT_02_NOT_READY (0)
#endif

#ifndef COMPONENT_READY_COMPONENT_RPT_02_READY
#define COMPONENT_READY_COMPONENT_RPT_02_READY (1)
#endif


// Value tables for @ENGINE signal

#ifndef ENGINE_COMPONENT_RPT_02_ABSENT
#define ENGINE_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef ENGINE_COMPONENT_RPT_02_PRESENT
#define ENGINE_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_01 signal

#ifndef TIPPER_BODY_01_COMPONENT_RPT_02_ABSENT
#define TIPPER_BODY_01_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef TIPPER_BODY_01_COMPONENT_RPT_02_PRESENT
#define TIPPER_BODY_01_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_02 signal

#ifndef TIPPER_BODY_02_COMPONENT_RPT_02_ABSENT
#define TIPPER_BODY_02_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef TIPPER_BODY_02_COMPONENT_RPT_02_PRESENT
#define TIPPER_BODY_02_COMPONENT_RPT_02_PRESENT (1)
#endif


// Value tables for @SYSTEM_ENABLED signal

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_02_DISABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_02_DISABLED (0)
#endif

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_02_ENABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_02_ENABLED (1)
#endif


// Value tables for @SYSTEM_OVERRIDE_ACTIVE signal

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_02_NOT_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_02_NOT_OVERRIDDEN (0)
#endif

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_02_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_02_OVERRIDDEN (1)
#endif


// Value tables for @SYSTEM_FAULT_ACTIVE signal

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_02_NO_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_02_NO_FAULT (0)
#endif

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_02_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_02_FAULT (1)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_00 signal

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_02_OKAY
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_02_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_02_FAULT
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_02_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_02_NOT_USED
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_02_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_02_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_02_NOT_AVAIL (3)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_01 signal

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_02_OKAY
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_02_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_02_FAULT
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_02_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_02_NOT_USED
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_02_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_02_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_02_NOT_AVAIL (3)
#endif


// Value tables for @DIFFERENTIAL_LOCKS signal

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_02_ABSENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_02_ABSENT (0)
#endif

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_02_PRESENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_02_PRESENT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE : 4;                  //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS : 1;          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT : 1;             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT : 1;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER : 1;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE : 1;                    //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP : 1;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE : 1;                   //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER : 4;                         //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT : 4;                      //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT : 1;                    //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT : 1;   //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT : 1;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT : 1;        //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT : 1;           //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT : 1;   //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE : 1;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02 : 1;                  //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED : 1;                  //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE : 1;          //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE : 1;             //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00 : 2;         //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01 : 2;         //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS : 1;              //      Bits= 1

#else

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE;                      //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER;                             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE;                       //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                             //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT;                          //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT;                        //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT;       //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT;                 //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT;            //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT;               //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT;       //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE;                              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02;                      //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED;                      //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE;              //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE;                 //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00;             //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01;             //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS;                  //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} COMPONENT_RPT_02_t;

// def @COMPONENT_RPT_03 CAN Message (35   0x23)
#define COMPONENT_RPT_03_IDE (0U)
#define COMPONENT_RPT_03_DLC (8U)
#define COMPONENT_RPT_03_CANID (0x23)

// Value tables for @COMPONENT_TYPE signal

#ifndef COMPONENT_TYPE_COMPONENT_RPT_03_PACMOD
#define COMPONENT_TYPE_COMPONENT_RPT_03_PACMOD (0)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_03_PACMINI
#define COMPONENT_TYPE_COMPONENT_RPT_03_PACMINI (1)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_03_PACMICRO
#define COMPONENT_TYPE_COMPONENT_RPT_03_PACMICRO (2)
#endif


// Value tables for @ACCEL signal

#ifndef ACCEL_COMPONENT_RPT_03_ABSENT
#define ACCEL_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef ACCEL_COMPONENT_RPT_03_PRESENT
#define ACCEL_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @BRAKE signal

#ifndef BRAKE_COMPONENT_RPT_03_ABSENT
#define BRAKE_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef BRAKE_COMPONENT_RPT_03_PRESENT
#define BRAKE_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @CRUISE_CONTROL_BUTTONS signal

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_03_ABSENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_03_PRESENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_LEFT signal

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_03_ABSENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_03_PRESENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_RIGHT signal

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_03_ABSENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_03_PRESENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @HAZARD_LIGHTS signal

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_03_ABSENT
#define HAZARD_LIGHTS_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_03_PRESENT
#define HAZARD_LIGHTS_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @HEADLIGHT signal

#ifndef HEADLIGHT_COMPONENT_RPT_03_ABSENT
#define HEADLIGHT_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef HEADLIGHT_COMPONENT_RPT_03_PRESENT
#define HEADLIGHT_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @HORN signal

#ifndef HORN_COMPONENT_RPT_03_ABSENT
#define HORN_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef HORN_COMPONENT_RPT_03_PRESENT
#define HORN_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @MEDIA_CONTROLS signal

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_03_ABSENT
#define MEDIA_CONTROLS_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_03_PRESENT
#define MEDIA_CONTROLS_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @PARKING_BRAKE signal

#ifndef PARKING_BRAKE_COMPONENT_RPT_03_ABSENT
#define PARKING_BRAKE_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef PARKING_BRAKE_COMPONENT_RPT_03_PRESENT
#define PARKING_BRAKE_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @SHIFT signal

#ifndef SHIFT_COMPONENT_RPT_03_ABSENT
#define SHIFT_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef SHIFT_COMPONENT_RPT_03_PRESENT
#define SHIFT_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @SPRAYER signal

#ifndef SPRAYER_COMPONENT_RPT_03_ABSENT
#define SPRAYER_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef SPRAYER_COMPONENT_RPT_03_PRESENT
#define SPRAYER_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @STEERING signal

#ifndef STEERING_COMPONENT_RPT_03_ABSENT
#define STEERING_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef STEERING_COMPONENT_RPT_03_PRESENT
#define STEERING_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @TURN signal

#ifndef TURN_COMPONENT_RPT_03_ABSENT
#define TURN_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef TURN_COMPONENT_RPT_03_PRESENT
#define TURN_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @WIPER signal

#ifndef WIPER_COMPONENT_RPT_03_ABSENT
#define WIPER_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef WIPER_COMPONENT_RPT_03_PRESENT
#define WIPER_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @WATCHDOG signal

#ifndef WATCHDOG_COMPONENT_RPT_03_ABSENT
#define WATCHDOG_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef WATCHDOG_COMPONENT_RPT_03_PRESENT
#define WATCHDOG_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @BRAKE_DECEL signal

#ifndef BRAKE_DECEL_COMPONENT_RPT_03_ABSENT
#define BRAKE_DECEL_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef BRAKE_DECEL_COMPONENT_RPT_03_PRESENT
#define BRAKE_DECEL_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @REAR_PASS_DOOR signal

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_03_ABSENT
#define REAR_PASS_DOOR_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_03_PRESENT
#define REAR_PASS_DOOR_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @ENGINE_BRAKE signal

#ifndef ENGINE_BRAKE_COMPONENT_RPT_03_ABSENT
#define ENGINE_BRAKE_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef ENGINE_BRAKE_COMPONENT_RPT_03_PRESENT
#define ENGINE_BRAKE_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @MARKER_LAMP signal

#ifndef MARKER_LAMP_COMPONENT_RPT_03_ABSENT
#define MARKER_LAMP_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef MARKER_LAMP_COMPONENT_RPT_03_PRESENT
#define MARKER_LAMP_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @CABIN_CLIMATE signal

#ifndef CABIN_CLIMATE_COMPONENT_RPT_03_ABSENT
#define CABIN_CLIMATE_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef CABIN_CLIMATE_COMPONENT_RPT_03_PRESENT
#define CABIN_CLIMATE_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @CABIN_FAN_SPEED signal

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_03_ABSENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_03_PRESENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @CABIN_TEMP signal

#ifndef CABIN_TEMP_COMPONENT_RPT_03_ABSENT
#define CABIN_TEMP_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef CABIN_TEMP_COMPONENT_RPT_03_PRESENT
#define CABIN_TEMP_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @EXHAUST_BRAKE signal

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_03_ABSENT
#define EXHAUST_BRAKE_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_03_PRESENT
#define EXHAUST_BRAKE_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @POWER_TAKE_OFF signal

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_03_ABSENT
#define POWER_TAKE_OFF_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_03_PRESENT
#define POWER_TAKE_OFF_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_00 signal

#ifndef TIPPER_BODY_00_COMPONENT_RPT_03_ABSENT
#define TIPPER_BODY_00_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef TIPPER_BODY_00_COMPONENT_RPT_03_PRESENT
#define TIPPER_BODY_00_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @TRAILER_AIR_SUPPLY signal

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_03_ABSENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_03_PRESENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @TRAILER_BRAKE signal

#ifndef TRAILER_BRAKE_COMPONENT_RPT_03_ABSENT
#define TRAILER_BRAKE_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef TRAILER_BRAKE_COMPONENT_RPT_03_PRESENT
#define TRAILER_BRAKE_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @CONFIG_FAULT signal

#ifndef CONFIG_FAULT_COMPONENT_RPT_03_NO_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_03_NO_FAULT (0)
#endif

#ifndef CONFIG_FAULT_COMPONENT_RPT_03_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_03_FAULT (1)
#endif


// Value tables for @CAN_TIMEOUT_FAULT signal

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_03_NO_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_03_NO_FAULT (0)
#endif

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_03_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_03_FAULT (1)
#endif


// Value tables for @INTERNAL_SUPPLY_VOLTAGE_FAULT signal

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_03_NO_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_03_NO_FAULT (0)
#endif

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_03_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_03_FAULT (1)
#endif


// Value tables for @SUPERVISORY_TIMEOUT signal

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_03_NO_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_03_NO_TIMEOUT (0)
#endif

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_03_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_03_TIMEOUT (1)
#endif


// Value tables for @SUPERVISORY_SANITY_FAULT signal

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_03_NO_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_03_NO_FAULT (0)
#endif

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_03_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_03_FAULT (1)
#endif


// Value tables for @WATCHDOG_SANITY_FAULT signal

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_03_NO_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_03_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_03_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_03_FAULT (1)
#endif


// Value tables for @WATCHDOG_SYSTEM_PRESENT_FAULT signal

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_03_NO_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_03_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_03_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_03_FAULT (1)
#endif


// Value tables for @COMPONENT_READY signal

#ifndef COMPONENT_READY_COMPONENT_RPT_03_NOT_READY
#define COMPONENT_READY_COMPONENT_RPT_03_NOT_READY (0)
#endif

#ifndef COMPONENT_READY_COMPONENT_RPT_03_READY
#define COMPONENT_READY_COMPONENT_RPT_03_READY (1)
#endif


// Value tables for @ENGINE signal

#ifndef ENGINE_COMPONENT_RPT_03_ABSENT
#define ENGINE_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef ENGINE_COMPONENT_RPT_03_PRESENT
#define ENGINE_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_01 signal

#ifndef TIPPER_BODY_01_COMPONENT_RPT_03_ABSENT
#define TIPPER_BODY_01_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef TIPPER_BODY_01_COMPONENT_RPT_03_PRESENT
#define TIPPER_BODY_01_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_02 signal

#ifndef TIPPER_BODY_02_COMPONENT_RPT_03_ABSENT
#define TIPPER_BODY_02_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef TIPPER_BODY_02_COMPONENT_RPT_03_PRESENT
#define TIPPER_BODY_02_COMPONENT_RPT_03_PRESENT (1)
#endif


// Value tables for @SYSTEM_ENABLED signal

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_03_DISABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_03_DISABLED (0)
#endif

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_03_ENABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_03_ENABLED (1)
#endif


// Value tables for @SYSTEM_OVERRIDE_ACTIVE signal

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_03_NOT_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_03_NOT_OVERRIDDEN (0)
#endif

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_03_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_03_OVERRIDDEN (1)
#endif


// Value tables for @SYSTEM_FAULT_ACTIVE signal

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_03_NO_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_03_NO_FAULT (0)
#endif

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_03_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_03_FAULT (1)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_00 signal

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_03_OKAY
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_03_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_03_FAULT
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_03_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_03_NOT_USED
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_03_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_03_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_03_NOT_AVAIL (3)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_01 signal

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_03_OKAY
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_03_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_03_FAULT
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_03_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_03_NOT_USED
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_03_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_03_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_03_NOT_AVAIL (3)
#endif


// Value tables for @DIFFERENTIAL_LOCKS signal

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_03_ABSENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_03_ABSENT (0)
#endif

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_03_PRESENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_03_PRESENT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE : 4;                  //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS : 1;          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT : 1;             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT : 1;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER : 1;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE : 1;                    //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP : 1;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE : 1;                   //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER : 4;                         //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT : 4;                      //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT : 1;                    //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT : 1;   //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT : 1;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT : 1;        //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT : 1;           //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT : 1;   //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE : 1;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02 : 1;                  //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED : 1;                  //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE : 1;          //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE : 1;             //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00 : 2;         //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01 : 2;         //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS : 1;              //      Bits= 1

#else

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE;                      //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER;                             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE;                       //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                             //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT;                          //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT;                        //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT;       //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT;                 //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT;            //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT;               //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT;       //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE;                              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02;                      //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED;                      //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE;              //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE;                 //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00;             //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01;             //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS;                  //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} COMPONENT_RPT_03_t;

// def @COMPONENT_RPT_04 CAN Message (36   0x24)
#define COMPONENT_RPT_04_IDE (0U)
#define COMPONENT_RPT_04_DLC (8U)
#define COMPONENT_RPT_04_CANID (0x24)

// Value tables for @COMPONENT_TYPE signal

#ifndef COMPONENT_TYPE_COMPONENT_RPT_04_PACMOD
#define COMPONENT_TYPE_COMPONENT_RPT_04_PACMOD (0)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_04_PACMINI
#define COMPONENT_TYPE_COMPONENT_RPT_04_PACMINI (1)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_04_PACMICRO
#define COMPONENT_TYPE_COMPONENT_RPT_04_PACMICRO (2)
#endif


// Value tables for @ACCEL signal

#ifndef ACCEL_COMPONENT_RPT_04_ABSENT
#define ACCEL_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef ACCEL_COMPONENT_RPT_04_PRESENT
#define ACCEL_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @BRAKE signal

#ifndef BRAKE_COMPONENT_RPT_04_ABSENT
#define BRAKE_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef BRAKE_COMPONENT_RPT_04_PRESENT
#define BRAKE_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @CRUISE_CONTROL_BUTTONS signal

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_04_ABSENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_04_PRESENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_LEFT signal

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_04_ABSENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_04_PRESENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_RIGHT signal

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_04_ABSENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_04_PRESENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @HAZARD_LIGHTS signal

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_04_ABSENT
#define HAZARD_LIGHTS_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_04_PRESENT
#define HAZARD_LIGHTS_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @HEADLIGHT signal

#ifndef HEADLIGHT_COMPONENT_RPT_04_ABSENT
#define HEADLIGHT_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef HEADLIGHT_COMPONENT_RPT_04_PRESENT
#define HEADLIGHT_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @HORN signal

#ifndef HORN_COMPONENT_RPT_04_ABSENT
#define HORN_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef HORN_COMPONENT_RPT_04_PRESENT
#define HORN_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @MEDIA_CONTROLS signal

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_04_ABSENT
#define MEDIA_CONTROLS_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_04_PRESENT
#define MEDIA_CONTROLS_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @PARKING_BRAKE signal

#ifndef PARKING_BRAKE_COMPONENT_RPT_04_ABSENT
#define PARKING_BRAKE_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef PARKING_BRAKE_COMPONENT_RPT_04_PRESENT
#define PARKING_BRAKE_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @SHIFT signal

#ifndef SHIFT_COMPONENT_RPT_04_ABSENT
#define SHIFT_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef SHIFT_COMPONENT_RPT_04_PRESENT
#define SHIFT_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @SPRAYER signal

#ifndef SPRAYER_COMPONENT_RPT_04_ABSENT
#define SPRAYER_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef SPRAYER_COMPONENT_RPT_04_PRESENT
#define SPRAYER_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @STEERING signal

#ifndef STEERING_COMPONENT_RPT_04_ABSENT
#define STEERING_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef STEERING_COMPONENT_RPT_04_PRESENT
#define STEERING_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @TURN signal

#ifndef TURN_COMPONENT_RPT_04_ABSENT
#define TURN_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef TURN_COMPONENT_RPT_04_PRESENT
#define TURN_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @WIPER signal

#ifndef WIPER_COMPONENT_RPT_04_ABSENT
#define WIPER_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef WIPER_COMPONENT_RPT_04_PRESENT
#define WIPER_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @WATCHDOG signal

#ifndef WATCHDOG_COMPONENT_RPT_04_ABSENT
#define WATCHDOG_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef WATCHDOG_COMPONENT_RPT_04_PRESENT
#define WATCHDOG_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @BRAKE_DECEL signal

#ifndef BRAKE_DECEL_COMPONENT_RPT_04_ABSENT
#define BRAKE_DECEL_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef BRAKE_DECEL_COMPONENT_RPT_04_PRESENT
#define BRAKE_DECEL_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @REAR_PASS_DOOR signal

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_04_ABSENT
#define REAR_PASS_DOOR_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_04_PRESENT
#define REAR_PASS_DOOR_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @ENGINE_BRAKE signal

#ifndef ENGINE_BRAKE_COMPONENT_RPT_04_ABSENT
#define ENGINE_BRAKE_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef ENGINE_BRAKE_COMPONENT_RPT_04_PRESENT
#define ENGINE_BRAKE_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @MARKER_LAMP signal

#ifndef MARKER_LAMP_COMPONENT_RPT_04_ABSENT
#define MARKER_LAMP_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef MARKER_LAMP_COMPONENT_RPT_04_PRESENT
#define MARKER_LAMP_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @CABIN_CLIMATE signal

#ifndef CABIN_CLIMATE_COMPONENT_RPT_04_ABSENT
#define CABIN_CLIMATE_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef CABIN_CLIMATE_COMPONENT_RPT_04_PRESENT
#define CABIN_CLIMATE_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @CABIN_FAN_SPEED signal

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_04_ABSENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_04_PRESENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @CABIN_TEMP signal

#ifndef CABIN_TEMP_COMPONENT_RPT_04_ABSENT
#define CABIN_TEMP_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef CABIN_TEMP_COMPONENT_RPT_04_PRESENT
#define CABIN_TEMP_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @EXHAUST_BRAKE signal

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_04_ABSENT
#define EXHAUST_BRAKE_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_04_PRESENT
#define EXHAUST_BRAKE_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @POWER_TAKE_OFF signal

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_04_ABSENT
#define POWER_TAKE_OFF_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_04_PRESENT
#define POWER_TAKE_OFF_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_00 signal

#ifndef TIPPER_BODY_00_COMPONENT_RPT_04_ABSENT
#define TIPPER_BODY_00_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef TIPPER_BODY_00_COMPONENT_RPT_04_PRESENT
#define TIPPER_BODY_00_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @TRAILER_AIR_SUPPLY signal

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_04_ABSENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_04_PRESENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @TRAILER_BRAKE signal

#ifndef TRAILER_BRAKE_COMPONENT_RPT_04_ABSENT
#define TRAILER_BRAKE_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef TRAILER_BRAKE_COMPONENT_RPT_04_PRESENT
#define TRAILER_BRAKE_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @CONFIG_FAULT signal

#ifndef CONFIG_FAULT_COMPONENT_RPT_04_NO_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_04_NO_FAULT (0)
#endif

#ifndef CONFIG_FAULT_COMPONENT_RPT_04_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_04_FAULT (1)
#endif


// Value tables for @CAN_TIMEOUT_FAULT signal

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_04_NO_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_04_NO_FAULT (0)
#endif

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_04_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_04_FAULT (1)
#endif


// Value tables for @INTERNAL_SUPPLY_VOLTAGE_FAULT signal

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_04_NO_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_04_NO_FAULT (0)
#endif

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_04_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_04_FAULT (1)
#endif


// Value tables for @SUPERVISORY_TIMEOUT signal

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_04_NO_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_04_NO_TIMEOUT (0)
#endif

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_04_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_04_TIMEOUT (1)
#endif


// Value tables for @SUPERVISORY_SANITY_FAULT signal

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_04_NO_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_04_NO_FAULT (0)
#endif

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_04_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_04_FAULT (1)
#endif


// Value tables for @WATCHDOG_SANITY_FAULT signal

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_04_NO_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_04_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_04_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_04_FAULT (1)
#endif


// Value tables for @WATCHDOG_SYSTEM_PRESENT_FAULT signal

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_04_NO_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_04_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_04_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_04_FAULT (1)
#endif


// Value tables for @COMPONENT_READY signal

#ifndef COMPONENT_READY_COMPONENT_RPT_04_NOT_READY
#define COMPONENT_READY_COMPONENT_RPT_04_NOT_READY (0)
#endif

#ifndef COMPONENT_READY_COMPONENT_RPT_04_READY
#define COMPONENT_READY_COMPONENT_RPT_04_READY (1)
#endif


// Value tables for @ENGINE signal

#ifndef ENGINE_COMPONENT_RPT_04_ABSENT
#define ENGINE_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef ENGINE_COMPONENT_RPT_04_PRESENT
#define ENGINE_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_01 signal

#ifndef TIPPER_BODY_01_COMPONENT_RPT_04_ABSENT
#define TIPPER_BODY_01_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef TIPPER_BODY_01_COMPONENT_RPT_04_PRESENT
#define TIPPER_BODY_01_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_02 signal

#ifndef TIPPER_BODY_02_COMPONENT_RPT_04_ABSENT
#define TIPPER_BODY_02_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef TIPPER_BODY_02_COMPONENT_RPT_04_PRESENT
#define TIPPER_BODY_02_COMPONENT_RPT_04_PRESENT (1)
#endif


// Value tables for @SYSTEM_ENABLED signal

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_04_DISABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_04_DISABLED (0)
#endif

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_04_ENABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_04_ENABLED (1)
#endif


// Value tables for @SYSTEM_OVERRIDE_ACTIVE signal

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_04_NOT_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_04_NOT_OVERRIDDEN (0)
#endif

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_04_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_04_OVERRIDDEN (1)
#endif


// Value tables for @SYSTEM_FAULT_ACTIVE signal

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_04_NO_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_04_NO_FAULT (0)
#endif

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_04_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_04_FAULT (1)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_00 signal

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_04_OKAY
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_04_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_04_FAULT
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_04_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_04_NOT_USED
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_04_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_04_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_04_NOT_AVAIL (3)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_01 signal

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_04_OKAY
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_04_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_04_FAULT
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_04_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_04_NOT_USED
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_04_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_04_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_04_NOT_AVAIL (3)
#endif


// Value tables for @DIFFERENTIAL_LOCKS signal

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_04_ABSENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_04_ABSENT (0)
#endif

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_04_PRESENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_04_PRESENT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE : 4;                  //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS : 1;          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT : 1;             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT : 1;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER : 1;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE : 1;                    //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP : 1;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE : 1;                   //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER : 4;                         //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT : 4;                      //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT : 1;                    //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT : 1;   //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT : 1;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT : 1;        //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT : 1;           //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT : 1;   //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE : 1;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02 : 1;                  //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED : 1;                  //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE : 1;          //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE : 1;             //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00 : 2;         //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01 : 2;         //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS : 1;              //      Bits= 1

#else

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE;                      //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER;                             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE;                       //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                             //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT;                          //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT;                        //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT;       //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT;                 //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT;            //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT;               //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT;       //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE;                              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02;                      //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED;                      //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE;              //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE;                 //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00;             //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01;             //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS;                  //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} COMPONENT_RPT_04_t;

// def @USER_PC_HEALTH_RPT_00 CAN Message (37   0x25)
#define USER_PC_HEALTH_RPT_00_IDE (0U)
#define USER_PC_HEALTH_RPT_00_DLC (3U)
#define USER_PC_HEALTH_RPT_00_CANID (0x25)

// Value tables for @USER_PC_APPLICATION_FAULT signal

#ifndef USER_PC_APPLICATION_FAULT_USER_PC_HEALTH_RPT_00_NO_FAULT
#define USER_PC_APPLICATION_FAULT_USER_PC_HEALTH_RPT_00_NO_FAULT (0)
#endif

#ifndef USER_PC_APPLICATION_FAULT_USER_PC_HEALTH_RPT_00_FAULT
#define USER_PC_APPLICATION_FAULT_USER_PC_HEALTH_RPT_00_FAULT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // The COUNTER shall have the value of 0 with the first message transmission. It shall increase by 1 with each subsequent message transmission up to and including the value of 0xFF. The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                           //      Bits= 8

  // The CHECKSUM shall be the least significant byte of the sum of the message ID and the COUNTER. For example, if COUNTER is 0xFB and the message ID is 0x25, then the sum is 0x0120 and the checksum is 0x20.
  uint8_t CHECKSUM;                          //      Bits= 8

  // This signal allows the User PC application to report a fault in its operation.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t USER_PC_APPLICATION_FAULT : 1;     //      Bits= 1

#else

  // The COUNTER shall have the value of 0 with the first message transmission. It shall increase by 1 with each subsequent message transmission up to and including the value of 0xFF. The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                           //      Bits= 8

  // The CHECKSUM shall be the least significant byte of the sum of the message ID and the COUNTER. For example, if COUNTER is 0xFB and the message ID is 0x25, then the sum is 0x0120 and the checksum is 0x20.
  uint8_t CHECKSUM;                          //      Bits= 8

  // This signal allows the User PC application to report a fault in its operation.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t USER_PC_APPLICATION_FAULT;         //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} USER_PC_HEALTH_RPT_00_t;

// def @USER_PC_HEALTH_RPT_01 CAN Message (38   0x26)
#define USER_PC_HEALTH_RPT_01_IDE (0U)
#define USER_PC_HEALTH_RPT_01_DLC (3U)
#define USER_PC_HEALTH_RPT_01_CANID (0x26)

// Value tables for @USER_PC_APPLICATION_FAULT signal

#ifndef USER_PC_APPLICATION_FAULT_USER_PC_HEALTH_RPT_01_NO_FAULT
#define USER_PC_APPLICATION_FAULT_USER_PC_HEALTH_RPT_01_NO_FAULT (0)
#endif

#ifndef USER_PC_APPLICATION_FAULT_USER_PC_HEALTH_RPT_01_FAULT
#define USER_PC_APPLICATION_FAULT_USER_PC_HEALTH_RPT_01_FAULT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // The COUNTER shall have the value of 0 with the first message transmission. It shall increase by 1 with each subsequent message transmission up to and including the value of 0xFF. The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                           //      Bits= 8

  // The CHECKSUM shall be the least significant byte of the sum of the message ID and the COUNTER. For example, if COUNTER is 0xFB and the message ID is 0x25, then the sum is 0x0120 and the checksum is 0x20.
  uint8_t CHECKSUM;                          //      Bits= 8

  // This signal allows the User PC application to report a fault in its operation.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t USER_PC_APPLICATION_FAULT : 1;     //      Bits= 1

#else

  // The COUNTER shall have the value of 0 with the first message transmission. It shall increase by 1 with each subsequent message transmission up to and including the value of 0xFF. The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                           //      Bits= 8

  // The CHECKSUM shall be the least significant byte of the sum of the message ID and the COUNTER. For example, if COUNTER is 0xFB and the message ID is 0x25, then the sum is 0x0120 and the checksum is 0x20.
  uint8_t CHECKSUM;                          //      Bits= 8

  // This signal allows the User PC application to report a fault in its operation.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t USER_PC_APPLICATION_FAULT;         //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} USER_PC_HEALTH_RPT_01_t;

// def @COMPONENT_RPT_05 CAN Message (39   0x27)
#define COMPONENT_RPT_05_IDE (0U)
#define COMPONENT_RPT_05_DLC (8U)
#define COMPONENT_RPT_05_CANID (0x27)

// Value tables for @COMPONENT_TYPE signal

#ifndef COMPONENT_TYPE_COMPONENT_RPT_05_PACMOD
#define COMPONENT_TYPE_COMPONENT_RPT_05_PACMOD (0)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_05_PACMINI
#define COMPONENT_TYPE_COMPONENT_RPT_05_PACMINI (1)
#endif

#ifndef COMPONENT_TYPE_COMPONENT_RPT_05_PACMICRO
#define COMPONENT_TYPE_COMPONENT_RPT_05_PACMICRO (2)
#endif


// Value tables for @ACCEL signal

#ifndef ACCEL_COMPONENT_RPT_05_ABSENT
#define ACCEL_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef ACCEL_COMPONENT_RPT_05_PRESENT
#define ACCEL_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @BRAKE signal

#ifndef BRAKE_COMPONENT_RPT_05_ABSENT
#define BRAKE_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef BRAKE_COMPONENT_RPT_05_PRESENT
#define BRAKE_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @CRUISE_CONTROL_BUTTONS signal

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_05_ABSENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_05_PRESENT
#define CRUISE_CONTROL_BUTTONS_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_LEFT signal

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_05_ABSENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_LEFT_COMPONENT_RPT_05_PRESENT
#define DASH_CONTROLS_LEFT_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @DASH_CONTROLS_RIGHT signal

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_05_ABSENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef DASH_CONTROLS_RIGHT_COMPONENT_RPT_05_PRESENT
#define DASH_CONTROLS_RIGHT_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @HAZARD_LIGHTS signal

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_05_ABSENT
#define HAZARD_LIGHTS_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef HAZARD_LIGHTS_COMPONENT_RPT_05_PRESENT
#define HAZARD_LIGHTS_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @HEADLIGHT signal

#ifndef HEADLIGHT_COMPONENT_RPT_05_ABSENT
#define HEADLIGHT_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef HEADLIGHT_COMPONENT_RPT_05_PRESENT
#define HEADLIGHT_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @HORN signal

#ifndef HORN_COMPONENT_RPT_05_ABSENT
#define HORN_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef HORN_COMPONENT_RPT_05_PRESENT
#define HORN_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @MEDIA_CONTROLS signal

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_05_ABSENT
#define MEDIA_CONTROLS_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef MEDIA_CONTROLS_COMPONENT_RPT_05_PRESENT
#define MEDIA_CONTROLS_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @PARKING_BRAKE signal

#ifndef PARKING_BRAKE_COMPONENT_RPT_05_ABSENT
#define PARKING_BRAKE_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef PARKING_BRAKE_COMPONENT_RPT_05_PRESENT
#define PARKING_BRAKE_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @SHIFT signal

#ifndef SHIFT_COMPONENT_RPT_05_ABSENT
#define SHIFT_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef SHIFT_COMPONENT_RPT_05_PRESENT
#define SHIFT_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @SPRAYER signal

#ifndef SPRAYER_COMPONENT_RPT_05_ABSENT
#define SPRAYER_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef SPRAYER_COMPONENT_RPT_05_PRESENT
#define SPRAYER_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @STEERING signal

#ifndef STEERING_COMPONENT_RPT_05_ABSENT
#define STEERING_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef STEERING_COMPONENT_RPT_05_PRESENT
#define STEERING_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @TURN signal

#ifndef TURN_COMPONENT_RPT_05_ABSENT
#define TURN_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef TURN_COMPONENT_RPT_05_PRESENT
#define TURN_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @WIPER signal

#ifndef WIPER_COMPONENT_RPT_05_ABSENT
#define WIPER_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef WIPER_COMPONENT_RPT_05_PRESENT
#define WIPER_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @WATCHDOG signal

#ifndef WATCHDOG_COMPONENT_RPT_05_ABSENT
#define WATCHDOG_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef WATCHDOG_COMPONENT_RPT_05_PRESENT
#define WATCHDOG_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @BRAKE_DECEL signal

#ifndef BRAKE_DECEL_COMPONENT_RPT_05_ABSENT
#define BRAKE_DECEL_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef BRAKE_DECEL_COMPONENT_RPT_05_PRESENT
#define BRAKE_DECEL_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @REAR_PASS_DOOR signal

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_05_ABSENT
#define REAR_PASS_DOOR_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef REAR_PASS_DOOR_COMPONENT_RPT_05_PRESENT
#define REAR_PASS_DOOR_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @ENGINE_BRAKE signal

#ifndef ENGINE_BRAKE_COMPONENT_RPT_05_ABSENT
#define ENGINE_BRAKE_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef ENGINE_BRAKE_COMPONENT_RPT_05_PRESENT
#define ENGINE_BRAKE_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @MARKER_LAMP signal

#ifndef MARKER_LAMP_COMPONENT_RPT_05_ABSENT
#define MARKER_LAMP_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef MARKER_LAMP_COMPONENT_RPT_05_PRESENT
#define MARKER_LAMP_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @CABIN_CLIMATE signal

#ifndef CABIN_CLIMATE_COMPONENT_RPT_05_ABSENT
#define CABIN_CLIMATE_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef CABIN_CLIMATE_COMPONENT_RPT_05_PRESENT
#define CABIN_CLIMATE_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @CABIN_FAN_SPEED signal

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_05_ABSENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef CABIN_FAN_SPEED_COMPONENT_RPT_05_PRESENT
#define CABIN_FAN_SPEED_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @CABIN_TEMP signal

#ifndef CABIN_TEMP_COMPONENT_RPT_05_ABSENT
#define CABIN_TEMP_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef CABIN_TEMP_COMPONENT_RPT_05_PRESENT
#define CABIN_TEMP_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @EXHAUST_BRAKE signal

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_05_ABSENT
#define EXHAUST_BRAKE_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef EXHAUST_BRAKE_COMPONENT_RPT_05_PRESENT
#define EXHAUST_BRAKE_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @POWER_TAKE_OFF signal

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_05_ABSENT
#define POWER_TAKE_OFF_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef POWER_TAKE_OFF_COMPONENT_RPT_05_PRESENT
#define POWER_TAKE_OFF_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_00 signal

#ifndef TIPPER_BODY_00_COMPONENT_RPT_05_ABSENT
#define TIPPER_BODY_00_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef TIPPER_BODY_00_COMPONENT_RPT_05_PRESENT
#define TIPPER_BODY_00_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @TRAILER_AIR_SUPPLY signal

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_05_ABSENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef TRAILER_AIR_SUPPLY_COMPONENT_RPT_05_PRESENT
#define TRAILER_AIR_SUPPLY_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @TRAILER_BRAKE signal

#ifndef TRAILER_BRAKE_COMPONENT_RPT_05_ABSENT
#define TRAILER_BRAKE_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef TRAILER_BRAKE_COMPONENT_RPT_05_PRESENT
#define TRAILER_BRAKE_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @CONFIG_FAULT signal

#ifndef CONFIG_FAULT_COMPONENT_RPT_05_NO_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_05_NO_FAULT (0)
#endif

#ifndef CONFIG_FAULT_COMPONENT_RPT_05_FAULT
#define CONFIG_FAULT_COMPONENT_RPT_05_FAULT (1)
#endif


// Value tables for @CAN_TIMEOUT_FAULT signal

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_05_NO_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_05_NO_FAULT (0)
#endif

#ifndef CAN_TIMEOUT_FAULT_COMPONENT_RPT_05_FAULT
#define CAN_TIMEOUT_FAULT_COMPONENT_RPT_05_FAULT (1)
#endif


// Value tables for @INTERNAL_SUPPLY_VOLTAGE_FAULT signal

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_05_NO_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_05_NO_FAULT (0)
#endif

#ifndef INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_05_FAULT
#define INTERNAL_SUPPLY_VOLTAGE_FAULT_COMPONENT_RPT_05_FAULT (1)
#endif


// Value tables for @SUPERVISORY_TIMEOUT signal

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_05_NO_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_05_NO_TIMEOUT (0)
#endif

#ifndef SUPERVISORY_TIMEOUT_COMPONENT_RPT_05_TIMEOUT
#define SUPERVISORY_TIMEOUT_COMPONENT_RPT_05_TIMEOUT (1)
#endif


// Value tables for @SUPERVISORY_SANITY_FAULT signal

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_05_NO_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_05_NO_FAULT (0)
#endif

#ifndef SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_05_FAULT
#define SUPERVISORY_SANITY_FAULT_COMPONENT_RPT_05_FAULT (1)
#endif


// Value tables for @WATCHDOG_SANITY_FAULT signal

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_05_NO_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_05_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SANITY_FAULT_COMPONENT_RPT_05_FAULT
#define WATCHDOG_SANITY_FAULT_COMPONENT_RPT_05_FAULT (1)
#endif


// Value tables for @WATCHDOG_SYSTEM_PRESENT_FAULT signal

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_05_NO_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_05_NO_FAULT (0)
#endif

#ifndef WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_05_FAULT
#define WATCHDOG_SYSTEM_PRESENT_FAULT_COMPONENT_RPT_05_FAULT (1)
#endif


// Value tables for @COMPONENT_READY signal

#ifndef COMPONENT_READY_COMPONENT_RPT_05_NOT_READY
#define COMPONENT_READY_COMPONENT_RPT_05_NOT_READY (0)
#endif

#ifndef COMPONENT_READY_COMPONENT_RPT_05_READY
#define COMPONENT_READY_COMPONENT_RPT_05_READY (1)
#endif


// Value tables for @ENGINE signal

#ifndef ENGINE_COMPONENT_RPT_05_ABSENT
#define ENGINE_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef ENGINE_COMPONENT_RPT_05_PRESENT
#define ENGINE_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_01 signal

#ifndef TIPPER_BODY_01_COMPONENT_RPT_05_ABSENT
#define TIPPER_BODY_01_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef TIPPER_BODY_01_COMPONENT_RPT_05_PRESENT
#define TIPPER_BODY_01_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @TIPPER_BODY_02 signal

#ifndef TIPPER_BODY_02_COMPONENT_RPT_05_ABSENT
#define TIPPER_BODY_02_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef TIPPER_BODY_02_COMPONENT_RPT_05_PRESENT
#define TIPPER_BODY_02_COMPONENT_RPT_05_PRESENT (1)
#endif


// Value tables for @SYSTEM_ENABLED signal

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_05_DISABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_05_DISABLED (0)
#endif

#ifndef SYSTEM_ENABLED_COMPONENT_RPT_05_ENABLED
#define SYSTEM_ENABLED_COMPONENT_RPT_05_ENABLED (1)
#endif


// Value tables for @SYSTEM_OVERRIDE_ACTIVE signal

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_05_NOT_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_05_NOT_OVERRIDDEN (0)
#endif

#ifndef SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_05_OVERRIDDEN
#define SYSTEM_OVERRIDE_ACTIVE_COMPONENT_RPT_05_OVERRIDDEN (1)
#endif


// Value tables for @SYSTEM_FAULT_ACTIVE signal

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_05_NO_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_05_NO_FAULT (0)
#endif

#ifndef SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_05_FAULT
#define SYSTEM_FAULT_ACTIVE_COMPONENT_RPT_05_FAULT (1)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_00 signal

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_05_OKAY
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_05_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_05_FAULT
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_05_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_05_NOT_USED
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_05_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_05_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_00_COMPONENT_RPT_05_NOT_AVAIL (3)
#endif


// Value tables for @USER_PC_HEALTH_FAULT_01 signal

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_05_OKAY
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_05_OKAY (0)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_05_FAULT
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_05_FAULT (1)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_05_NOT_USED
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_05_NOT_USED (2)
#endif

#ifndef USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_05_NOT_AVAIL
#define USER_PC_HEALTH_FAULT_01_COMPONENT_RPT_05_NOT_AVAIL (3)
#endif


// Value tables for @DIFFERENTIAL_LOCKS signal

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_05_ABSENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_05_ABSENT (0)
#endif

#ifndef DIFFERENTIAL_LOCKS_COMPONENT_RPT_05_PRESENT
#define DIFFERENTIAL_LOCKS_COMPONENT_RPT_05_PRESENT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE : 4;                  //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS : 1;          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT : 1;             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT : 1;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER : 1;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN : 1;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER : 1;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG : 1;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE : 1;                    //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP : 1;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP : 1;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE : 1;                   //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY : 1;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE : 1;                   //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER : 4;                         //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT : 4;                      //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT : 1;                    //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT : 1;   //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT : 1;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT : 1;        //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT : 1;           //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT : 1;   //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY : 1;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE : 1;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01 : 1;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02 : 1;                  //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED : 1;                  //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE : 1;          //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE : 1;             //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00 : 2;         //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01 : 2;         //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS : 1;              //      Bits= 1

#else

  //  0 : "PACMOD"
  //  1 : "PACMINI"
  //  2 : "PACMICRO"
  uint8_t COMPONENT_TYPE;                      //      Bits= 4

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ACCEL;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CRUISE_CONTROL_BUTTONS;              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_LEFT;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DASH_CONTROLS_RIGHT;                 //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HAZARD_LIGHTS;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HEADLIGHT;                           //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t HORN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MEDIA_CONTROLS;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t PARKING_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SHIFT;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t SPRAYER;                             //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t STEERING;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TURN;                                //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WIPER;                               //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t WATCHDOG;                            //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t BRAKE_DECEL;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t REAR_PASS_DOOR;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE_BRAKE;                        //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t MARKER_LAMP;                         //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_CLIMATE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_FAN_SPEED;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t CABIN_TEMP;                          //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t EXHAUST_BRAKE;                       //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t POWER_TAKE_OFF;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_00;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_AIR_SUPPLY;                  //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TRAILER_BRAKE;                       //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                             //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT;                          //      Bits= 4

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CONFIG_FAULT;                        //      Bits= 1

  // This value relates to message specific or general CAN timeouts.  It includes the watchdog component report timeout.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t CAN_TIMEOUT_FAULT;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INTERNAL_SUPPLY_VOLTAGE_FAULT;       //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t SUPERVISORY_TIMEOUT;                 //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SUPERVISORY_SANITY_FAULT;            //      Bits= 1

  // This value relates to problems with the COUNTER and COMPLIMENT signals in the component report received from the watchdog component.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SANITY_FAULT;               //      Bits= 1

  // This value shall be TRUE when the WATCHDOG system present signal in the component report received from the watchdog component is FALSE or any other system present signal is TRUE.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t WATCHDOG_SYSTEM_PRESENT_FAULT;       //      Bits= 1

  // This value will indicate whether this component is ready for by-wire control.
  //  0 : "NOT_READY"
  //  1 : "READY"
  uint8_t COMPONENT_READY;                     //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t ENGINE;                              //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_01;                      //      Bits= 1

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t TIPPER_BODY_02;                      //      Bits= 1

  // One or more systems are enabled.
  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t SYSTEM_ENABLED;                      //      Bits= 1

  // One or more overrides are active.
  //  0 : "NOT_OVERRIDDEN"
  //  1 : "OVERRIDDEN"
  uint8_t SYSTEM_OVERRIDE_ACTIVE;              //      Bits= 1

  // One or more faults are active.
  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t SYSTEM_FAULT_ACTIVE;                 //      Bits= 1

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_00;             //      Bits= 2

  // This value indicates the integrity and execution of code on the USER_PC.
  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "NOT_USED"
  //  3 : "NOT_AVAIL"
  uint8_t USER_PC_HEALTH_FAULT_01;             //      Bits= 2

  //  0 : "ABSENT"
  //  1 : "PRESENT"
  uint8_t DIFFERENTIAL_LOCKS;                  //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} COMPONENT_RPT_05_t;

// def @SAFETY_FUNC_RPT CAN Message (64   0x40)
#define SAFETY_FUNC_RPT_IDE (0U)
#define SAFETY_FUNC_RPT_DLC (4U)
#define SAFETY_FUNC_RPT_CANID (0x40)

// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_SAFETY_FUNC_RPT_NONE
#define COMMANDED_VALUE_SAFETY_FUNC_RPT_NONE (0)
#endif

#ifndef COMMANDED_VALUE_SAFETY_FUNC_RPT_AUTOMS_READY
#define COMMANDED_VALUE_SAFETY_FUNC_RPT_AUTOMS_READY (1)
#endif

#ifndef COMMANDED_VALUE_SAFETY_FUNC_RPT_AUTOMS
#define COMMANDED_VALUE_SAFETY_FUNC_RPT_AUTOMS (2)
#endif

#ifndef COMMANDED_VALUE_SAFETY_FUNC_RPT_MANUAL_READY
#define COMMANDED_VALUE_SAFETY_FUNC_RPT_MANUAL_READY (3)
#endif

#ifndef COMMANDED_VALUE_SAFETY_FUNC_RPT_CRITICAL_STOP1
#define COMMANDED_VALUE_SAFETY_FUNC_RPT_CRITICAL_STOP1 (4)
#endif

#ifndef COMMANDED_VALUE_SAFETY_FUNC_RPT_CRITICAL_STOP2
#define COMMANDED_VALUE_SAFETY_FUNC_RPT_CRITICAL_STOP2 (5)
#endif


// Value tables for @STATE signal

#ifndef STATE_SAFETY_FUNC_RPT_MANUAL_BRAKED
#define STATE_SAFETY_FUNC_RPT_MANUAL_BRAKED (0)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_MANUAL_UNBRAKED
#define STATE_SAFETY_FUNC_RPT_MANUAL_UNBRAKED (1)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_AUTOMS_READY
#define STATE_SAFETY_FUNC_RPT_AUTOMS_READY (2)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_AUTOMS_INACTIVE
#define STATE_SAFETY_FUNC_RPT_AUTOMS_INACTIVE (3)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_AUTOMS_ACTIVE_BRAKED
#define STATE_SAFETY_FUNC_RPT_AUTOMS_ACTIVE_BRAKED (4)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_AUTOMS_ACTIVE_UNBRAKED
#define STATE_SAFETY_FUNC_RPT_AUTOMS_ACTIVE_UNBRAKED (5)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_MANUAL_READY
#define STATE_SAFETY_FUNC_RPT_MANUAL_READY (6)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_CRITICAL_STOP1
#define STATE_SAFETY_FUNC_RPT_CRITICAL_STOP1 (7)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_CRITICAL_STOP2
#define STATE_SAFETY_FUNC_RPT_CRITICAL_STOP2 (8)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_STARTUP
#define STATE_SAFETY_FUNC_RPT_STARTUP (9)
#endif


// Value tables for @AUTOMS_MAN_OPCTRL signal

#ifndef AUTOMS_MAN_OPCTRL_SAFETY_FUNC_RPT_INVALID
#define AUTOMS_MAN_OPCTRL_SAFETY_FUNC_RPT_INVALID (0)
#endif

#ifndef AUTOMS_MAN_OPCTRL_SAFETY_FUNC_RPT_MANUAL
#define AUTOMS_MAN_OPCTRL_SAFETY_FUNC_RPT_MANUAL (1)
#endif

#ifndef AUTOMS_MAN_OPCTRL_SAFETY_FUNC_RPT_AUTOMS
#define AUTOMS_MAN_OPCTRL_SAFETY_FUNC_RPT_AUTOMS (2)
#endif


// Value tables for @CABIN_SAFETY_BRAKE_OPCTRL signal

#ifndef CABIN_SAFETY_BRAKE_OPCTRL_SAFETY_FUNC_RPT_INVALID
#define CABIN_SAFETY_BRAKE_OPCTRL_SAFETY_FUNC_RPT_INVALID (0)
#endif

#ifndef CABIN_SAFETY_BRAKE_OPCTRL_SAFETY_FUNC_RPT_APPLIED
#define CABIN_SAFETY_BRAKE_OPCTRL_SAFETY_FUNC_RPT_APPLIED (1)
#endif

#ifndef CABIN_SAFETY_BRAKE_OPCTRL_SAFETY_FUNC_RPT_UNAPPLIED
#define CABIN_SAFETY_BRAKE_OPCTRL_SAFETY_FUNC_RPT_UNAPPLIED (2)
#endif


// Value tables for @REMOTE_STOP_STATUS signal

#ifndef REMOTE_STOP_STATUS_SAFETY_FUNC_RPT_INVALID
#define REMOTE_STOP_STATUS_SAFETY_FUNC_RPT_INVALID (0)
#endif

#ifndef REMOTE_STOP_STATUS_SAFETY_FUNC_RPT_GO
#define REMOTE_STOP_STATUS_SAFETY_FUNC_RPT_GO (1)
#endif

#ifndef REMOTE_STOP_STATUS_SAFETY_FUNC_RPT_STOP
#define REMOTE_STOP_STATUS_SAFETY_FUNC_RPT_STOP (2)
#endif


// Value tables for @ENGINE_STATUS signal

#ifndef ENGINE_STATUS_SAFETY_FUNC_RPT_NOT_RUNNING
#define ENGINE_STATUS_SAFETY_FUNC_RPT_NOT_RUNNING (0)
#endif

#ifndef ENGINE_STATUS_SAFETY_FUNC_RPT_RUNNING
#define ENGINE_STATUS_SAFETY_FUNC_RPT_RUNNING (1)
#endif


// Value tables for @PACMOD_SYSTEM_STATUS signal

#ifndef PACMOD_SYSTEM_STATUS_SAFETY_FUNC_RPT_DISABLED
#define PACMOD_SYSTEM_STATUS_SAFETY_FUNC_RPT_DISABLED (0)
#endif

#ifndef PACMOD_SYSTEM_STATUS_SAFETY_FUNC_RPT_ENABLED
#define PACMOD_SYSTEM_STATUS_SAFETY_FUNC_RPT_ENABLED (1)
#endif


// Value tables for @USER_PC_FAULT signal

#ifndef USER_PC_FAULT_SAFETY_FUNC_RPT_OKAY
#define USER_PC_FAULT_SAFETY_FUNC_RPT_OKAY (0)
#endif

#ifndef USER_PC_FAULT_SAFETY_FUNC_RPT_FAULT
#define USER_PC_FAULT_SAFETY_FUNC_RPT_FAULT (1)
#endif

#ifndef USER_PC_FAULT_SAFETY_FUNC_RPT_TIMEOUT
#define USER_PC_FAULT_SAFETY_FUNC_RPT_TIMEOUT (2)
#endif


// Value tables for @PACMOD_SYSTEM_FAULT signal

#ifndef PACMOD_SYSTEM_FAULT_SAFETY_FUNC_RPT_OKAY
#define PACMOD_SYSTEM_FAULT_SAFETY_FUNC_RPT_OKAY (0)
#endif

#ifndef PACMOD_SYSTEM_FAULT_SAFETY_FUNC_RPT_FAULT
#define PACMOD_SYSTEM_FAULT_SAFETY_FUNC_RPT_FAULT (1)
#endif

#ifndef PACMOD_SYSTEM_FAULT_SAFETY_FUNC_RPT_TIMEOUT
#define PACMOD_SYSTEM_FAULT_SAFETY_FUNC_RPT_TIMEOUT (2)
#endif


// Value tables for @MANUAL_STATE_OBTAINABLE signal

#ifndef MANUAL_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE
#define MANUAL_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE (0)
#endif

#ifndef MANUAL_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE
#define MANUAL_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE (1)
#endif


// Value tables for @AUTOMS_READY_STATE_OBTAINABLE signal

#ifndef AUTOMS_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE
#define AUTOMS_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE (0)
#endif

#ifndef AUTOMS_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE
#define AUTOMS_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE (1)
#endif


// Value tables for @AUTOMS_STATE_OBTAINABLE signal

#ifndef AUTOMS_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE
#define AUTOMS_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE (0)
#endif

#ifndef AUTOMS_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE
#define AUTOMS_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE (1)
#endif


// Value tables for @MANUAL_READY_STATE_OBTAINABLE signal

#ifndef MANUAL_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE
#define MANUAL_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE (0)
#endif

#ifndef MANUAL_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE
#define MANUAL_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE (1)
#endif


// Value tables for @CRITICAL_STOP1_STATE_OBTAINABLE signal

#ifndef CRITICAL_STOP1_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE
#define CRITICAL_STOP1_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE (0)
#endif

#ifndef CRITICAL_STOP1_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE
#define CRITICAL_STOP1_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE (1)
#endif


// Value tables for @CRITICAL_STOP2_STATE_OBTAINABLE signal

#ifndef CRITICAL_STOP2_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE
#define CRITICAL_STOP2_STATE_OBTAINABLE_SAFETY_FUNC_RPT_NOT_OBTAINABLE (0)
#endif

#ifndef CRITICAL_STOP2_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE
#define CRITICAL_STOP2_STATE_OBTAINABLE_SAFETY_FUNC_RPT_OBTAINABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NONE"
  //  1 : "AUTOMS_READY"
  //  2 : "AUTOMS"
  //  3 : "MANUAL_READY"
  //  4 : "CRITICAL_STOP1"
  //  5 : "CRITICAL_STOP2"
  uint8_t COMMANDED_VALUE : 4;                   //      Bits= 4

  //  0 : "MANUAL_BRAKED"
  //  1 : "MANUAL_UNBRAKED"
  //  2 : "AUTOMS_READY"
  //  3 : "AUTOMS_INACTIVE"
  //  4 : "AUTOMS_ACTIVE_BRAKED"
  //  5 : "AUTOMS_ACTIVE_UNBRAKED"
  //  6 : "MANUAL_READY"
  //  7 : "CRITICAL_STOP1"
  //  8 : "CRITICAL_STOP2"
  //  9 : "STARTUP"
  uint8_t STATE : 4;                             //      Bits= 4

  //  0 : "INVALID"
  //  1 : "MANUAL"
  //  2 : "AUTOMS"
  uint8_t AUTOMS_MAN_OPCTRL : 2;                 //      Bits= 2

  //  0 : "INVALID"
  //  1 : "APPLIED"
  //  2 : "UNAPPLIED"
  uint8_t CABIN_SAFETY_BRAKE_OPCTRL : 2;         //      Bits= 2

  //  0 : "INVALID"
  //  1 : "GO"
  //  2 : "STOP"
  uint8_t REMOTE_STOP_STATUS : 2;                //      Bits= 2

  //  0 : "NOT_RUNNING"
  //  1 : "RUNNING"
  uint8_t ENGINE_STATUS : 1;                     //      Bits= 1

  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t PACMOD_SYSTEM_STATUS : 1;              //      Bits= 1

  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "TIMEOUT"
  uint8_t USER_PC_FAULT : 2;                     //      Bits= 2

  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "TIMEOUT"
  uint8_t PACMOD_SYSTEM_FAULT : 2;               //      Bits= 2

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t MANUAL_STATE_OBTAINABLE : 1;           //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t AUTOMS_READY_STATE_OBTAINABLE : 1;     //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t AUTOMS_STATE_OBTAINABLE : 1;           //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t MANUAL_READY_STATE_OBTAINABLE : 1;     //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t CRITICAL_STOP1_STATE_OBTAINABLE : 1;   //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t CRITICAL_STOP2_STATE_OBTAINABLE : 1;   //      Bits= 1

#else

  //  0 : "NONE"
  //  1 : "AUTOMS_READY"
  //  2 : "AUTOMS"
  //  3 : "MANUAL_READY"
  //  4 : "CRITICAL_STOP1"
  //  5 : "CRITICAL_STOP2"
  uint8_t COMMANDED_VALUE;                       //      Bits= 4

  //  0 : "MANUAL_BRAKED"
  //  1 : "MANUAL_UNBRAKED"
  //  2 : "AUTOMS_READY"
  //  3 : "AUTOMS_INACTIVE"
  //  4 : "AUTOMS_ACTIVE_BRAKED"
  //  5 : "AUTOMS_ACTIVE_UNBRAKED"
  //  6 : "MANUAL_READY"
  //  7 : "CRITICAL_STOP1"
  //  8 : "CRITICAL_STOP2"
  //  9 : "STARTUP"
  uint8_t STATE;                                 //      Bits= 4

  //  0 : "INVALID"
  //  1 : "MANUAL"
  //  2 : "AUTOMS"
  uint8_t AUTOMS_MAN_OPCTRL;                     //      Bits= 2

  //  0 : "INVALID"
  //  1 : "APPLIED"
  //  2 : "UNAPPLIED"
  uint8_t CABIN_SAFETY_BRAKE_OPCTRL;             //      Bits= 2

  //  0 : "INVALID"
  //  1 : "GO"
  //  2 : "STOP"
  uint8_t REMOTE_STOP_STATUS;                    //      Bits= 2

  //  0 : "NOT_RUNNING"
  //  1 : "RUNNING"
  uint8_t ENGINE_STATUS;                         //      Bits= 1

  //  0 : "DISABLED"
  //  1 : "ENABLED"
  uint8_t PACMOD_SYSTEM_STATUS;                  //      Bits= 1

  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "TIMEOUT"
  uint8_t USER_PC_FAULT;                         //      Bits= 2

  //  0 : "OKAY"
  //  1 : "FAULT"
  //  2 : "TIMEOUT"
  uint8_t PACMOD_SYSTEM_FAULT;                   //      Bits= 2

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t MANUAL_STATE_OBTAINABLE;               //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t AUTOMS_READY_STATE_OBTAINABLE;         //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t AUTOMS_STATE_OBTAINABLE;               //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t MANUAL_READY_STATE_OBTAINABLE;         //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t CRITICAL_STOP1_STATE_OBTAINABLE;       //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t CRITICAL_STOP2_STATE_OBTAINABLE;       //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SAFETY_FUNC_RPT_t;

// def @SAFETY_BRAKE_RPT CAN Message (65   0x41)
#define SAFETY_BRAKE_RPT_IDE (0U)
#define SAFETY_BRAKE_RPT_DLC (1U)
#define SAFETY_BRAKE_RPT_CANID (0x41)

// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_SAFETY_BRAKE_RPT_APPLY_BRAKE
#define COMMANDED_VALUE_SAFETY_BRAKE_RPT_APPLY_BRAKE (0)
#endif

#ifndef COMMANDED_VALUE_SAFETY_BRAKE_RPT_RELEASE_BRAKE
#define COMMANDED_VALUE_SAFETY_BRAKE_RPT_RELEASE_BRAKE (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_SAFETY_BRAKE_RPT_BRAKE_APPLIED
#define OUTPUT_VALUE_SAFETY_BRAKE_RPT_BRAKE_APPLIED (0)
#endif

#ifndef OUTPUT_VALUE_SAFETY_BRAKE_RPT_BRAKE_RELEASED
#define OUTPUT_VALUE_SAFETY_BRAKE_RPT_BRAKE_RELEASED (1)
#endif

#ifndef OUTPUT_VALUE_SAFETY_BRAKE_RPT_BETWEEN
#define OUTPUT_VALUE_SAFETY_BRAKE_RPT_BETWEEN (2)
#endif

#ifndef OUTPUT_VALUE_SAFETY_BRAKE_RPT_OUT_OF_RANGE
#define OUTPUT_VALUE_SAFETY_BRAKE_RPT_OUT_OF_RANGE (3)
#endif


// Value tables for @COMMAND_REPORTED_FAULT signal

#ifndef COMMAND_REPORTED_FAULT_SAFETY_BRAKE_RPT_NO_FAULT
#define COMMAND_REPORTED_FAULT_SAFETY_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_REPORTED_FAULT_SAFETY_BRAKE_RPT_FAULT
#define COMMAND_REPORTED_FAULT_SAFETY_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_SAFETY_BRAKE_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_SAFETY_BRAKE_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_SAFETY_BRAKE_RPT_TIMEOUT
#define COMMAND_TIMEOUT_SAFETY_BRAKE_RPT_TIMEOUT (1)
#endif


// Value tables for @COMMAND_PERMITTED signal

#ifndef COMMAND_PERMITTED_SAFETY_BRAKE_RPT_COMMAND_NOT_PERMITTED
#define COMMAND_PERMITTED_SAFETY_BRAKE_RPT_COMMAND_NOT_PERMITTED (0)
#endif

#ifndef COMMAND_PERMITTED_SAFETY_BRAKE_RPT_COMMAND_PERMITTED
#define COMMAND_PERMITTED_SAFETY_BRAKE_RPT_COMMAND_PERMITTED (1)
#endif


// Value tables for @REPORTED_FAULT signal

#ifndef REPORTED_FAULT_SAFETY_BRAKE_RPT_NO_FAULT
#define REPORTED_FAULT_SAFETY_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef REPORTED_FAULT_SAFETY_BRAKE_RPT_FAULT
#define REPORTED_FAULT_SAFETY_BRAKE_RPT_FAULT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "APPLY_BRAKE"
  //  1 : "RELEASE_BRAKE"
  uint8_t COMMANDED_VALUE : 1;               //      Bits= 1

  //  0 : "BRAKE_APPLIED"
  //  1 : "BRAKE_RELEASED"
  //  2 : "BETWEEN"
  //  3 : "OUT_OF_RANGE"
  uint8_t OUTPUT_VALUE : 2;                  //      Bits= 2

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_REPORTED_FAULT : 1;        //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "COMMAND_NOT_PERMITTED"
  //  1 : "COMMAND_PERMITTED"
  uint8_t COMMAND_PERMITTED : 1;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t REPORTED_FAULT : 1;                //      Bits= 1

#else

  //  0 : "APPLY_BRAKE"
  //  1 : "RELEASE_BRAKE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 1

  //  0 : "BRAKE_APPLIED"
  //  1 : "BRAKE_RELEASED"
  //  2 : "BETWEEN"
  //  3 : "OUT_OF_RANGE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 2

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_REPORTED_FAULT;            //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "COMMAND_NOT_PERMITTED"
  //  1 : "COMMAND_PERMITTED"
  uint8_t COMMAND_PERMITTED;                 //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t REPORTED_FAULT;                    //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SAFETY_BRAKE_RPT_t;

// def @VEHICLE_FAULT_RPT CAN Message (66   0x42)
#define VEHICLE_FAULT_RPT_IDE (0U)
#define VEHICLE_FAULT_RPT_DLC (4U)
#define VEHICLE_FAULT_RPT_CANID (0x42)

// Value tables for @ENGINE_CHECK_LIGHT signal

#ifndef ENGINE_CHECK_LIGHT_VEHICLE_FAULT_RPT_FALSE
#define ENGINE_CHECK_LIGHT_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef ENGINE_CHECK_LIGHT_VEHICLE_FAULT_RPT_TRUE
#define ENGINE_CHECK_LIGHT_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @ENGINE_CHECK_LIGHT_AVAIL signal

#ifndef ENGINE_CHECK_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define ENGINE_CHECK_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ENGINE_CHECK_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define ENGINE_CHECK_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @TRC_FAULT_LIGHT signal

#ifndef TRC_FAULT_LIGHT_VEHICLE_FAULT_RPT_FALSE
#define TRC_FAULT_LIGHT_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef TRC_FAULT_LIGHT_VEHICLE_FAULT_RPT_TRUE
#define TRC_FAULT_LIGHT_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @TRC_FAULT_LIGHT_AVAIL signal

#ifndef TRC_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define TRC_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef TRC_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define TRC_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @TRC_OFF_FAULT_LIGHT signal

#ifndef TRC_OFF_FAULT_LIGHT_VEHICLE_FAULT_RPT_FALSE
#define TRC_OFF_FAULT_LIGHT_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef TRC_OFF_FAULT_LIGHT_VEHICLE_FAULT_RPT_TRUE
#define TRC_OFF_FAULT_LIGHT_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @TRC_OFF_FAULT_LIGHT_AVAIL signal

#ifndef TRC_OFF_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define TRC_OFF_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef TRC_OFF_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define TRC_OFF_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @ANTILOCK_BRAKE_FAULT_LIGHT signal

#ifndef ANTILOCK_BRAKE_FAULT_LIGHT_VEHICLE_FAULT_RPT_FALSE
#define ANTILOCK_BRAKE_FAULT_LIGHT_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef ANTILOCK_BRAKE_FAULT_LIGHT_VEHICLE_FAULT_RPT_TRUE
#define ANTILOCK_BRAKE_FAULT_LIGHT_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @ANTILOCK_BRAKE_FAULT_LIGHT_AVAIL signal

#ifndef ANTILOCK_BRAKE_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define ANTILOCK_BRAKE_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ANTILOCK_BRAKE_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define ANTILOCK_BRAKE_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @TIRE_FAULT_LIGHT signal

#ifndef TIRE_FAULT_LIGHT_VEHICLE_FAULT_RPT_FALSE
#define TIRE_FAULT_LIGHT_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef TIRE_FAULT_LIGHT_VEHICLE_FAULT_RPT_TRUE
#define TIRE_FAULT_LIGHT_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @TIRE_FAULT_LIGHT_AVAIL signal

#ifndef TIRE_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define TIRE_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef TIRE_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define TIRE_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @AIR_BAGS_FAULT_LIGHT signal

#ifndef AIR_BAGS_FAULT_LIGHT_VEHICLE_FAULT_RPT_FALSE
#define AIR_BAGS_FAULT_LIGHT_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef AIR_BAGS_FAULT_LIGHT_VEHICLE_FAULT_RPT_TRUE
#define AIR_BAGS_FAULT_LIGHT_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @AIR_BAGS_FAULT_LIGHT_AVAIL signal

#ifndef AIR_BAGS_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define AIR_BAGS_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef AIR_BAGS_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define AIR_BAGS_FAULT_LIGHT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @LOW_ENGINE_OIL_PRESSURE signal

#ifndef LOW_ENGINE_OIL_PRESSURE_VEHICLE_FAULT_RPT_FALSE
#define LOW_ENGINE_OIL_PRESSURE_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef LOW_ENGINE_OIL_PRESSURE_VEHICLE_FAULT_RPT_TRUE
#define LOW_ENGINE_OIL_PRESSURE_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @LOW_ENGINE_OIL_PRESSURE_AVAIL signal

#ifndef LOW_ENGINE_OIL_PRESSURE_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define LOW_ENGINE_OIL_PRESSURE_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef LOW_ENGINE_OIL_PRESSURE_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define LOW_ENGINE_OIL_PRESSURE_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @BRAKE_FAULT signal

#ifndef BRAKE_FAULT_VEHICLE_FAULT_RPT_FALSE
#define BRAKE_FAULT_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef BRAKE_FAULT_VEHICLE_FAULT_RPT_TRUE
#define BRAKE_FAULT_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @BRAKE_FAULT_AVAIL signal

#ifndef BRAKE_FAULT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define BRAKE_FAULT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_FAULT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define BRAKE_FAULT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @BRK_APPLIED_POWER_REDUCED signal

#ifndef BRK_APPLIED_POWER_REDUCED_VEHICLE_FAULT_RPT_FALSE
#define BRK_APPLIED_POWER_REDUCED_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef BRK_APPLIED_POWER_REDUCED_VEHICLE_FAULT_RPT_TRUE
#define BRK_APPLIED_POWER_REDUCED_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @BRK_APPLIED_POWER_REDUCED_AVAIL signal

#ifndef BRK_APPLIED_POWER_REDUCED_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define BRK_APPLIED_POWER_REDUCED_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRK_APPLIED_POWER_REDUCED_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define BRK_APPLIED_POWER_REDUCED_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @STEERING_LOSS_STOP_SAFELY signal

#ifndef STEERING_LOSS_STOP_SAFELY_VEHICLE_FAULT_RPT_FALSE
#define STEERING_LOSS_STOP_SAFELY_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef STEERING_LOSS_STOP_SAFELY_VEHICLE_FAULT_RPT_TRUE
#define STEERING_LOSS_STOP_SAFELY_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @STEERING_LOSS_STOP_SAFELY_AVAIL signal

#ifndef STEERING_LOSS_STOP_SAFELY_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define STEERING_LOSS_STOP_SAFELY_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef STEERING_LOSS_STOP_SAFELY_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define STEERING_LOSS_STOP_SAFELY_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @STEERING_FAULT_SERVICE_NOW signal

#ifndef STEERING_FAULT_SERVICE_NOW_VEHICLE_FAULT_RPT_FALSE
#define STEERING_FAULT_SERVICE_NOW_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef STEERING_FAULT_SERVICE_NOW_VEHICLE_FAULT_RPT_TRUE
#define STEERING_FAULT_SERVICE_NOW_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @STEERING_FAULT_SERVICE_NOW_AVAIL signal

#ifndef STEERING_FAULT_SERVICE_NOW_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define STEERING_FAULT_SERVICE_NOW_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef STEERING_FAULT_SERVICE_NOW_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define STEERING_FAULT_SERVICE_NOW_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @XMSN_FAULT_SERVICE_NOW signal

#ifndef XMSN_FAULT_SERVICE_NOW_VEHICLE_FAULT_RPT_FALSE
#define XMSN_FAULT_SERVICE_NOW_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef XMSN_FAULT_SERVICE_NOW_VEHICLE_FAULT_RPT_TRUE
#define XMSN_FAULT_SERVICE_NOW_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @XMSN_FAULT_SERVICE_NOW_AVAIL signal

#ifndef XMSN_FAULT_SERVICE_NOW_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define XMSN_FAULT_SERVICE_NOW_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef XMSN_FAULT_SERVICE_NOW_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define XMSN_FAULT_SERVICE_NOW_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @XMSN_OVER_TEMP_STOP_SAFELY signal

#ifndef XMSN_OVER_TEMP_STOP_SAFELY_VEHICLE_FAULT_RPT_FALSE
#define XMSN_OVER_TEMP_STOP_SAFELY_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef XMSN_OVER_TEMP_STOP_SAFELY_VEHICLE_FAULT_RPT_TRUE
#define XMSN_OVER_TEMP_STOP_SAFELY_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @XMSN_OVER_TEMP_STOP_SAFELY_AVAIL signal

#ifndef XMSN_OVER_TEMP_STOP_SAFELY_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define XMSN_OVER_TEMP_STOP_SAFELY_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef XMSN_OVER_TEMP_STOP_SAFELY_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define XMSN_OVER_TEMP_STOP_SAFELY_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @LOW_BATTERY_FEATURES_OFF signal

#ifndef LOW_BATTERY_FEATURES_OFF_VEHICLE_FAULT_RPT_FALSE
#define LOW_BATTERY_FEATURES_OFF_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef LOW_BATTERY_FEATURES_OFF_VEHICLE_FAULT_RPT_TRUE
#define LOW_BATTERY_FEATURES_OFF_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @LOW_BATTERY_FEATURES_OFF_AVAIL signal

#ifndef LOW_BATTERY_FEATURES_OFF_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define LOW_BATTERY_FEATURES_OFF_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef LOW_BATTERY_FEATURES_OFF_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define LOW_BATTERY_FEATURES_OFF_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


// Value tables for @CHARGING_SYSTEM_FAULT signal

#ifndef CHARGING_SYSTEM_FAULT_VEHICLE_FAULT_RPT_FALSE
#define CHARGING_SYSTEM_FAULT_VEHICLE_FAULT_RPT_FALSE (0)
#endif

#ifndef CHARGING_SYSTEM_FAULT_VEHICLE_FAULT_RPT_TRUE
#define CHARGING_SYSTEM_FAULT_VEHICLE_FAULT_RPT_TRUE (1)
#endif


// Value tables for @CHARGING_SYSTEM_FAULT_AVAIL signal

#ifndef CHARGING_SYSTEM_FAULT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE
#define CHARGING_SYSTEM_FAULT_AVAIL_VEHICLE_FAULT_RPT_NOT_AVAILABLE (0)
#endif

#ifndef CHARGING_SYSTEM_FAULT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE
#define CHARGING_SYSTEM_FAULT_AVAIL_VEHICLE_FAULT_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENGINE_CHECK_LIGHT : 1;                 //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENGINE_CHECK_LIGHT_AVAIL : 1;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TRC_FAULT_LIGHT : 1;                    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TRC_FAULT_LIGHT_AVAIL : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TRC_OFF_FAULT_LIGHT : 1;                //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TRC_OFF_FAULT_LIGHT_AVAIL : 1;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ANTILOCK_BRAKE_FAULT_LIGHT : 1;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ANTILOCK_BRAKE_FAULT_LIGHT_AVAIL : 1;   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TIRE_FAULT_LIGHT : 1;                   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TIRE_FAULT_LIGHT_AVAIL : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t AIR_BAGS_FAULT_LIGHT : 1;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t AIR_BAGS_FAULT_LIGHT_AVAIL : 1;         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t LOW_ENGINE_OIL_PRESSURE : 1;            //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t LOW_ENGINE_OIL_PRESSURE_AVAIL : 1;      //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_FAULT : 1;                        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_FAULT_AVAIL : 1;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRK_APPLIED_POWER_REDUCED : 1;          //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRK_APPLIED_POWER_REDUCED_AVAIL : 1;    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEERING_LOSS_STOP_SAFELY : 1;          //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_LOSS_STOP_SAFELY_AVAIL : 1;    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEERING_FAULT_SERVICE_NOW : 1;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_FAULT_SERVICE_NOW_AVAIL : 1;   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t XMSN_FAULT_SERVICE_NOW : 1;             //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t XMSN_FAULT_SERVICE_NOW_AVAIL : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t XMSN_OVER_TEMP_STOP_SAFELY : 1;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t XMSN_OVER_TEMP_STOP_SAFELY_AVAIL : 1;   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t LOW_BATTERY_FEATURES_OFF : 1;           //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t LOW_BATTERY_FEATURES_OFF_AVAIL : 1;     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CHARGING_SYSTEM_FAULT : 1;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t CHARGING_SYSTEM_FAULT_AVAIL : 1;        //      Bits= 1

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENGINE_CHECK_LIGHT;                     //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENGINE_CHECK_LIGHT_AVAIL;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TRC_FAULT_LIGHT;                        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TRC_FAULT_LIGHT_AVAIL;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TRC_OFF_FAULT_LIGHT;                    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TRC_OFF_FAULT_LIGHT_AVAIL;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ANTILOCK_BRAKE_FAULT_LIGHT;             //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ANTILOCK_BRAKE_FAULT_LIGHT_AVAIL;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TIRE_FAULT_LIGHT;                       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TIRE_FAULT_LIGHT_AVAIL;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t AIR_BAGS_FAULT_LIGHT;                   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t AIR_BAGS_FAULT_LIGHT_AVAIL;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t LOW_ENGINE_OIL_PRESSURE;                //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t LOW_ENGINE_OIL_PRESSURE_AVAIL;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_FAULT;                            //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_FAULT_AVAIL;                      //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRK_APPLIED_POWER_REDUCED;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRK_APPLIED_POWER_REDUCED_AVAIL;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEERING_LOSS_STOP_SAFELY;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_LOSS_STOP_SAFELY_AVAIL;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEERING_FAULT_SERVICE_NOW;             //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_FAULT_SERVICE_NOW_AVAIL;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t XMSN_FAULT_SERVICE_NOW;                 //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t XMSN_FAULT_SERVICE_NOW_AVAIL;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t XMSN_OVER_TEMP_STOP_SAFELY;             //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t XMSN_OVER_TEMP_STOP_SAFELY_AVAIL;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t LOW_BATTERY_FEATURES_OFF;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t LOW_BATTERY_FEATURES_OFF_AVAIL;         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CHARGING_SYSTEM_FAULT;                  //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t CHARGING_SYSTEM_FAULT_AVAIL;            //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} VEHICLE_FAULT_RPT_t;

// def @SAFETY_FUNC_RPT_2 CAN Message (67   0x43)
#define SAFETY_FUNC_RPT_2_IDE (0U)
#define SAFETY_FUNC_RPT_2_DLC (2U)
#define SAFETY_FUNC_RPT_2_CANID (0x43)

// Value tables for @COMMANDED_STATE signal

#ifndef COMMANDED_STATE_SAFETY_FUNC_RPT_2_NONE
#define COMMANDED_STATE_SAFETY_FUNC_RPT_2_NONE (0)
#endif

#ifndef COMMANDED_STATE_SAFETY_FUNC_RPT_2_AUTOMS_READY
#define COMMANDED_STATE_SAFETY_FUNC_RPT_2_AUTOMS_READY (1)
#endif

#ifndef COMMANDED_STATE_SAFETY_FUNC_RPT_2_AUTOMS
#define COMMANDED_STATE_SAFETY_FUNC_RPT_2_AUTOMS (2)
#endif

#ifndef COMMANDED_STATE_SAFETY_FUNC_RPT_2_MANUAL_READY
#define COMMANDED_STATE_SAFETY_FUNC_RPT_2_MANUAL_READY (3)
#endif


// Value tables for @STATE signal

#ifndef STATE_SAFETY_FUNC_RPT_2_NONE
#define STATE_SAFETY_FUNC_RPT_2_NONE (0)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_2_AUTOMS_READY
#define STATE_SAFETY_FUNC_RPT_2_AUTOMS_READY (1)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_2_AUTOMS
#define STATE_SAFETY_FUNC_RPT_2_AUTOMS (2)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_2_MANUAL_READY
#define STATE_SAFETY_FUNC_RPT_2_MANUAL_READY (3)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_2_MANUAL
#define STATE_SAFETY_FUNC_RPT_2_MANUAL (4)
#endif

#ifndef STATE_SAFETY_FUNC_RPT_2_STARTUP
#define STATE_SAFETY_FUNC_RPT_2_STARTUP (5)
#endif


// Value tables for @MANUAL_STATE_OBTAINABLE signal

#ifndef MANUAL_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_NOT_OBTAINABLE
#define MANUAL_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_NOT_OBTAINABLE (0)
#endif

#ifndef MANUAL_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_OBTAINABLE
#define MANUAL_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_OBTAINABLE (1)
#endif


// Value tables for @AUTOMS_READY_STATE_OBTAINABLE signal

#ifndef AUTOMS_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_NOT_OBTAINABLE
#define AUTOMS_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_NOT_OBTAINABLE (0)
#endif

#ifndef AUTOMS_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_OBTAINABLE
#define AUTOMS_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_OBTAINABLE (1)
#endif


// Value tables for @AUTOMS_STATE_OBTAINABLE signal

#ifndef AUTOMS_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_NOT_OBTAINABLE
#define AUTOMS_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_NOT_OBTAINABLE (0)
#endif

#ifndef AUTOMS_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_OBTAINABLE
#define AUTOMS_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_OBTAINABLE (1)
#endif


// Value tables for @MANUAL_READY_STATE_OBTAINABLE signal

#ifndef MANUAL_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_NOT_OBTAINABLE
#define MANUAL_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_NOT_OBTAINABLE (0)
#endif

#ifndef MANUAL_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_OBTAINABLE
#define MANUAL_READY_STATE_OBTAINABLE_SAFETY_FUNC_RPT_2_OBTAINABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NONE"
  //  1 : "AUTOMS_READY"
  //  2 : "AUTOMS"
  //  3 : "MANUAL_READY"
  uint8_t COMMANDED_STATE : 4;                 //      Bits= 4

  //  0 : "NONE"
  //  1 : "AUTOMS_READY"
  //  2 : "AUTOMS"
  //  3 : "MANUAL_READY"
  //  4 : "MANUAL"
  //  5 : "STARTUP"
  uint8_t STATE : 4;                           //      Bits= 4

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t MANUAL_STATE_OBTAINABLE : 1;         //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t AUTOMS_READY_STATE_OBTAINABLE : 1;   //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t AUTOMS_STATE_OBTAINABLE : 1;         //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t MANUAL_READY_STATE_OBTAINABLE : 1;   //      Bits= 1

#else

  //  0 : "NONE"
  //  1 : "AUTOMS_READY"
  //  2 : "AUTOMS"
  //  3 : "MANUAL_READY"
  uint8_t COMMANDED_STATE;                     //      Bits= 4

  //  0 : "NONE"
  //  1 : "AUTOMS_READY"
  //  2 : "AUTOMS"
  //  3 : "MANUAL_READY"
  //  4 : "MANUAL"
  //  5 : "STARTUP"
  uint8_t STATE;                               //      Bits= 4

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t MANUAL_STATE_OBTAINABLE;             //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t AUTOMS_READY_STATE_OBTAINABLE;       //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t AUTOMS_STATE_OBTAINABLE;             //      Bits= 1

  //  0 : "NOT_OBTAINABLE"
  //  1 : "OBTAINABLE"
  uint8_t MANUAL_READY_STATE_OBTAINABLE;       //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SAFETY_FUNC_RPT_2_t;

// def @SAFETY_RESPONSE_RPT CAN Message (68   0x44)
#define SAFETY_RESPONSE_RPT_IDE (0U)
#define SAFETY_RESPONSE_RPT_DLC (1U)
#define SAFETY_RESPONSE_RPT_CANID (0x44)
#define SAFETY_RESPONSE_RPT_CYC (250U)

// Value tables for @SAFETY_RESPONSE signal

#ifndef SAFETY_RESPONSE_SAFETY_RESPONSE_RPT_RESERVED
#define SAFETY_RESPONSE_SAFETY_RESPONSE_RPT_RESERVED (0)
#endif

#ifndef SAFETY_RESPONSE_SAFETY_RESPONSE_RPT_SAFETY_RESPONSE_1
#define SAFETY_RESPONSE_SAFETY_RESPONSE_RPT_SAFETY_RESPONSE_1 (1)
#endif

#ifndef SAFETY_RESPONSE_SAFETY_RESPONSE_RPT_SAFETY_RESPONSE_2
#define SAFETY_RESPONSE_SAFETY_RESPONSE_RPT_SAFETY_RESPONSE_2 (2)
#endif

#ifndef SAFETY_RESPONSE_SAFETY_RESPONSE_RPT_SAFETY_RESPONSE_3
#define SAFETY_RESPONSE_SAFETY_RESPONSE_RPT_SAFETY_RESPONSE_3 (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // A value of 1 indicates PACMod is operating normally or is in a safe state. Values 2 or 3 indicate an automated PACMod response.
  //  0 : "RESERVED"
  //  1 : "SAFETY_RESPONSE_1"
  //  2 : "SAFETY_RESPONSE_2"
  //  3 : "SAFETY_RESPONSE_3"
  uint8_t SAFETY_RESPONSE : 4;               //      Bits= 4

#else

  // A value of 1 indicates PACMod is operating normally or is in a safe state. Values 2 or 3 indicate an automated PACMod response.
  //  0 : "RESERVED"
  //  1 : "SAFETY_RESPONSE_1"
  //  2 : "SAFETY_RESPONSE_2"
  //  3 : "SAFETY_RESPONSE_3"
  uint8_t SAFETY_RESPONSE;                   //      Bits= 4

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SAFETY_RESPONSE_RPT_t;

// def @GLOBAL_CMD CAN Message (128  0x80)
#define GLOBAL_CMD_IDE (0U)
#define GLOBAL_CMD_DLC (2U)
#define GLOBAL_CMD_CANID (0x80)

// Value tables for @CLEAR_FAULTS signal

#ifndef CLEAR_FAULTS_GLOBAL_CMD_FALSE
#define CLEAR_FAULTS_GLOBAL_CMD_FALSE (0)
#endif

#ifndef CLEAR_FAULTS_GLOBAL_CMD_TRUE
#define CLEAR_FAULTS_GLOBAL_CMD_TRUE (1)
#endif


// Value tables for @SANITY_CHECK_REQUIRED signal

#ifndef SANITY_CHECK_REQUIRED_GLOBAL_CMD_NOT_REQUIRED
#define SANITY_CHECK_REQUIRED_GLOBAL_CMD_NOT_REQUIRED (0)
#endif

#ifndef SANITY_CHECK_REQUIRED_GLOBAL_CMD_REQUIRED
#define SANITY_CHECK_REQUIRED_GLOBAL_CMD_REQUIRED (1)
#endif


// Value tables for @CLEAR_OVERRIDES signal

#ifndef CLEAR_OVERRIDES_GLOBAL_CMD_FALSE
#define CLEAR_OVERRIDES_GLOBAL_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDES_GLOBAL_CMD_TRUE
#define CLEAR_OVERRIDES_GLOBAL_CMD_TRUE (1)
#endif


// Value tables for @DEVELOPMENT_MODE_REQUEST signal

#ifndef DEVELOPMENT_MODE_REQUEST_GLOBAL_CMD_FALSE
#define DEVELOPMENT_MODE_REQUEST_GLOBAL_CMD_FALSE (0)
#endif

#ifndef DEVELOPMENT_MODE_REQUEST_GLOBAL_CMD_TRUE
#define DEVELOPMENT_MODE_REQUEST_GLOBAL_CMD_TRUE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_FAULTS : 1;                  //      Bits= 1

  // When this value is REQUIRED, the COUNTER and COMPLEMENT values must be set to enable the PACMod System.
  //  0 : "NOT_REQUIRED"
  //  1 : "REQUIRED"
  uint8_t SANITY_CHECK_REQUIRED : 1;         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDES : 1;               //      Bits= 1

  // PACMod enables/disables features for development when this value is TRUE and conditions are suitable. Warning, this could include disabling safety features. It is not suitable for general use. *Exact function varies across vehicles - See platform guide.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DEVELOPMENT_MODE_REQUEST : 1;      //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER : 4;                       //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT : 4;                    //      Bits= 4

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_FAULTS;                      //      Bits= 1

  // When this value is REQUIRED, the COUNTER and COMPLEMENT values must be set to enable the PACMod System.
  //  0 : "NOT_REQUIRED"
  //  1 : "REQUIRED"
  uint8_t SANITY_CHECK_REQUIRED;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDES;                   //      Bits= 1

  // PACMod enables/disables features for development when this value is TRUE and conditions are suitable. Warning, this could include disabling safety features. It is not suitable for general use. *Exact function varies across vehicles - See platform guide.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DEVELOPMENT_MODE_REQUEST;          //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                           //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT;                        //      Bits= 4

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} GLOBAL_CMD_t;

// def @SUPERVISORY_CTRL CAN Message (129  0x81)
#define SUPERVISORY_CTRL_IDE (0U)
#define SUPERVISORY_CTRL_DLC (2U)
#define SUPERVISORY_CTRL_CANID (0x81)

// Value tables for @ENABLE signal

#ifndef ENABLE_SUPERVISORY_CTRL_DISABLE_ALL_SYSTEMS
#define ENABLE_SUPERVISORY_CTRL_DISABLE_ALL_SYSTEMS (0)
#endif

#ifndef ENABLE_SUPERVISORY_CTRL_ALLOW_ENABLE
#define ENABLE_SUPERVISORY_CTRL_ALLOW_ENABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // A system shall enable only if the supervisory enablement rules are met.  See user_can_protocol.md.
  //  0 : "DISABLE_ALL_SYSTEMS"
  //  1 : "ALLOW_ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER : 4;                       //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT : 4;                    //      Bits= 4

#else

  // A system shall enable only if the supervisory enablement rules are met.  See user_can_protocol.md.
  //  0 : "DISABLE_ALL_SYSTEMS"
  //  1 : "ALLOW_ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  // Counter shall have the value of 0 with the first message transmission.  It shall increase by 1 with each subsequent message transmission up to and including the value of 0xF.  The next message transmission shall be 0, and this pattern shall repeat.
  uint8_t COUNTER;                           //      Bits= 4

  // The COMPLEMENT shall be the complement of the COUNTER.  For example, if COUNTER is 0x1011, then the COMPLEMENT is 0x0100.
  uint8_t COMPLEMENT;                        //      Bits= 4

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SUPERVISORY_CTRL_t;

// def @SAFETY_FUNC_CMD CAN Message (192  0xc0)
#define SAFETY_FUNC_CMD_IDE (0U)
#define SAFETY_FUNC_CMD_DLC (1U)
#define SAFETY_FUNC_CMD_CANID (0xc0)

// Value tables for @COMMAND signal

#ifndef COMMAND_SAFETY_FUNC_CMD_NONE
#define COMMAND_SAFETY_FUNC_CMD_NONE (0)
#endif

#ifndef COMMAND_SAFETY_FUNC_CMD_AUTOMS_READY
#define COMMAND_SAFETY_FUNC_CMD_AUTOMS_READY (1)
#endif

#ifndef COMMAND_SAFETY_FUNC_CMD_AUTOMS
#define COMMAND_SAFETY_FUNC_CMD_AUTOMS (2)
#endif

#ifndef COMMAND_SAFETY_FUNC_CMD_MANUAL_READY
#define COMMAND_SAFETY_FUNC_CMD_MANUAL_READY (3)
#endif

#ifndef COMMAND_SAFETY_FUNC_CMD_CRITICAL_STOP1
#define COMMAND_SAFETY_FUNC_CMD_CRITICAL_STOP1 (4)
#endif

#ifndef COMMAND_SAFETY_FUNC_CMD_CRITICAL_STOP2
#define COMMAND_SAFETY_FUNC_CMD_CRITICAL_STOP2 (5)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NONE"
  //  1 : "AUTOMS_READY"
  //  2 : "AUTOMS"
  //  3 : "MANUAL_READY"
  //  4 : "CRITICAL_STOP1"
  //  5 : "CRITICAL_STOP2"
  uint8_t COMMAND : 4;                       //      Bits= 4

#else

  //  0 : "NONE"
  //  1 : "AUTOMS_READY"
  //  2 : "AUTOMS"
  //  3 : "MANUAL_READY"
  //  4 : "CRITICAL_STOP1"
  //  5 : "CRITICAL_STOP2"
  uint8_t COMMAND;                           //      Bits= 4

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SAFETY_FUNC_CMD_t;

// def @SAFETY_BRAKE_CMD CAN Message (193  0xc1)
#define SAFETY_BRAKE_CMD_IDE (0U)
#define SAFETY_BRAKE_CMD_DLC (1U)
#define SAFETY_BRAKE_CMD_CANID (0xc1)

// Value tables for @SAFETY_BRAKE_CMD signal

#ifndef SAFETY_BRAKE_CMD_SAFETY_BRAKE_CMD_APPLY_BRAKE
#define SAFETY_BRAKE_CMD_SAFETY_BRAKE_CMD_APPLY_BRAKE (0)
#endif

#ifndef SAFETY_BRAKE_CMD_SAFETY_BRAKE_CMD_RELEASE_BRAKE
#define SAFETY_BRAKE_CMD_SAFETY_BRAKE_CMD_RELEASE_BRAKE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "APPLY_BRAKE"
  //  1 : "RELEASE_BRAKE"
  uint8_t SAFETY_BRAKE_CMD : 1;              //      Bits= 1

#else

  //  0 : "APPLY_BRAKE"
  //  1 : "RELEASE_BRAKE"
  uint8_t SAFETY_BRAKE_CMD;                  //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SAFETY_BRAKE_CMD_t;

// def @ACCEL_CMD CAN Message (256  0x100)
#define ACCEL_CMD_IDE (0U)
#define ACCEL_CMD_DLC (3U)
#define ACCEL_CMD_CANID (0x100)

// Value tables for @ENABLE signal

#ifndef ENABLE_ACCEL_CMD_DISABLE
#define ENABLE_ACCEL_CMD_DISABLE (0)
#endif

#ifndef ENABLE_ACCEL_CMD_ENABLE
#define ENABLE_ACCEL_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_ACCEL_CMD_FALSE
#define IGNORE_OVERRIDES_ACCEL_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_ACCEL_CMD_TRUE
#define IGNORE_OVERRIDES_ACCEL_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_ACCEL_CMD_FALSE
#define CLEAR_OVERRIDE_ACCEL_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_ACCEL_CMD_TRUE
#define CLEAR_OVERRIDE_ACCEL_CMD_TRUE (1)
#endif

// signal: @ACCEL_CMD_ro
#define PACMOD13_ACCEL_CMD_ro_CovFactor (0.001)
#define PACMOD13_ACCEL_CMD_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_ACCEL_CMD_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  uint16_t ACCEL_CMD_ro;                     //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ACCEL_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  uint16_t ACCEL_CMD_ro;                     //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ACCEL_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ACCEL_CMD_t;

// def @BRAKE_CMD CAN Message (260  0x104)
#define BRAKE_CMD_IDE (0U)
#define BRAKE_CMD_DLC (3U)
#define BRAKE_CMD_CANID (0x104)

// Value tables for @ENABLE signal

#ifndef ENABLE_BRAKE_CMD_DISABLE
#define ENABLE_BRAKE_CMD_DISABLE (0)
#endif

#ifndef ENABLE_BRAKE_CMD_ENABLE
#define ENABLE_BRAKE_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_BRAKE_CMD_FALSE
#define IGNORE_OVERRIDES_BRAKE_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_BRAKE_CMD_TRUE
#define IGNORE_OVERRIDES_BRAKE_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_BRAKE_CMD_FALSE
#define CLEAR_OVERRIDE_BRAKE_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_BRAKE_CMD_TRUE
#define CLEAR_OVERRIDE_BRAKE_CMD_TRUE (1)
#endif

// signal: @BRAKE_CMD_ro
#define PACMOD13_BRAKE_CMD_ro_CovFactor (0.001)
#define PACMOD13_BRAKE_CMD_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_BRAKE_CMD_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  uint16_t BRAKE_CMD_ro;                     //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  uint16_t BRAKE_CMD_ro;                     //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_CMD_t;

// def @CRUISE_CONTROL_BUTTONS_CMD CAN Message (264  0x108)
#define CRUISE_CONTROL_BUTTONS_CMD_IDE (0U)
#define CRUISE_CONTROL_BUTTONS_CMD_DLC (2U)
#define CRUISE_CONTROL_BUTTONS_CMD_CANID (0x108)
#define CRUISE_CONTROL_BUTTONS_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_CRUISE_CONTROL_BUTTONS_CMD_DISABLE
#define ENABLE_CRUISE_CONTROL_BUTTONS_CMD_DISABLE (0)
#endif

#ifndef ENABLE_CRUISE_CONTROL_BUTTONS_CMD_ENABLE
#define ENABLE_CRUISE_CONTROL_BUTTONS_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_CRUISE_CONTROL_BUTTONS_CMD_FALSE
#define IGNORE_OVERRIDES_CRUISE_CONTROL_BUTTONS_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_CRUISE_CONTROL_BUTTONS_CMD_TRUE
#define IGNORE_OVERRIDES_CRUISE_CONTROL_BUTTONS_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_CRUISE_CONTROL_BUTTONS_CMD_FALSE
#define CLEAR_OVERRIDE_CRUISE_CONTROL_BUTTONS_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_CRUISE_CONTROL_BUTTONS_CMD_TRUE
#define CLEAR_OVERRIDE_CRUISE_CONTROL_BUTTONS_CMD_TRUE (1)
#endif


// Value tables for @CRUISE_CONTROL_BUTTON signal

#ifndef CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_LIM
#define CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_LIM (7)
#endif

#ifndef CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_ON_OFF
#define CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_ON_OFF (6)
#endif

#ifndef CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_RES_INC
#define CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_RES_INC (5)
#endif

#ifndef CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_SET_DEC
#define CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_SET_DEC (4)
#endif

#ifndef CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_ACC_CLOSER
#define CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_ACC_CLOSER (3)
#endif

#ifndef CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_ACC_FURTHER
#define CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_ACC_FURTHER (2)
#endif

#ifndef CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_CNCL
#define CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_CNCL (1)
#endif

#ifndef CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_NONE
#define CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_BUTTONS_CMD_CRUISE_CONTROL_NONE (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  // NONE = no button pressed, CNCL = Cancel, FURTHER* or CLOSER* = Change follow distance, SET_DEC* = set/decrement, RES_INC* = resume/increment, ON_OFF = Cruise On/Off, LIM* = Speed limiter On/Off. *Exact function varies across vehicles - See platform guide.
  //  7 : "CRUISE_CONTROL_LIM"
  //  6 : "CRUISE_CONTROL_ON_OFF"
  //  5 : "CRUISE_CONTROL_RES_INC"
  //  4 : "CRUISE_CONTROL_SET_DEC"
  //  3 : "CRUISE_CONTROL_ACC_CLOSER"
  //  2 : "CRUISE_CONTROL_ACC_FURTHER"
  //  1 : "CRUISE_CONTROL_CNCL"
  //  0 : "CRUISE_CONTROL_NONE"
  uint8_t CRUISE_CONTROL_BUTTON;             //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  // NONE = no button pressed, CNCL = Cancel, FURTHER* or CLOSER* = Change follow distance, SET_DEC* = set/decrement, RES_INC* = resume/increment, ON_OFF = Cruise On/Off, LIM* = Speed limiter On/Off. *Exact function varies across vehicles - See platform guide.
  //  7 : "CRUISE_CONTROL_LIM"
  //  6 : "CRUISE_CONTROL_ON_OFF"
  //  5 : "CRUISE_CONTROL_RES_INC"
  //  4 : "CRUISE_CONTROL_SET_DEC"
  //  3 : "CRUISE_CONTROL_ACC_CLOSER"
  //  2 : "CRUISE_CONTROL_ACC_FURTHER"
  //  1 : "CRUISE_CONTROL_CNCL"
  //  0 : "CRUISE_CONTROL_NONE"
  uint8_t CRUISE_CONTROL_BUTTON;             //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} CRUISE_CONTROL_BUTTONS_CMD_t;

// def @DASH_CONTROLS_LEFT_CMD CAN Message (268  0x10c)
#define DASH_CONTROLS_LEFT_CMD_IDE (0U)
#define DASH_CONTROLS_LEFT_CMD_DLC (2U)
#define DASH_CONTROLS_LEFT_CMD_CANID (0x10c)
#define DASH_CONTROLS_LEFT_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_DASH_CONTROLS_LEFT_CMD_DISABLE
#define ENABLE_DASH_CONTROLS_LEFT_CMD_DISABLE (0)
#endif

#ifndef ENABLE_DASH_CONTROLS_LEFT_CMD_ENABLE
#define ENABLE_DASH_CONTROLS_LEFT_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_DASH_CONTROLS_LEFT_CMD_FALSE
#define IGNORE_OVERRIDES_DASH_CONTROLS_LEFT_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_DASH_CONTROLS_LEFT_CMD_TRUE
#define IGNORE_OVERRIDES_DASH_CONTROLS_LEFT_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_DASH_CONTROLS_LEFT_CMD_FALSE
#define CLEAR_OVERRIDE_DASH_CONTROLS_LEFT_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_DASH_CONTROLS_LEFT_CMD_TRUE
#define CLEAR_OVERRIDE_DASH_CONTROLS_LEFT_CMD_TRUE (1)
#endif


// Value tables for @DASH_CONTROLS_BUTTON signal

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_DOWN
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_DOWN (5)
#endif

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_UP
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_UP (4)
#endif

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_RIGHT
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_RIGHT (3)
#endif

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_LEFT
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_LEFT (2)
#endif

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_OK
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_OK (1)
#endif

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_NONE
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_LEFT_CMD_DASH_CONTROL_NONE (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t DASH_CONTROLS_BUTTON;              //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t DASH_CONTROLS_BUTTON;              //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} DASH_CONTROLS_LEFT_CMD_t;

// def @DASH_CONTROLS_RIGHT_CMD CAN Message (272  0x110)
#define DASH_CONTROLS_RIGHT_CMD_IDE (0U)
#define DASH_CONTROLS_RIGHT_CMD_DLC (2U)
#define DASH_CONTROLS_RIGHT_CMD_CANID (0x110)
#define DASH_CONTROLS_RIGHT_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_DASH_CONTROLS_RIGHT_CMD_DISABLE
#define ENABLE_DASH_CONTROLS_RIGHT_CMD_DISABLE (0)
#endif

#ifndef ENABLE_DASH_CONTROLS_RIGHT_CMD_ENABLE
#define ENABLE_DASH_CONTROLS_RIGHT_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_DASH_CONTROLS_RIGHT_CMD_FALSE
#define IGNORE_OVERRIDES_DASH_CONTROLS_RIGHT_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_DASH_CONTROLS_RIGHT_CMD_TRUE
#define IGNORE_OVERRIDES_DASH_CONTROLS_RIGHT_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_DASH_CONTROLS_RIGHT_CMD_FALSE
#define CLEAR_OVERRIDE_DASH_CONTROLS_RIGHT_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_DASH_CONTROLS_RIGHT_CMD_TRUE
#define CLEAR_OVERRIDE_DASH_CONTROLS_RIGHT_CMD_TRUE (1)
#endif


// Value tables for @DASH_CONTROLS_BUTTON signal

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_DOWN
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_DOWN (5)
#endif

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_UP
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_UP (4)
#endif

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_RIGHT
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_RIGHT (3)
#endif

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_LEFT
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_LEFT (2)
#endif

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_OK
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_OK (1)
#endif

#ifndef DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_NONE
#define DASH_CONTROLS_BUTTON_DASH_CONTROLS_RIGHT_CMD_DASH_CONTROL_NONE (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t DASH_CONTROLS_BUTTON;              //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t DASH_CONTROLS_BUTTON;              //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} DASH_CONTROLS_RIGHT_CMD_t;

// def @HAZARD_LIGHTS_CMD CAN Message (276  0x114)
#define HAZARD_LIGHTS_CMD_IDE (0U)
#define HAZARD_LIGHTS_CMD_DLC (2U)
#define HAZARD_LIGHTS_CMD_CANID (0x114)
#define HAZARD_LIGHTS_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_HAZARD_LIGHTS_CMD_DISABLE
#define ENABLE_HAZARD_LIGHTS_CMD_DISABLE (0)
#endif

#ifndef ENABLE_HAZARD_LIGHTS_CMD_ENABLE
#define ENABLE_HAZARD_LIGHTS_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_HAZARD_LIGHTS_CMD_FALSE
#define IGNORE_OVERRIDES_HAZARD_LIGHTS_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_HAZARD_LIGHTS_CMD_TRUE
#define IGNORE_OVERRIDES_HAZARD_LIGHTS_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_HAZARD_LIGHTS_CMD_FALSE
#define CLEAR_OVERRIDE_HAZARD_LIGHTS_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_HAZARD_LIGHTS_CMD_TRUE
#define CLEAR_OVERRIDE_HAZARD_LIGHTS_CMD_TRUE (1)
#endif


// Value tables for @HAZARD_LIGHTS_CMD signal

#ifndef HAZARD_LIGHTS_CMD_HAZARD_LIGHTS_CMD_OFF
#define HAZARD_LIGHTS_CMD_HAZARD_LIGHTS_CMD_OFF (0)
#endif

#ifndef HAZARD_LIGHTS_CMD_HAZARD_LIGHTS_CMD_ON
#define HAZARD_LIGHTS_CMD_HAZARD_LIGHTS_CMD_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t HAZARD_LIGHTS_CMD : 1;             //      Bits= 1

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t HAZARD_LIGHTS_CMD;                 //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} HAZARD_LIGHTS_CMD_t;

// def @HEADLIGHT_CMD CAN Message (280  0x118)
#define HEADLIGHT_CMD_IDE (0U)
#define HEADLIGHT_CMD_DLC (2U)
#define HEADLIGHT_CMD_CANID (0x118)
#define HEADLIGHT_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_HEADLIGHT_CMD_DISABLE
#define ENABLE_HEADLIGHT_CMD_DISABLE (0)
#endif

#ifndef ENABLE_HEADLIGHT_CMD_ENABLE
#define ENABLE_HEADLIGHT_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_HEADLIGHT_CMD_FALSE
#define IGNORE_OVERRIDES_HEADLIGHT_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_HEADLIGHT_CMD_TRUE
#define IGNORE_OVERRIDES_HEADLIGHT_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_HEADLIGHT_CMD_FALSE
#define CLEAR_OVERRIDE_HEADLIGHT_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_HEADLIGHT_CMD_TRUE
#define CLEAR_OVERRIDE_HEADLIGHT_CMD_TRUE (1)
#endif


// Value tables for @HEADLIGHT_CMD signal

#ifndef HEADLIGHT_CMD_HEADLIGHT_CMD_HIGH_BEAMS
#define HEADLIGHT_CMD_HEADLIGHT_CMD_HIGH_BEAMS (2)
#endif

#ifndef HEADLIGHT_CMD_HEADLIGHT_CMD_LOW_BEAMS
#define HEADLIGHT_CMD_HEADLIGHT_CMD_LOW_BEAMS (1)
#endif

#ifndef HEADLIGHT_CMD_HEADLIGHT_CMD_HEADLIGHTS_OFF
#define HEADLIGHT_CMD_HEADLIGHT_CMD_HEADLIGHTS_OFF (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  2 : "HIGH_BEAMS"
  //  1 : "LOW_BEAMS"
  //  0 : "HEADLIGHTS_OFF"
  uint8_t HEADLIGHT_CMD;                     //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  2 : "HIGH_BEAMS"
  //  1 : "LOW_BEAMS"
  //  0 : "HEADLIGHTS_OFF"
  uint8_t HEADLIGHT_CMD;                     //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} HEADLIGHT_CMD_t;

// def @HORN_CMD CAN Message (284  0x11c)
#define HORN_CMD_IDE (0U)
#define HORN_CMD_DLC (2U)
#define HORN_CMD_CANID (0x11c)
#define HORN_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_HORN_CMD_DISABLE
#define ENABLE_HORN_CMD_DISABLE (0)
#endif

#ifndef ENABLE_HORN_CMD_ENABLE
#define ENABLE_HORN_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_HORN_CMD_FALSE
#define IGNORE_OVERRIDES_HORN_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_HORN_CMD_TRUE
#define IGNORE_OVERRIDES_HORN_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_HORN_CMD_FALSE
#define CLEAR_OVERRIDE_HORN_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_HORN_CMD_TRUE
#define CLEAR_OVERRIDE_HORN_CMD_TRUE (1)
#endif


// Value tables for @HORN_CMD signal

#ifndef HORN_CMD_HORN_CMD_OFF
#define HORN_CMD_HORN_CMD_OFF (0)
#endif

#ifndef HORN_CMD_HORN_CMD_ON
#define HORN_CMD_HORN_CMD_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t HORN_CMD : 1;                      //      Bits= 1

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t HORN_CMD;                          //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} HORN_CMD_t;

// def @MEDIA_CONTROLS_CMD CAN Message (288  0x120)
#define MEDIA_CONTROLS_CMD_IDE (0U)
#define MEDIA_CONTROLS_CMD_DLC (2U)
#define MEDIA_CONTROLS_CMD_CANID (0x120)
#define MEDIA_CONTROLS_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_MEDIA_CONTROLS_CMD_DISABLE
#define ENABLE_MEDIA_CONTROLS_CMD_DISABLE (0)
#endif

#ifndef ENABLE_MEDIA_CONTROLS_CMD_ENABLE
#define ENABLE_MEDIA_CONTROLS_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_MEDIA_CONTROLS_CMD_FALSE
#define IGNORE_OVERRIDES_MEDIA_CONTROLS_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_MEDIA_CONTROLS_CMD_TRUE
#define IGNORE_OVERRIDES_MEDIA_CONTROLS_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_MEDIA_CONTROLS_CMD_FALSE
#define CLEAR_OVERRIDE_MEDIA_CONTROLS_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_MEDIA_CONTROLS_CMD_TRUE
#define CLEAR_OVERRIDE_MEDIA_CONTROLS_CMD_TRUE (1)
#endif


// Value tables for @MEDIA_CONTROLS_CMD signal

#ifndef MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_DOWN
#define MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_DOWN (6)
#endif

#ifndef MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP
#define MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP (5)
#endif

#ifndef MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NEXT_TRACK_HANG_UP
#define MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NEXT_TRACK_HANG_UP (4)
#endif

#ifndef MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_PREV_TRACK_ANSWER
#define MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_PREV_TRACK_ANSWER (3)
#endif

#ifndef MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE
#define MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE (2)
#endif

#ifndef MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND
#define MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND (1)
#endif

#ifndef MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NONE
#define MEDIA_CONTROLS_CMD_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NONE (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  6 : "MEDIA_CONTROL_VOL_DOWN"
  //  5 : "MEDIA_CONTROL_VOL_UP"
  //  4 : "MEDIA_CONTROL_NEXT_TRACK_HANG_UP"
  //  3 : "MEDIA_CONTROL_PREV_TRACK_ANSWER"
  //  2 : "MEDIA_CONTROL_MUTE"
  //  1 : "MEDIA_CONTROL_VOICE_COMMAND"
  //  0 : "MEDIA_CONTROL_NONE"
  uint8_t MEDIA_CONTROLS_CMD;                //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  6 : "MEDIA_CONTROL_VOL_DOWN"
  //  5 : "MEDIA_CONTROL_VOL_UP"
  //  4 : "MEDIA_CONTROL_NEXT_TRACK_HANG_UP"
  //  3 : "MEDIA_CONTROL_PREV_TRACK_ANSWER"
  //  2 : "MEDIA_CONTROL_MUTE"
  //  1 : "MEDIA_CONTROL_VOICE_COMMAND"
  //  0 : "MEDIA_CONTROL_NONE"
  uint8_t MEDIA_CONTROLS_CMD;                //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} MEDIA_CONTROLS_CMD_t;

// def @PARKING_BRAKE_CMD CAN Message (292  0x124)
#define PARKING_BRAKE_CMD_IDE (0U)
#define PARKING_BRAKE_CMD_DLC (2U)
#define PARKING_BRAKE_CMD_CANID (0x124)
#define PARKING_BRAKE_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_PARKING_BRAKE_CMD_DISABLE
#define ENABLE_PARKING_BRAKE_CMD_DISABLE (0)
#endif

#ifndef ENABLE_PARKING_BRAKE_CMD_ENABLE
#define ENABLE_PARKING_BRAKE_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_PARKING_BRAKE_CMD_FALSE
#define IGNORE_OVERRIDES_PARKING_BRAKE_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_PARKING_BRAKE_CMD_TRUE
#define IGNORE_OVERRIDES_PARKING_BRAKE_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_PARKING_BRAKE_CMD_FALSE
#define CLEAR_OVERRIDE_PARKING_BRAKE_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_PARKING_BRAKE_CMD_TRUE
#define CLEAR_OVERRIDE_PARKING_BRAKE_CMD_TRUE (1)
#endif


// Value tables for @PARKING_BRAKE_CMD signal

#ifndef PARKING_BRAKE_CMD_PARKING_BRAKE_CMD_OFF
#define PARKING_BRAKE_CMD_PARKING_BRAKE_CMD_OFF (0)
#endif

#ifndef PARKING_BRAKE_CMD_PARKING_BRAKE_CMD_ON
#define PARKING_BRAKE_CMD_PARKING_BRAKE_CMD_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t PARKING_BRAKE_CMD : 1;             //      Bits= 1

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t PARKING_BRAKE_CMD;                 //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} PARKING_BRAKE_CMD_t;

// def @SHIFT_CMD CAN Message (296  0x128)
#define SHIFT_CMD_IDE (0U)
#define SHIFT_CMD_DLC (2U)
#define SHIFT_CMD_CANID (0x128)

// Value tables for @ENABLE signal

#ifndef ENABLE_SHIFT_CMD_DISABLE
#define ENABLE_SHIFT_CMD_DISABLE (0)
#endif

#ifndef ENABLE_SHIFT_CMD_ENABLE
#define ENABLE_SHIFT_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_SHIFT_CMD_FALSE
#define IGNORE_OVERRIDES_SHIFT_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_SHIFT_CMD_TRUE
#define IGNORE_OVERRIDES_SHIFT_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_SHIFT_CMD_FALSE
#define CLEAR_OVERRIDE_SHIFT_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_SHIFT_CMD_TRUE
#define CLEAR_OVERRIDE_SHIFT_CMD_TRUE (1)
#endif


// Value tables for @SHIFT_CMD signal

#ifndef SHIFT_CMD_SHIFT_CMD_PARK
#define SHIFT_CMD_SHIFT_CMD_PARK (0)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_REVERSE
#define SHIFT_CMD_SHIFT_CMD_REVERSE (1)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_NEUTRAL
#define SHIFT_CMD_SHIFT_CMD_NEUTRAL (2)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_FORWARDHIGH
#define SHIFT_CMD_SHIFT_CMD_FORWARDHIGH (3)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_LOW
#define SHIFT_CMD_SHIFT_CMD_LOW (4)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_NONE
#define SHIFT_CMD_SHIFT_CMD_NONE (7)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_REV_THIRD
#define SHIFT_CMD_SHIFT_CMD_REV_THIRD (124)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_REV_SECOND
#define SHIFT_CMD_SHIFT_CMD_REV_SECOND (125)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_REV_FIRST
#define SHIFT_CMD_SHIFT_CMD_REV_FIRST (126)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_RESERVED
#define SHIFT_CMD_SHIFT_CMD_RESERVED (127)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_FIRST
#define SHIFT_CMD_SHIFT_CMD_FIRST (128)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_SECOND
#define SHIFT_CMD_SHIFT_CMD_SECOND (129)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_THIRD
#define SHIFT_CMD_SHIFT_CMD_THIRD (130)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_FOURTH
#define SHIFT_CMD_SHIFT_CMD_FOURTH (131)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_FIFTH
#define SHIFT_CMD_SHIFT_CMD_FIFTH (132)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_SIXTH
#define SHIFT_CMD_SHIFT_CMD_SIXTH (133)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_SEVENTH
#define SHIFT_CMD_SHIFT_CMD_SEVENTH (134)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_EIGHTH
#define SHIFT_CMD_SHIFT_CMD_EIGHTH (135)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_NINTH
#define SHIFT_CMD_SHIFT_CMD_NINTH (136)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_TENTH
#define SHIFT_CMD_SHIFT_CMD_TENTH (137)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_ELEVENTH
#define SHIFT_CMD_SHIFT_CMD_ELEVENTH (138)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_TWELFTH
#define SHIFT_CMD_SHIFT_CMD_TWELFTH (139)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_THIRTEENTH
#define SHIFT_CMD_SHIFT_CMD_THIRTEENTH (140)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_FOURTEENTH
#define SHIFT_CMD_SHIFT_CMD_FOURTEENTH (141)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_FIFTEENTH
#define SHIFT_CMD_SHIFT_CMD_FIFTEENTH (142)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_SIXTEENTH
#define SHIFT_CMD_SHIFT_CMD_SIXTEENTH (143)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_SEVENTEENTH
#define SHIFT_CMD_SHIFT_CMD_SEVENTEENTH (144)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_EIGHTEENTH
#define SHIFT_CMD_SHIFT_CMD_EIGHTEENTH (145)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_NINETEENTH
#define SHIFT_CMD_SHIFT_CMD_NINETEENTH (146)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_TWENTIETH
#define SHIFT_CMD_SHIFT_CMD_TWENTIETH (147)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_TWENTYFIRST
#define SHIFT_CMD_SHIFT_CMD_TWENTYFIRST (148)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_TWENTYSECOND
#define SHIFT_CMD_SHIFT_CMD_TWENTYSECOND (149)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_TWENTYTHIRD
#define SHIFT_CMD_SHIFT_CMD_TWENTYTHIRD (150)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_TWENTYFOURTH
#define SHIFT_CMD_SHIFT_CMD_TWENTYFOURTH (151)
#endif

#ifndef SHIFT_CMD_SHIFT_CMD_TWENTYFIFTH
#define SHIFT_CMD_SHIFT_CMD_TWENTYFIFTH (152)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  // FORWARD is also HIGH on vehicles with LOW/HIGH, PARK and LOW only available on certain Vehicles.
  //  0 : "PARK"
  //  1 : "REVERSE"
  //  2 : "NEUTRAL"
  //  3 : "FORWARD/HIGH"
  //  4 : "LOW"
  //  7 : "NONE"
  //  124 : "REV_THIRD"
  //  125 : "REV_SECOND"
  //  126 : "REV_FIRST"
  //  127 : "RESERVED"
  //  128 : "FIRST"
  //  129 : "SECOND"
  //  130 : "THIRD"
  //  131 : "FOURTH"
  //  132 : "FIFTH"
  //  133 : "SIXTH"
  //  134 : "SEVENTH"
  //  135 : "EIGHTH"
  //  136 : "NINTH"
  //  137 : "TENTH"
  //  138 : "ELEVENTH"
  //  139 : "TWELFTH"
  //  140 : "THIRTEENTH"
  //  141 : "FOURTEENTH"
  //  142 : "FIFTEENTH"
  //  143 : "SIXTEENTH"
  //  144 : "SEVENTEENTH"
  //  145 : "EIGHTEENTH"
  //  146 : "NINETEENTH"
  //  147 : "TWENTIETH"
  //  148 : "TWENTY-FIRST"
  //  149 : "TWENTY-SECOND"
  //  150 : "TWENTY-THIRD"
  //  151 : "TWENTY-FOURTH"
  //  152 : "TWENTY-FIFTH"
  uint8_t SHIFT_CMD;                         //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  // FORWARD is also HIGH on vehicles with LOW/HIGH, PARK and LOW only available on certain Vehicles.
  //  0 : "PARK"
  //  1 : "REVERSE"
  //  2 : "NEUTRAL"
  //  3 : "FORWARD/HIGH"
  //  4 : "LOW"
  //  7 : "NONE"
  //  124 : "REV_THIRD"
  //  125 : "REV_SECOND"
  //  126 : "REV_FIRST"
  //  127 : "RESERVED"
  //  128 : "FIRST"
  //  129 : "SECOND"
  //  130 : "THIRD"
  //  131 : "FOURTH"
  //  132 : "FIFTH"
  //  133 : "SIXTH"
  //  134 : "SEVENTH"
  //  135 : "EIGHTH"
  //  136 : "NINTH"
  //  137 : "TENTH"
  //  138 : "ELEVENTH"
  //  139 : "TWELFTH"
  //  140 : "THIRTEENTH"
  //  141 : "FOURTEENTH"
  //  142 : "FIFTEENTH"
  //  143 : "SIXTEENTH"
  //  144 : "SEVENTEENTH"
  //  145 : "EIGHTEENTH"
  //  146 : "NINETEENTH"
  //  147 : "TWENTIETH"
  //  148 : "TWENTY-FIRST"
  //  149 : "TWENTY-SECOND"
  //  150 : "TWENTY-THIRD"
  //  151 : "TWENTY-FOURTH"
  //  152 : "TWENTY-FIFTH"
  uint8_t SHIFT_CMD;                         //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SHIFT_CMD_t;

// def @STEERING_CMD CAN Message (300  0x12c)
#define STEERING_CMD_IDE (0U)
#define STEERING_CMD_DLC (5U)
#define STEERING_CMD_CANID (0x12c)

// Value tables for @ENABLE signal

#ifndef ENABLE_STEERING_CMD_DISABLE
#define ENABLE_STEERING_CMD_DISABLE (0)
#endif

#ifndef ENABLE_STEERING_CMD_ENABLE
#define ENABLE_STEERING_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_STEERING_CMD_FALSE
#define IGNORE_OVERRIDES_STEERING_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_STEERING_CMD_TRUE
#define IGNORE_OVERRIDES_STEERING_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_STEERING_CMD_FALSE
#define CLEAR_OVERRIDE_STEERING_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_STEERING_CMD_TRUE
#define CLEAR_OVERRIDE_STEERING_CMD_TRUE (1)
#endif

// signal: @POSITION_ro
#define PACMOD13_POSITION_ro_CovFactor (0.001)
#define PACMOD13_POSITION_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_POSITION_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @ROTATION_RATE_ro
#define PACMOD13_ROTATION_RATE_ro_CovFactor (0.001)
#define PACMOD13_ROTATION_RATE_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_ROTATION_RATE_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  int16_t POSITION_ro;                       //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t POSITION_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t ROTATION_RATE_ro;                 //      Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROTATION_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  int16_t POSITION_ro;                       //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t POSITION_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t ROTATION_RATE_ro;                 //      Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROTATION_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} STEERING_CMD_t;

// def @TURN_CMD CAN Message (304  0x130)
#define TURN_CMD_IDE (0U)
#define TURN_CMD_DLC (2U)
#define TURN_CMD_CANID (0x130)
#define TURN_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_TURN_CMD_DISABLE
#define ENABLE_TURN_CMD_DISABLE (0)
#endif

#ifndef ENABLE_TURN_CMD_ENABLE
#define ENABLE_TURN_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_TURN_CMD_FALSE
#define IGNORE_OVERRIDES_TURN_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_TURN_CMD_TRUE
#define IGNORE_OVERRIDES_TURN_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_TURN_CMD_FALSE
#define CLEAR_OVERRIDE_TURN_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_TURN_CMD_TRUE
#define CLEAR_OVERRIDE_TURN_CMD_TRUE (1)
#endif


// Value tables for @TURN_SIGNAL_CMD signal

#ifndef TURN_SIGNAL_CMD_TURN_CMD_RIGHT
#define TURN_SIGNAL_CMD_TURN_CMD_RIGHT (0)
#endif

#ifndef TURN_SIGNAL_CMD_TURN_CMD_NONE
#define TURN_SIGNAL_CMD_TURN_CMD_NONE (1)
#endif

#ifndef TURN_SIGNAL_CMD_TURN_CMD_LEFT
#define TURN_SIGNAL_CMD_TURN_CMD_LEFT (2)
#endif

#ifndef TURN_SIGNAL_CMD_TURN_CMD_HAZARD
#define TURN_SIGNAL_CMD_TURN_CMD_HAZARD (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "RIGHT"
  //  1 : "NONE"
  //  2 : "LEFT"
  //  3 : "HAZARD"
  uint8_t TURN_SIGNAL_CMD;                   //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "RIGHT"
  //  1 : "NONE"
  //  2 : "LEFT"
  //  3 : "HAZARD"
  uint8_t TURN_SIGNAL_CMD;                   //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TURN_CMD_t;

// def @WIPER_CMD CAN Message (308  0x134)
#define WIPER_CMD_IDE (0U)
#define WIPER_CMD_DLC (2U)
#define WIPER_CMD_CANID (0x134)
#define WIPER_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_WIPER_CMD_DISABLE
#define ENABLE_WIPER_CMD_DISABLE (0)
#endif

#ifndef ENABLE_WIPER_CMD_ENABLE
#define ENABLE_WIPER_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_WIPER_CMD_FALSE
#define IGNORE_OVERRIDES_WIPER_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_WIPER_CMD_TRUE
#define IGNORE_OVERRIDES_WIPER_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_WIPER_CMD_FALSE
#define CLEAR_OVERRIDE_WIPER_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_WIPER_CMD_TRUE
#define CLEAR_OVERRIDE_WIPER_CMD_TRUE (1)
#endif


// Value tables for @WIPER_CMD signal

#ifndef WIPER_CMD_WIPER_CMD_HIGH
#define WIPER_CMD_WIPER_CMD_HIGH (255)
#endif

#ifndef WIPER_CMD_WIPER_CMD_MEDIUM
#define WIPER_CMD_WIPER_CMD_MEDIUM (254)
#endif

#ifndef WIPER_CMD_WIPER_CMD_LOW
#define WIPER_CMD_WIPER_CMD_LOW (253)
#endif

#ifndef WIPER_CMD_WIPER_CMD_INTERMITTENT_10
#define WIPER_CMD_WIPER_CMD_INTERMITTENT_10 (10)
#endif

#ifndef WIPER_CMD_WIPER_CMD_INTERMITTENT_9
#define WIPER_CMD_WIPER_CMD_INTERMITTENT_9 (9)
#endif

#ifndef WIPER_CMD_WIPER_CMD_INTERMITTENT_8
#define WIPER_CMD_WIPER_CMD_INTERMITTENT_8 (8)
#endif

#ifndef WIPER_CMD_WIPER_CMD_INTERMITTENT_7
#define WIPER_CMD_WIPER_CMD_INTERMITTENT_7 (7)
#endif

#ifndef WIPER_CMD_WIPER_CMD_INTERMITTENT_6
#define WIPER_CMD_WIPER_CMD_INTERMITTENT_6 (6)
#endif

#ifndef WIPER_CMD_WIPER_CMD_INTERMITTENT_5
#define WIPER_CMD_WIPER_CMD_INTERMITTENT_5 (5)
#endif

#ifndef WIPER_CMD_WIPER_CMD_INTERMITTENT_4
#define WIPER_CMD_WIPER_CMD_INTERMITTENT_4 (4)
#endif

#ifndef WIPER_CMD_WIPER_CMD_INTERMITTENT_3
#define WIPER_CMD_WIPER_CMD_INTERMITTENT_3 (3)
#endif

#ifndef WIPER_CMD_WIPER_CMD_INTERMITTENT_2
#define WIPER_CMD_WIPER_CMD_INTERMITTENT_2 (2)
#endif

#ifndef WIPER_CMD_WIPER_CMD_INTERMITTENT_1
#define WIPER_CMD_WIPER_CMD_INTERMITTENT_1 (1)
#endif

#ifndef WIPER_CMD_WIPER_CMD_WIPERS_OFF
#define WIPER_CMD_WIPER_CMD_WIPERS_OFF (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  255 : "HIGH"
  //  254 : "MEDIUM"
  //  253 : "LOW"
  //  10 : "INTERMITTENT_10"
  //  9 : "INTERMITTENT_9"
  //  8 : "INTERMITTENT_8"
  //  7 : "INTERMITTENT_7"
  //  6 : "INTERMITTENT_6"
  //  5 : "INTERMITTENT_5"
  //  4 : "INTERMITTENT_4"
  //  3 : "INTERMITTENT_3"
  //  2 : "INTERMITTENT_2"
  //  1 : "INTERMITTENT_1"
  //  0 : "WIPERS_OFF"
  uint8_t WIPER_CMD;                         //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  255 : "HIGH"
  //  254 : "MEDIUM"
  //  253 : "LOW"
  //  10 : "INTERMITTENT_10"
  //  9 : "INTERMITTENT_9"
  //  8 : "INTERMITTENT_8"
  //  7 : "INTERMITTENT_7"
  //  6 : "INTERMITTENT_6"
  //  5 : "INTERMITTENT_5"
  //  4 : "INTERMITTENT_4"
  //  3 : "INTERMITTENT_3"
  //  2 : "INTERMITTENT_2"
  //  1 : "INTERMITTENT_1"
  //  0 : "WIPERS_OFF"
  uint8_t WIPER_CMD;                         //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} WIPER_CMD_t;

// def @SPRAYER_CMD CAN Message (312  0x138)
#define SPRAYER_CMD_IDE (0U)
#define SPRAYER_CMD_DLC (2U)
#define SPRAYER_CMD_CANID (0x138)
#define SPRAYER_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_SPRAYER_CMD_DISABLE
#define ENABLE_SPRAYER_CMD_DISABLE (0)
#endif

#ifndef ENABLE_SPRAYER_CMD_ENABLE
#define ENABLE_SPRAYER_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_SPRAYER_CMD_FALSE
#define IGNORE_OVERRIDES_SPRAYER_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_SPRAYER_CMD_TRUE
#define IGNORE_OVERRIDES_SPRAYER_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_SPRAYER_CMD_FALSE
#define CLEAR_OVERRIDE_SPRAYER_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_SPRAYER_CMD_TRUE
#define CLEAR_OVERRIDE_SPRAYER_CMD_TRUE (1)
#endif


// Value tables for @SPRAYER_CMD signal

#ifndef SPRAYER_CMD_SPRAYER_CMD_NOT_SPRAYING
#define SPRAYER_CMD_SPRAYER_CMD_NOT_SPRAYING (0)
#endif

#ifndef SPRAYER_CMD_SPRAYER_CMD_SPRAYING
#define SPRAYER_CMD_SPRAYER_CMD_SPRAYING (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t SPRAYER_CMD : 1;                   //      Bits= 1

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t SPRAYER_CMD;                       //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SPRAYER_CMD_t;

// def @BRAKE_DECEL_CMD CAN Message (316  0x13c)
#define BRAKE_DECEL_CMD_IDE (0U)
#define BRAKE_DECEL_CMD_DLC (4U)
#define BRAKE_DECEL_CMD_CANID (0x13c)

// Value tables for @ENABLE signal

#ifndef ENABLE_BRAKE_DECEL_CMD_DISABLE
#define ENABLE_BRAKE_DECEL_CMD_DISABLE (0)
#endif

#ifndef ENABLE_BRAKE_DECEL_CMD_ENABLE
#define ENABLE_BRAKE_DECEL_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_BRAKE_DECEL_CMD_FALSE
#define IGNORE_OVERRIDES_BRAKE_DECEL_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_BRAKE_DECEL_CMD_TRUE
#define IGNORE_OVERRIDES_BRAKE_DECEL_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_BRAKE_DECEL_CMD_FALSE
#define CLEAR_OVERRIDE_BRAKE_DECEL_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_BRAKE_DECEL_CMD_TRUE
#define CLEAR_OVERRIDE_BRAKE_DECEL_CMD_TRUE (1)
#endif

// signal: @BRAKE_DECEL_CMD_ro
#define PACMOD13_BRAKE_DECEL_CMD_ro_CovFactor (0.001)
#define PACMOD13_BRAKE_DECEL_CMD_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_BRAKE_DECEL_CMD_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

// Value tables for @XBR_EBI_MODE signal

#ifndef XBR_EBI_MODE_BRAKE_DECEL_CMD_NO_ENDURANCE_BRK_INTGN_ALLOWED
#define XBR_EBI_MODE_BRAKE_DECEL_CMD_NO_ENDURANCE_BRK_INTGN_ALLOWED (0)
#endif

#ifndef XBR_EBI_MODE_BRAKE_DECEL_CMD_ONLY_ENDURANCE_BRAKES_ALLOWED
#define XBR_EBI_MODE_BRAKE_DECEL_CMD_ONLY_ENDURANCE_BRAKES_ALLOWED (1)
#endif

#ifndef XBR_EBI_MODE_BRAKE_DECEL_CMD_ENDURANCE_BRK_INTGRN_ALLOWED
#define XBR_EBI_MODE_BRAKE_DECEL_CMD_ENDURANCE_BRK_INTGRN_ALLOWED (2)
#endif


// Value tables for @XBR_PRIORITY signal

#ifndef XBR_PRIORITY_BRAKE_DECEL_CMD_HIGHEST_PRIORITY
#define XBR_PRIORITY_BRAKE_DECEL_CMD_HIGHEST_PRIORITY (0)
#endif

#ifndef XBR_PRIORITY_BRAKE_DECEL_CMD_HIGH_PRIORITY
#define XBR_PRIORITY_BRAKE_DECEL_CMD_HIGH_PRIORITY (1)
#endif

#ifndef XBR_PRIORITY_BRAKE_DECEL_CMD_MEDIUM_PRIORITY
#define XBR_PRIORITY_BRAKE_DECEL_CMD_MEDIUM_PRIORITY (2)
#endif

#ifndef XBR_PRIORITY_BRAKE_DECEL_CMD_LOW_PRIORITY
#define XBR_PRIORITY_BRAKE_DECEL_CMD_LOW_PRIORITY (3)
#endif


// Value tables for @XBR_CONTROL_MODE signal

#ifndef XBR_CONTROL_MODE_BRAKE_DECEL_CMD_OVERRIDE_DISABLE
#define XBR_CONTROL_MODE_BRAKE_DECEL_CMD_OVERRIDE_DISABLE (0)
#endif

#ifndef XBR_CONTROL_MODE_BRAKE_DECEL_CMD_ACCEL_CONTROL_WITH_ADDITION_MODE
#define XBR_CONTROL_MODE_BRAKE_DECEL_CMD_ACCEL_CONTROL_WITH_ADDITION_MODE (1)
#endif

#ifndef XBR_CONTROL_MODE_BRAKE_DECEL_CMD_ACCEL_CONTROL_WITH_MAXIMUM_MODE
#define XBR_CONTROL_MODE_BRAKE_DECEL_CMD_ACCEL_CONTROL_WITH_MAXIMUM_MODE (2)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  uint16_t BRAKE_DECEL_CMD_ro;               //      Bits=16 Factor= 0.001           Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_DECEL_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "NO_ENDURANCE_BRK_INTGN_ALLOWED"
  //  1 : "ONLY_ENDURANCE_BRAKES_ALLOWED"
  //  2 : "ENDURANCE_BRK_INTGRN_ALLOWED"
  uint8_t XBR_EBI_MODE : 2;                  //      Bits= 2

  //  0 : "HIGHEST_PRIORITY"
  //  1 : "HIGH_PRIORITY"
  //  2 : "MEDIUM_PRIORITY"
  //  3 : "LOW_PRIORITY"
  uint8_t XBR_PRIORITY : 2;                  //      Bits= 2

  //  0 : "OVERRIDE_DISABLE"
  //  1 : "ACCEL_CONTROL_WITH_ADDITION_MODE"
  //  2 : "ACCEL_CONTROL_WITH_MAXIMUM_MODE"
  uint8_t XBR_CONTROL_MODE : 2;              //      Bits= 2

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  uint16_t BRAKE_DECEL_CMD_ro;               //      Bits=16 Factor= 0.001           Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_DECEL_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "NO_ENDURANCE_BRK_INTGN_ALLOWED"
  //  1 : "ONLY_ENDURANCE_BRAKES_ALLOWED"
  //  2 : "ENDURANCE_BRK_INTGRN_ALLOWED"
  uint8_t XBR_EBI_MODE;                      //      Bits= 2

  //  0 : "HIGHEST_PRIORITY"
  //  1 : "HIGH_PRIORITY"
  //  2 : "MEDIUM_PRIORITY"
  //  3 : "LOW_PRIORITY"
  uint8_t XBR_PRIORITY;                      //      Bits= 2

  //  0 : "OVERRIDE_DISABLE"
  //  1 : "ACCEL_CONTROL_WITH_ADDITION_MODE"
  //  2 : "ACCEL_CONTROL_WITH_MAXIMUM_MODE"
  uint8_t XBR_CONTROL_MODE;                  //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_DECEL_CMD_t;

// def @REAR_PASS_DOOR_CMD CAN Message (320  0x140)
#define REAR_PASS_DOOR_CMD_IDE (0U)
#define REAR_PASS_DOOR_CMD_DLC (2U)
#define REAR_PASS_DOOR_CMD_CANID (0x140)
#define REAR_PASS_DOOR_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_REAR_PASS_DOOR_CMD_DISABLE
#define ENABLE_REAR_PASS_DOOR_CMD_DISABLE (0)
#endif

#ifndef ENABLE_REAR_PASS_DOOR_CMD_ENABLE
#define ENABLE_REAR_PASS_DOOR_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_REAR_PASS_DOOR_CMD_FALSE
#define IGNORE_OVERRIDES_REAR_PASS_DOOR_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_REAR_PASS_DOOR_CMD_TRUE
#define IGNORE_OVERRIDES_REAR_PASS_DOOR_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_REAR_PASS_DOOR_CMD_FALSE
#define CLEAR_OVERRIDE_REAR_PASS_DOOR_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_REAR_PASS_DOOR_CMD_TRUE
#define CLEAR_OVERRIDE_REAR_PASS_DOOR_CMD_TRUE (1)
#endif


// Value tables for @REAR_PASS_DOOR_CMD signal

#ifndef REAR_PASS_DOOR_CMD_REAR_PASS_DOOR_CMD_NEUTRAL
#define REAR_PASS_DOOR_CMD_REAR_PASS_DOOR_CMD_NEUTRAL (0)
#endif

#ifndef REAR_PASS_DOOR_CMD_REAR_PASS_DOOR_CMD_OPEN
#define REAR_PASS_DOOR_CMD_REAR_PASS_DOOR_CMD_OPEN (1)
#endif

#ifndef REAR_PASS_DOOR_CMD_REAR_PASS_DOOR_CMD_CLOSE
#define REAR_PASS_DOOR_CMD_REAR_PASS_DOOR_CMD_CLOSE (2)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "NEUTRAL"
  //  1 : "OPEN"
  //  2 : "CLOSE"
  uint8_t REAR_PASS_DOOR_CMD;                //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "NEUTRAL"
  //  1 : "OPEN"
  //  2 : "CLOSE"
  uint8_t REAR_PASS_DOOR_CMD;                //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} REAR_PASS_DOOR_CMD_t;

// def @ENGINE_BRAKE_CMD CAN Message (324  0x144)
#define ENGINE_BRAKE_CMD_IDE (0U)
#define ENGINE_BRAKE_CMD_DLC (3U)
#define ENGINE_BRAKE_CMD_CANID (0x144)

// Value tables for @ENABLE signal

#ifndef ENABLE_ENGINE_BRAKE_CMD_DISABLE
#define ENABLE_ENGINE_BRAKE_CMD_DISABLE (0)
#endif

#ifndef ENABLE_ENGINE_BRAKE_CMD_ENABLE
#define ENABLE_ENGINE_BRAKE_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_ENGINE_BRAKE_CMD_FALSE
#define IGNORE_OVERRIDES_ENGINE_BRAKE_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_ENGINE_BRAKE_CMD_TRUE
#define IGNORE_OVERRIDES_ENGINE_BRAKE_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_ENGINE_BRAKE_CMD_FALSE
#define CLEAR_OVERRIDE_ENGINE_BRAKE_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_ENGINE_BRAKE_CMD_TRUE
#define CLEAR_OVERRIDE_ENGINE_BRAKE_CMD_TRUE (1)
#endif


// Value tables for @ENGINE_BRAKE_CMD signal

#ifndef ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_OFF
#define ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_OFF (0)
#endif

#ifndef ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_LEVEL_1
#define ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_LEVEL_1 (1)
#endif

#ifndef ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_LEVEL_2
#define ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_LEVEL_2 (2)
#endif

#ifndef ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_LEVEL_3
#define ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_LEVEL_3 (3)
#endif

#ifndef ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_LEVEL_4
#define ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_LEVEL_4 (4)
#endif

#ifndef ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_LEVEL_5
#define ENGINE_BRAKE_CMD_ENGINE_BRAKE_CMD_LEVEL_5 (5)
#endif


// Value tables for @AUTO_CMD signal

#ifndef AUTO_CMD_ENGINE_BRAKE_CMD_AUTO_OFF
#define AUTO_CMD_ENGINE_BRAKE_CMD_AUTO_OFF (0)
#endif

#ifndef AUTO_CMD_ENGINE_BRAKE_CMD_AUTO_ON
#define AUTO_CMD_ENGINE_BRAKE_CMD_AUTO_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  // Brake aggressiveness increases with increasing numerical values. Each operator control setting maps one-to-one with each LEVEL, starting with 1. Higher LEVELs with no match map to maximum.
  //  0 : "OFF"
  //  1 : "LEVEL_1"
  //  2 : "LEVEL_2"
  //  3 : "LEVEL_3"
  //  4 : "LEVEL_4"
  //  5 : "LEVEL_5"
  uint8_t ENGINE_BRAKE_CMD;                  //      Bits= 8

  // Braking aggressivness automatic while AUTO_ON.
  //  0 : "AUTO_OFF"
  //  1 : "AUTO_ON"
  uint8_t AUTO_CMD : 2;                      //      Bits= 2

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  // Brake aggressiveness increases with increasing numerical values. Each operator control setting maps one-to-one with each LEVEL, starting with 1. Higher LEVELs with no match map to maximum.
  //  0 : "OFF"
  //  1 : "LEVEL_1"
  //  2 : "LEVEL_2"
  //  3 : "LEVEL_3"
  //  4 : "LEVEL_4"
  //  5 : "LEVEL_5"
  uint8_t ENGINE_BRAKE_CMD;                  //      Bits= 8

  // Braking aggressivness automatic while AUTO_ON.
  //  0 : "AUTO_OFF"
  //  1 : "AUTO_ON"
  uint8_t AUTO_CMD;                          //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ENGINE_BRAKE_CMD_t;

// def @EXHAUST_BRAKE_CMD CAN Message (325  0x145)
#define EXHAUST_BRAKE_CMD_IDE (0U)
#define EXHAUST_BRAKE_CMD_DLC (2U)
#define EXHAUST_BRAKE_CMD_CANID (0x145)
#define EXHAUST_BRAKE_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_EXHAUST_BRAKE_CMD_DISABLE
#define ENABLE_EXHAUST_BRAKE_CMD_DISABLE (0)
#endif

#ifndef ENABLE_EXHAUST_BRAKE_CMD_ENABLE
#define ENABLE_EXHAUST_BRAKE_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_EXHAUST_BRAKE_CMD_FALSE
#define IGNORE_OVERRIDES_EXHAUST_BRAKE_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_EXHAUST_BRAKE_CMD_TRUE
#define IGNORE_OVERRIDES_EXHAUST_BRAKE_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_EXHAUST_BRAKE_CMD_FALSE
#define CLEAR_OVERRIDE_EXHAUST_BRAKE_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_EXHAUST_BRAKE_CMD_TRUE
#define CLEAR_OVERRIDE_EXHAUST_BRAKE_CMD_TRUE (1)
#endif


// Value tables for @EXHAUST_BRAKE_CMD signal

#ifndef EXHAUST_BRAKE_CMD_EXHAUST_BRAKE_CMD_OFF
#define EXHAUST_BRAKE_CMD_EXHAUST_BRAKE_CMD_OFF (0)
#endif

#ifndef EXHAUST_BRAKE_CMD_EXHAUST_BRAKE_CMD_ON
#define EXHAUST_BRAKE_CMD_EXHAUST_BRAKE_CMD_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t EXHAUST_BRAKE_CMD;                 //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t EXHAUST_BRAKE_CMD;                 //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} EXHAUST_BRAKE_CMD_t;

// def @MARKER_LAMP_CMD CAN Message (328  0x148)
#define MARKER_LAMP_CMD_IDE (0U)
#define MARKER_LAMP_CMD_DLC (2U)
#define MARKER_LAMP_CMD_CANID (0x148)
#define MARKER_LAMP_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_MARKER_LAMP_CMD_DISABLE
#define ENABLE_MARKER_LAMP_CMD_DISABLE (0)
#endif

#ifndef ENABLE_MARKER_LAMP_CMD_ENABLE
#define ENABLE_MARKER_LAMP_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_MARKER_LAMP_CMD_FALSE
#define IGNORE_OVERRIDES_MARKER_LAMP_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_MARKER_LAMP_CMD_TRUE
#define IGNORE_OVERRIDES_MARKER_LAMP_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_MARKER_LAMP_CMD_FALSE
#define CLEAR_OVERRIDE_MARKER_LAMP_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_MARKER_LAMP_CMD_TRUE
#define CLEAR_OVERRIDE_MARKER_LAMP_CMD_TRUE (1)
#endif


// Value tables for @MARKER_LAMP_CMD signal

#ifndef MARKER_LAMP_CMD_MARKER_LAMP_CMD_OFF
#define MARKER_LAMP_CMD_MARKER_LAMP_CMD_OFF (0)
#endif

#ifndef MARKER_LAMP_CMD_MARKER_LAMP_CMD_ON
#define MARKER_LAMP_CMD_MARKER_LAMP_CMD_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MARKER_LAMP_CMD : 1;               //      Bits= 1

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MARKER_LAMP_CMD;                   //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} MARKER_LAMP_CMD_t;

// def @CABIN_TEMP_CMD CAN Message (332  0x14c)
#define CABIN_TEMP_CMD_IDE (0U)
#define CABIN_TEMP_CMD_DLC (2U)
#define CABIN_TEMP_CMD_CANID (0x14c)
#define CABIN_TEMP_CMD_CYC (1000U)

// Value tables for @ENABLE signal

#ifndef ENABLE_CABIN_TEMP_CMD_DISABLE
#define ENABLE_CABIN_TEMP_CMD_DISABLE (0)
#endif

#ifndef ENABLE_CABIN_TEMP_CMD_ENABLE
#define ENABLE_CABIN_TEMP_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_CABIN_TEMP_CMD_FALSE
#define IGNORE_OVERRIDES_CABIN_TEMP_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_CABIN_TEMP_CMD_TRUE
#define IGNORE_OVERRIDES_CABIN_TEMP_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_CABIN_TEMP_CMD_FALSE
#define CLEAR_OVERRIDE_CABIN_TEMP_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_CABIN_TEMP_CMD_TRUE
#define CLEAR_OVERRIDE_CABIN_TEMP_CMD_TRUE (1)
#endif

// signal: @CABIN_TEMP_CMD_ro
#define PACMOD13_CABIN_TEMP_CMD_ro_CovFactor (0.1)
#define PACMOD13_CABIN_TEMP_CMD_ro_toS(x) ( (uint8_t) (((x) - (10.0)) / (0.1)) )
#define PACMOD13_CABIN_TEMP_CMD_ro_fromS(x) ( (((x) * (0.1)) + (10.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  uint8_t CABIN_TEMP_CMD_ro;                 //      Bits= 8 Offset= 10.0               Factor= 0.1             Unit:'deg_C'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t CABIN_TEMP_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  uint8_t CABIN_TEMP_CMD_ro;                 //      Bits= 8 Offset= 10.0               Factor= 0.1             Unit:'deg_C'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t CABIN_TEMP_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} CABIN_TEMP_CMD_t;

// def @CABIN_FAN_SPEED_CMD CAN Message (336  0x150)
#define CABIN_FAN_SPEED_CMD_IDE (0U)
#define CABIN_FAN_SPEED_CMD_DLC (2U)
#define CABIN_FAN_SPEED_CMD_CANID (0x150)
#define CABIN_FAN_SPEED_CMD_CYC (1000U)

// Value tables for @ENABLE signal

#ifndef ENABLE_CABIN_FAN_SPEED_CMD_DISABLE
#define ENABLE_CABIN_FAN_SPEED_CMD_DISABLE (0)
#endif

#ifndef ENABLE_CABIN_FAN_SPEED_CMD_ENABLE
#define ENABLE_CABIN_FAN_SPEED_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_CABIN_FAN_SPEED_CMD_FALSE
#define IGNORE_OVERRIDES_CABIN_FAN_SPEED_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_CABIN_FAN_SPEED_CMD_TRUE
#define IGNORE_OVERRIDES_CABIN_FAN_SPEED_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_CABIN_FAN_SPEED_CMD_FALSE
#define CLEAR_OVERRIDE_CABIN_FAN_SPEED_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_CABIN_FAN_SPEED_CMD_TRUE
#define CLEAR_OVERRIDE_CABIN_FAN_SPEED_CMD_TRUE (1)
#endif


// Value tables for @CABIN_FAN_SPEED_CMD signal

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_OFF
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_OFF (0)
#endif

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_1
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_1 (1)
#endif

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_2
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_2 (2)
#endif

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_3
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_3 (3)
#endif

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_4
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_4 (4)
#endif

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_5
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_5 (5)
#endif

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_6
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_6 (6)
#endif

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_7
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_7 (7)
#endif

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_8
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_8 (8)
#endif

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_9
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_9 (9)
#endif

#ifndef CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_10
#define CABIN_FAN_SPEED_CMD_CABIN_FAN_SPEED_CMD_FAN_SPEED_10 (10)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "FAN_OFF"
  //  1 : "FAN_SPEED_1"
  //  2 : "FAN_SPEED_2"
  //  3 : "FAN_SPEED_3"
  //  4 : "FAN_SPEED_4"
  //  5 : "FAN_SPEED_5"
  //  6 : "FAN_SPEED_6"
  //  7 : "FAN_SPEED_7"
  //  8 : "FAN_SPEED_8"
  //  9 : "FAN_SPEED_9"
  //  10 : "FAN_SPEED_10"
  uint8_t CABIN_FAN_SPEED_CMD;               //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "FAN_OFF"
  //  1 : "FAN_SPEED_1"
  //  2 : "FAN_SPEED_2"
  //  3 : "FAN_SPEED_3"
  //  4 : "FAN_SPEED_4"
  //  5 : "FAN_SPEED_5"
  //  6 : "FAN_SPEED_6"
  //  7 : "FAN_SPEED_7"
  //  8 : "FAN_SPEED_8"
  //  9 : "FAN_SPEED_9"
  //  10 : "FAN_SPEED_10"
  uint8_t CABIN_FAN_SPEED_CMD;               //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} CABIN_FAN_SPEED_CMD_t;

// def @CABIN_CLIMATE_CMD CAN Message (340  0x154)
#define CABIN_CLIMATE_CMD_IDE (0U)
#define CABIN_CLIMATE_CMD_DLC (3U)
#define CABIN_CLIMATE_CMD_CANID (0x154)
#define CABIN_CLIMATE_CMD_CYC (1000U)

// Value tables for @ENABLE signal

#ifndef ENABLE_CABIN_CLIMATE_CMD_DISABLE
#define ENABLE_CABIN_CLIMATE_CMD_DISABLE (0)
#endif

#ifndef ENABLE_CABIN_CLIMATE_CMD_ENABLE
#define ENABLE_CABIN_CLIMATE_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_CABIN_CLIMATE_CMD_FALSE
#define IGNORE_OVERRIDES_CABIN_CLIMATE_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_CABIN_CLIMATE_CMD_TRUE
#define IGNORE_OVERRIDES_CABIN_CLIMATE_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_CABIN_CLIMATE_CMD_FALSE
#define CLEAR_OVERRIDE_CABIN_CLIMATE_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_CABIN_CLIMATE_CMD_TRUE
#define CLEAR_OVERRIDE_CABIN_CLIMATE_CMD_TRUE (1)
#endif


// Value tables for @CMD_AC_OFF_ON signal

#ifndef CMD_AC_OFF_ON_CABIN_CLIMATE_CMD_OFF
#define CMD_AC_OFF_ON_CABIN_CLIMATE_CMD_OFF (0)
#endif

#ifndef CMD_AC_OFF_ON_CABIN_CLIMATE_CMD_ON
#define CMD_AC_OFF_ON_CABIN_CLIMATE_CMD_ON (1)
#endif


// Value tables for @CMD_MAX_AC_OFF_ON signal

#ifndef CMD_MAX_AC_OFF_ON_CABIN_CLIMATE_CMD_OFF
#define CMD_MAX_AC_OFF_ON_CABIN_CLIMATE_CMD_OFF (0)
#endif

#ifndef CMD_MAX_AC_OFF_ON_CABIN_CLIMATE_CMD_ON
#define CMD_MAX_AC_OFF_ON_CABIN_CLIMATE_CMD_ON (1)
#endif


// Value tables for @CMD_DEFROST_OFF_ON signal

#ifndef CMD_DEFROST_OFF_ON_CABIN_CLIMATE_CMD_OFF
#define CMD_DEFROST_OFF_ON_CABIN_CLIMATE_CMD_OFF (0)
#endif

#ifndef CMD_DEFROST_OFF_ON_CABIN_CLIMATE_CMD_ON
#define CMD_DEFROST_OFF_ON_CABIN_CLIMATE_CMD_ON (1)
#endif


// Value tables for @CMD_MAX_DEFROST_OFF_ON signal

#ifndef CMD_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_CMD_OFF
#define CMD_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_CMD_OFF (0)
#endif

#ifndef CMD_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_CMD_ON
#define CMD_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_CMD_ON (1)
#endif


// Value tables for @CMD_DIR_UP_OFF_ON signal

#ifndef CMD_DIR_UP_OFF_ON_CABIN_CLIMATE_CMD_OFF
#define CMD_DIR_UP_OFF_ON_CABIN_CLIMATE_CMD_OFF (0)
#endif

#ifndef CMD_DIR_UP_OFF_ON_CABIN_CLIMATE_CMD_ON
#define CMD_DIR_UP_OFF_ON_CABIN_CLIMATE_CMD_ON (1)
#endif


// Value tables for @CMD_DIR_DOWN_OFF_ON signal

#ifndef CMD_DIR_DOWN_OFF_ON_CABIN_CLIMATE_CMD_OFF
#define CMD_DIR_DOWN_OFF_ON_CABIN_CLIMATE_CMD_OFF (0)
#endif

#ifndef CMD_DIR_DOWN_OFF_ON_CABIN_CLIMATE_CMD_ON
#define CMD_DIR_DOWN_OFF_ON_CABIN_CLIMATE_CMD_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_AC_OFF_ON : 2;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_MAX_AC_OFF_ON : 2;             //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DEFROST_OFF_ON : 2;            //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_MAX_DEFROST_OFF_ON : 2;        //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DIR_UP_OFF_ON : 2;             //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DIR_DOWN_OFF_ON : 2;           //      Bits= 2

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_AC_OFF_ON;                     //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_MAX_AC_OFF_ON;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DEFROST_OFF_ON;                //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_MAX_DEFROST_OFF_ON;            //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DIR_UP_OFF_ON;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DIR_DOWN_OFF_ON;               //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} CABIN_CLIMATE_CMD_t;

// def @TIPPER_BODY_CMD_00 CAN Message (344  0x158)
#define TIPPER_BODY_CMD_00_IDE (0U)
#define TIPPER_BODY_CMD_00_DLC (2U)
#define TIPPER_BODY_CMD_00_CANID (0x158)
#define TIPPER_BODY_CMD_00_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_TIPPER_BODY_CMD_00_DISABLE
#define ENABLE_TIPPER_BODY_CMD_00_DISABLE (0)
#endif

#ifndef ENABLE_TIPPER_BODY_CMD_00_ENABLE
#define ENABLE_TIPPER_BODY_CMD_00_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_TIPPER_BODY_CMD_00_FALSE
#define IGNORE_OVERRIDES_TIPPER_BODY_CMD_00_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_TIPPER_BODY_CMD_00_TRUE
#define IGNORE_OVERRIDES_TIPPER_BODY_CMD_00_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_TIPPER_BODY_CMD_00_FALSE
#define CLEAR_OVERRIDE_TIPPER_BODY_CMD_00_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_TIPPER_BODY_CMD_00_TRUE
#define CLEAR_OVERRIDE_TIPPER_BODY_CMD_00_TRUE (1)
#endif


// Value tables for @TIPPER_CONTROL_CMD signal

#ifndef TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_00_NO_ACTION
#define TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_00_NO_ACTION (0)
#endif

#ifndef TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_00_RAISE
#define TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_00_RAISE (1)
#endif

#ifndef TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_00_LOWER
#define TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_00_LOWER (2)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t TIPPER_CONTROL_CMD;                //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t TIPPER_CONTROL_CMD;                //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIPPER_BODY_CMD_00_t;

// def @POWER_TAKE_OFF_CMD CAN Message (348  0x15c)
#define POWER_TAKE_OFF_CMD_IDE (0U)
#define POWER_TAKE_OFF_CMD_DLC (2U)
#define POWER_TAKE_OFF_CMD_CANID (0x15c)
#define POWER_TAKE_OFF_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_POWER_TAKE_OFF_CMD_DISABLE
#define ENABLE_POWER_TAKE_OFF_CMD_DISABLE (0)
#endif

#ifndef ENABLE_POWER_TAKE_OFF_CMD_ENABLE
#define ENABLE_POWER_TAKE_OFF_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_POWER_TAKE_OFF_CMD_FALSE
#define IGNORE_OVERRIDES_POWER_TAKE_OFF_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_POWER_TAKE_OFF_CMD_TRUE
#define IGNORE_OVERRIDES_POWER_TAKE_OFF_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_POWER_TAKE_OFF_CMD_FALSE
#define CLEAR_OVERRIDE_POWER_TAKE_OFF_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_POWER_TAKE_OFF_CMD_TRUE
#define CLEAR_OVERRIDE_POWER_TAKE_OFF_CMD_TRUE (1)
#endif


// Value tables for @POWER_TAKE_OFF_CMD signal

#ifndef POWER_TAKE_OFF_CMD_POWER_TAKE_OFF_CMD_OFF
#define POWER_TAKE_OFF_CMD_POWER_TAKE_OFF_CMD_OFF (0)
#endif

#ifndef POWER_TAKE_OFF_CMD_POWER_TAKE_OFF_CMD_ON
#define POWER_TAKE_OFF_CMD_POWER_TAKE_OFF_CMD_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t POWER_TAKE_OFF_CMD;                //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t POWER_TAKE_OFF_CMD;                //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} POWER_TAKE_OFF_CMD_t;

// def @TRAILER_BRAKE_CMD CAN Message (352  0x160)
#define TRAILER_BRAKE_CMD_IDE (0U)
#define TRAILER_BRAKE_CMD_DLC (3U)
#define TRAILER_BRAKE_CMD_CANID (0x160)

// Value tables for @ENABLE signal

#ifndef ENABLE_TRAILER_BRAKE_CMD_DISABLE
#define ENABLE_TRAILER_BRAKE_CMD_DISABLE (0)
#endif

#ifndef ENABLE_TRAILER_BRAKE_CMD_ENABLE
#define ENABLE_TRAILER_BRAKE_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_TRAILER_BRAKE_CMD_FALSE
#define IGNORE_OVERRIDES_TRAILER_BRAKE_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_TRAILER_BRAKE_CMD_TRUE
#define IGNORE_OVERRIDES_TRAILER_BRAKE_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_TRAILER_BRAKE_CMD_FALSE
#define CLEAR_OVERRIDE_TRAILER_BRAKE_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_TRAILER_BRAKE_CMD_TRUE
#define CLEAR_OVERRIDE_TRAILER_BRAKE_CMD_TRUE (1)
#endif

// signal: @TRAILER_BRAKE_CMD_ro
#define PACMOD13_TRAILER_BRAKE_CMD_ro_CovFactor (0.001)
#define PACMOD13_TRAILER_BRAKE_CMD_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_TRAILER_BRAKE_CMD_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  uint16_t TRAILER_BRAKE_CMD_ro;             //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t TRAILER_BRAKE_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  uint16_t TRAILER_BRAKE_CMD_ro;             //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t TRAILER_BRAKE_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_BRAKE_CMD_t;

// def @TRAILER_AIR_SUPPLY_CMD CAN Message (356  0x164)
#define TRAILER_AIR_SUPPLY_CMD_IDE (0U)
#define TRAILER_AIR_SUPPLY_CMD_DLC (2U)
#define TRAILER_AIR_SUPPLY_CMD_CANID (0x164)

// Value tables for @ENABLE signal

#ifndef ENABLE_TRAILER_AIR_SUPPLY_CMD_DISABLE
#define ENABLE_TRAILER_AIR_SUPPLY_CMD_DISABLE (0)
#endif

#ifndef ENABLE_TRAILER_AIR_SUPPLY_CMD_ENABLE
#define ENABLE_TRAILER_AIR_SUPPLY_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_TRAILER_AIR_SUPPLY_CMD_FALSE
#define IGNORE_OVERRIDES_TRAILER_AIR_SUPPLY_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_TRAILER_AIR_SUPPLY_CMD_TRUE
#define IGNORE_OVERRIDES_TRAILER_AIR_SUPPLY_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_TRAILER_AIR_SUPPLY_CMD_FALSE
#define CLEAR_OVERRIDE_TRAILER_AIR_SUPPLY_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_TRAILER_AIR_SUPPLY_CMD_TRUE
#define CLEAR_OVERRIDE_TRAILER_AIR_SUPPLY_CMD_TRUE (1)
#endif


// Value tables for @TRAILER_AIR_SUPPLY_CMD signal

#ifndef TRAILER_AIR_SUPPLY_CMD_TRAILER_AIR_SUPPLY_CMD_OFF
#define TRAILER_AIR_SUPPLY_CMD_TRAILER_AIR_SUPPLY_CMD_OFF (0)
#endif

#ifndef TRAILER_AIR_SUPPLY_CMD_TRAILER_AIR_SUPPLY_CMD_ON
#define TRAILER_AIR_SUPPLY_CMD_TRAILER_AIR_SUPPLY_CMD_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t TRAILER_AIR_SUPPLY_CMD : 1;        //      Bits= 1

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t TRAILER_AIR_SUPPLY_CMD;            //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_AIR_SUPPLY_CMD_t;

// def @ENGINE_CMD CAN Message (360  0x168)
#define ENGINE_CMD_IDE (0U)
#define ENGINE_CMD_DLC (2U)
#define ENGINE_CMD_CANID (0x168)
#define ENGINE_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_ENGINE_CMD_DISABLE
#define ENABLE_ENGINE_CMD_DISABLE (0)
#endif

#ifndef ENABLE_ENGINE_CMD_ENABLE
#define ENABLE_ENGINE_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_ENGINE_CMD_FALSE
#define IGNORE_OVERRIDES_ENGINE_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_ENGINE_CMD_TRUE
#define IGNORE_OVERRIDES_ENGINE_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_ENGINE_CMD_FALSE
#define CLEAR_OVERRIDE_ENGINE_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_ENGINE_CMD_TRUE
#define CLEAR_OVERRIDE_ENGINE_CMD_TRUE (1)
#endif


// Value tables for @ENGINE_CMD signal

#ifndef ENGINE_CMD_ENGINE_CMD_NO_ACTION
#define ENGINE_CMD_ENGINE_CMD_NO_ACTION (0)
#endif

#ifndef ENGINE_CMD_ENGINE_CMD_ENGINE_OFF
#define ENGINE_CMD_ENGINE_CMD_ENGINE_OFF (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "NO_ACTION"
  //  1 : "ENGINE_OFF"
  uint8_t ENGINE_CMD;                        //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "NO_ACTION"
  //  1 : "ENGINE_OFF"
  uint8_t ENGINE_CMD;                        //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ENGINE_CMD_t;

// def @TIPPER_BODY_CMD_01 CAN Message (364  0x16c)
#define TIPPER_BODY_CMD_01_IDE (0U)
#define TIPPER_BODY_CMD_01_DLC (2U)
#define TIPPER_BODY_CMD_01_CANID (0x16c)
#define TIPPER_BODY_CMD_01_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_TIPPER_BODY_CMD_01_DISABLE
#define ENABLE_TIPPER_BODY_CMD_01_DISABLE (0)
#endif

#ifndef ENABLE_TIPPER_BODY_CMD_01_ENABLE
#define ENABLE_TIPPER_BODY_CMD_01_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_TIPPER_BODY_CMD_01_FALSE
#define IGNORE_OVERRIDES_TIPPER_BODY_CMD_01_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_TIPPER_BODY_CMD_01_TRUE
#define IGNORE_OVERRIDES_TIPPER_BODY_CMD_01_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_TIPPER_BODY_CMD_01_FALSE
#define CLEAR_OVERRIDE_TIPPER_BODY_CMD_01_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_TIPPER_BODY_CMD_01_TRUE
#define CLEAR_OVERRIDE_TIPPER_BODY_CMD_01_TRUE (1)
#endif


// Value tables for @TIPPER_CONTROL_CMD signal

#ifndef TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_01_NO_ACTION
#define TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_01_NO_ACTION (0)
#endif

#ifndef TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_01_RAISE
#define TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_01_RAISE (1)
#endif

#ifndef TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_01_LOWER
#define TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_01_LOWER (2)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t TIPPER_CONTROL_CMD;                //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t TIPPER_CONTROL_CMD;                //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIPPER_BODY_CMD_01_t;

// def @TIPPER_BODY_CMD_02 CAN Message (368  0x170)
#define TIPPER_BODY_CMD_02_IDE (0U)
#define TIPPER_BODY_CMD_02_DLC (2U)
#define TIPPER_BODY_CMD_02_CANID (0x170)
#define TIPPER_BODY_CMD_02_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_TIPPER_BODY_CMD_02_DISABLE
#define ENABLE_TIPPER_BODY_CMD_02_DISABLE (0)
#endif

#ifndef ENABLE_TIPPER_BODY_CMD_02_ENABLE
#define ENABLE_TIPPER_BODY_CMD_02_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_TIPPER_BODY_CMD_02_FALSE
#define IGNORE_OVERRIDES_TIPPER_BODY_CMD_02_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_TIPPER_BODY_CMD_02_TRUE
#define IGNORE_OVERRIDES_TIPPER_BODY_CMD_02_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_TIPPER_BODY_CMD_02_FALSE
#define CLEAR_OVERRIDE_TIPPER_BODY_CMD_02_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_TIPPER_BODY_CMD_02_TRUE
#define CLEAR_OVERRIDE_TIPPER_BODY_CMD_02_TRUE (1)
#endif


// Value tables for @TIPPER_CONTROL_CMD signal

#ifndef TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_02_NO_ACTION
#define TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_02_NO_ACTION (0)
#endif

#ifndef TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_02_RAISE
#define TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_02_RAISE (1)
#endif

#ifndef TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_02_LOWER
#define TIPPER_CONTROL_CMD_TIPPER_BODY_CMD_02_LOWER (2)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t TIPPER_CONTROL_CMD;                //      Bits= 8

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t TIPPER_CONTROL_CMD;                //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIPPER_BODY_CMD_02_t;

// def @DIFFERENTIAL_LOCKS_CMD CAN Message (372  0x174)
#define DIFFERENTIAL_LOCKS_CMD_IDE (0U)
#define DIFFERENTIAL_LOCKS_CMD_DLC (2U)
#define DIFFERENTIAL_LOCKS_CMD_CANID (0x174)
#define DIFFERENTIAL_LOCKS_CMD_CYC (100U)

// Value tables for @ENABLE signal

#ifndef ENABLE_DIFFERENTIAL_LOCKS_CMD_DISABLE
#define ENABLE_DIFFERENTIAL_LOCKS_CMD_DISABLE (0)
#endif

#ifndef ENABLE_DIFFERENTIAL_LOCKS_CMD_ENABLE
#define ENABLE_DIFFERENTIAL_LOCKS_CMD_ENABLE (1)
#endif


// Value tables for @IGNORE_OVERRIDES signal

#ifndef IGNORE_OVERRIDES_DIFFERENTIAL_LOCKS_CMD_FALSE
#define IGNORE_OVERRIDES_DIFFERENTIAL_LOCKS_CMD_FALSE (0)
#endif

#ifndef IGNORE_OVERRIDES_DIFFERENTIAL_LOCKS_CMD_TRUE
#define IGNORE_OVERRIDES_DIFFERENTIAL_LOCKS_CMD_TRUE (1)
#endif


// Value tables for @CLEAR_OVERRIDE signal

#ifndef CLEAR_OVERRIDE_DIFFERENTIAL_LOCKS_CMD_FALSE
#define CLEAR_OVERRIDE_DIFFERENTIAL_LOCKS_CMD_FALSE (0)
#endif

#ifndef CLEAR_OVERRIDE_DIFFERENTIAL_LOCKS_CMD_TRUE
#define CLEAR_OVERRIDE_DIFFERENTIAL_LOCKS_CMD_TRUE (1)
#endif


// Value tables for @FRONT_LOCK_CMD signal

#ifndef FRONT_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_OFF
#define FRONT_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_OFF (0)
#endif

#ifndef FRONT_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_ON
#define FRONT_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_ON (1)
#endif

#ifndef FRONT_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_ERROR
#define FRONT_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_ERROR (2)
#endif

#ifndef FRONT_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_NOT_AVAIL
#define FRONT_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_NOT_AVAIL (3)
#endif


// Value tables for @CENTER_LOCK_CMD signal

#ifndef CENTER_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_OFF
#define CENTER_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_OFF (0)
#endif

#ifndef CENTER_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_ON
#define CENTER_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_ON (1)
#endif

#ifndef CENTER_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_ERROR
#define CENTER_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_ERROR (2)
#endif

#ifndef CENTER_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_NOT_AVAIL
#define CENTER_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_NOT_AVAIL (3)
#endif


// Value tables for @REAR_LOCK_CMD signal

#ifndef REAR_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_OFF
#define REAR_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_OFF (0)
#endif

#ifndef REAR_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_ON
#define REAR_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_LOCK_ON (1)
#endif

#ifndef REAR_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_ERROR
#define REAR_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_ERROR (2)
#endif

#ifndef REAR_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_NOT_AVAIL
#define REAR_LOCK_CMD_DIFFERENTIAL_LOCKS_CMD_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE : 1;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE : 1;                //      Bits= 1

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t FRONT_LOCK_CMD : 2;                //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CENTER_LOCK_CMD : 2;               //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t REAR_LOCK_CMD : 2;                 //      Bits= 2

#else

  //  0 : "DISABLE"
  //  1 : "ENABLE"
  uint8_t ENABLE;                            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t IGNORE_OVERRIDES;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CLEAR_OVERRIDE;                    //      Bits= 1

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t FRONT_LOCK_CMD;                    //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CENTER_LOCK_CMD;                   //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t REAR_LOCK_CMD;                     //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} DIFFERENTIAL_LOCKS_CMD_t;

// def @ACCEL_RPT CAN Message (512  0x200)
#define ACCEL_RPT_IDE (0U)
#define ACCEL_RPT_DLC (8U)
#define ACCEL_RPT_CANID (0x200)

// Value tables for @ENABLED signal

#ifndef ENABLED_ACCEL_RPT_FALSE
#define ENABLED_ACCEL_RPT_FALSE (0)
#endif

#ifndef ENABLED_ACCEL_RPT_TRUE
#define ENABLED_ACCEL_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_ACCEL_RPT_FALSE
#define OVERRIDE_ACTIVE_ACCEL_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_ACCEL_RPT_TRUE
#define OVERRIDE_ACTIVE_ACCEL_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_ACCEL_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_ACCEL_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_ACCEL_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_ACCEL_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_ACCEL_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_ACCEL_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_ACCEL_RPT_FAULT
#define INPUT_OUTPUT_FAULT_ACCEL_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_ACCEL_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_ACCEL_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_ACCEL_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_ACCEL_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_ACCEL_RPT_NO_FAULT
#define PACMOD_FAULT_ACCEL_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_ACCEL_RPT_FAULT
#define PACMOD_FAULT_ACCEL_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_ACCEL_RPT_NO_FAULT
#define VEHICLE_FAULT_ACCEL_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_ACCEL_RPT_FAULT
#define VEHICLE_FAULT_ACCEL_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_ACCEL_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_ACCEL_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_ACCEL_RPT_TIMEOUT
#define COMMAND_TIMEOUT_ACCEL_RPT_TIMEOUT (1)
#endif

// signal: @MANUAL_INPUT_ro
#define PACMOD13_MANUAL_INPUT_ro_CovFactor (0.001)
#define PACMOD13_MANUAL_INPUT_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_MANUAL_INPUT_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @COMMANDED_VALUE_ro
#define PACMOD13_COMMANDED_VALUE_ro_CovFactor (0.001)
#define PACMOD13_COMMANDED_VALUE_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_COMMANDED_VALUE_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @OUTPUT_VALUE_ro
#define PACMOD13_OUTPUT_VALUE_ro_CovFactor (0.001)
#define PACMOD13_OUTPUT_VALUE_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_OUTPUT_VALUE_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

// Value tables for @CONTROL_STATUS signal

#ifndef CONTROL_STATUS_ACCEL_RPT_SAFE
#define CONTROL_STATUS_ACCEL_RPT_SAFE (0)
#endif

#ifndef CONTROL_STATUS_ACCEL_RPT_AVAILABLE
#define CONTROL_STATUS_ACCEL_RPT_AVAILABLE (1)
#endif


// Value tables for @PERFORMANCE_STATUS signal

#ifndef PERFORMANCE_STATUS_ACCEL_RPT_NONE
#define PERFORMANCE_STATUS_ACCEL_RPT_NONE (0)
#endif

#ifndef PERFORMANCE_STATUS_ACCEL_RPT_CMD_TRACKING_FAILURE
#define PERFORMANCE_STATUS_ACCEL_RPT_CMD_TRACKING_FAILURE (1)
#endif

#ifndef PERFORMANCE_STATUS_ACCEL_RPT_APPOACHING_OPERATIONAL_LIMITS
#define PERFORMANCE_STATUS_ACCEL_RPT_APPOACHING_OPERATIONAL_LIMITS (2)
#endif

#ifndef PERFORMANCE_STATUS_ACCEL_RPT_LIMITING_ACTIVE
#define PERFORMANCE_STATUS_ACCEL_RPT_LIMITING_ACTIVE (3)
#endif

#ifndef PERFORMANCE_STATUS_ACCEL_RPT_LIMITING_IMMINENT
#define PERFORMANCE_STATUS_ACCEL_RPT_LIMITING_IMMINENT (4)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  uint16_t MANUAL_INPUT_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t COMMANDED_VALUE_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t OUTPUT_VALUE_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS : 1;                //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS : 2;           //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS : 3;            //      Bits= 3

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  uint16_t MANUAL_INPUT_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t COMMANDED_VALUE_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t OUTPUT_VALUE_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS;                    //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS;               //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS;                //      Bits= 3

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ACCEL_RPT_t;

// def @ACCEL_CMD_LIMIT_RPT CAN Message (513  0x201)
#define ACCEL_CMD_LIMIT_RPT_IDE (0U)
#define ACCEL_CMD_LIMIT_RPT_DLC (4U)
#define ACCEL_CMD_LIMIT_RPT_CANID (0x201)
// signal: @ACCEL_CMD_LIMIT_ro
#define PACMOD13_ACCEL_CMD_LIMIT_ro_CovFactor (0.001)
#define PACMOD13_ACCEL_CMD_LIMIT_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_ACCEL_CMD_LIMIT_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @LIMITED_ACCEL_CMD_ro
#define PACMOD13_LIMITED_ACCEL_CMD_ro_CovFactor (0.001)
#define PACMOD13_LIMITED_ACCEL_CMD_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_LIMITED_ACCEL_CMD_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t ACCEL_CMD_LIMIT_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ACCEL_CMD_LIMIT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t LIMITED_ACCEL_CMD_ro;             //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LIMITED_ACCEL_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint16_t ACCEL_CMD_LIMIT_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ACCEL_CMD_LIMIT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t LIMITED_ACCEL_CMD_ro;             //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LIMITED_ACCEL_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ACCEL_CMD_LIMIT_RPT_t;

// def @BRAKE_RPT CAN Message (516  0x204)
#define BRAKE_RPT_IDE (0U)
#define BRAKE_RPT_DLC (8U)
#define BRAKE_RPT_CANID (0x204)

// Value tables for @ENABLED signal

#ifndef ENABLED_BRAKE_RPT_FALSE
#define ENABLED_BRAKE_RPT_FALSE (0)
#endif

#ifndef ENABLED_BRAKE_RPT_TRUE
#define ENABLED_BRAKE_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_BRAKE_RPT_FALSE
#define OVERRIDE_ACTIVE_BRAKE_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_BRAKE_RPT_TRUE
#define OVERRIDE_ACTIVE_BRAKE_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_BRAKE_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_BRAKE_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_BRAKE_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_BRAKE_RPT_FAULT
#define INPUT_OUTPUT_FAULT_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_BRAKE_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_BRAKE_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_BRAKE_RPT_NO_FAULT
#define PACMOD_FAULT_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_BRAKE_RPT_FAULT
#define PACMOD_FAULT_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_BRAKE_RPT_NO_FAULT
#define VEHICLE_FAULT_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_BRAKE_RPT_FAULT
#define VEHICLE_FAULT_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_BRAKE_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_BRAKE_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_BRAKE_RPT_TIMEOUT
#define COMMAND_TIMEOUT_BRAKE_RPT_TIMEOUT (1)
#endif


// Value tables for @CONTROL_STATUS signal

#ifndef CONTROL_STATUS_BRAKE_RPT_SAFE
#define CONTROL_STATUS_BRAKE_RPT_SAFE (0)
#endif

#ifndef CONTROL_STATUS_BRAKE_RPT_AVAILABLE
#define CONTROL_STATUS_BRAKE_RPT_AVAILABLE (1)
#endif


// Value tables for @PERFORMANCE_STATUS signal

#ifndef PERFORMANCE_STATUS_BRAKE_RPT_NONE
#define PERFORMANCE_STATUS_BRAKE_RPT_NONE (0)
#endif

#ifndef PERFORMANCE_STATUS_BRAKE_RPT_CMD_TRACKING_FAILURE
#define PERFORMANCE_STATUS_BRAKE_RPT_CMD_TRACKING_FAILURE (1)
#endif

#ifndef PERFORMANCE_STATUS_BRAKE_RPT_APPOACHING_OPERATIONAL_LIMITS
#define PERFORMANCE_STATUS_BRAKE_RPT_APPOACHING_OPERATIONAL_LIMITS (2)
#endif

#ifndef PERFORMANCE_STATUS_BRAKE_RPT_LIMITING_ACTIVE
#define PERFORMANCE_STATUS_BRAKE_RPT_LIMITING_ACTIVE (3)
#endif

#ifndef PERFORMANCE_STATUS_BRAKE_RPT_LIMITING_IMMINENT
#define PERFORMANCE_STATUS_BRAKE_RPT_LIMITING_IMMINENT (4)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  uint16_t MANUAL_INPUT_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t COMMANDED_VALUE_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t OUTPUT_VALUE_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS : 1;                //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS : 2;           //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS : 3;            //      Bits= 3

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  uint16_t MANUAL_INPUT_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t COMMANDED_VALUE_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t OUTPUT_VALUE_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS;                    //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS;               //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS;                //      Bits= 3

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_RPT_t;

// def @BRAKE_CMD_LIMIT_RPT CAN Message (517  0x205)
#define BRAKE_CMD_LIMIT_RPT_IDE (0U)
#define BRAKE_CMD_LIMIT_RPT_DLC (4U)
#define BRAKE_CMD_LIMIT_RPT_CANID (0x205)
// signal: @BRAKE_CMD_LIMIT_ro
#define PACMOD13_BRAKE_CMD_LIMIT_ro_CovFactor (0.001)
#define PACMOD13_BRAKE_CMD_LIMIT_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_BRAKE_CMD_LIMIT_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @LIMITED_BRAKE_CMD_ro
#define PACMOD13_LIMITED_BRAKE_CMD_ro_CovFactor (0.001)
#define PACMOD13_LIMITED_BRAKE_CMD_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_LIMITED_BRAKE_CMD_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t BRAKE_CMD_LIMIT_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_CMD_LIMIT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t LIMITED_BRAKE_CMD_ro;             //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LIMITED_BRAKE_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint16_t BRAKE_CMD_LIMIT_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_CMD_LIMIT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t LIMITED_BRAKE_CMD_ro;             //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LIMITED_BRAKE_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_CMD_LIMIT_RPT_t;

// def @BRAKE_RPT_2 CAN Message (518  0x206)
#define BRAKE_RPT_2_IDE (0U)
#define BRAKE_RPT_2_DLC (8U)
#define BRAKE_RPT_2_CANID (0x206)

// Value tables for @ENABLED signal

#ifndef ENABLED_BRAKE_RPT_2_FALSE
#define ENABLED_BRAKE_RPT_2_FALSE (0)
#endif

#ifndef ENABLED_BRAKE_RPT_2_TRUE
#define ENABLED_BRAKE_RPT_2_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_BRAKE_RPT_2_FALSE
#define OVERRIDE_ACTIVE_BRAKE_RPT_2_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_BRAKE_RPT_2_TRUE
#define OVERRIDE_ACTIVE_BRAKE_RPT_2_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_BRAKE_RPT_2_NO_FAULT
#define COMMAND_OUTPUT_FAULT_BRAKE_RPT_2_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_BRAKE_RPT_2_FAULT
#define COMMAND_OUTPUT_FAULT_BRAKE_RPT_2_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_BRAKE_RPT_2_NO_FAULT
#define INPUT_OUTPUT_FAULT_BRAKE_RPT_2_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_BRAKE_RPT_2_FAULT
#define INPUT_OUTPUT_FAULT_BRAKE_RPT_2_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_BRAKE_RPT_2_NO_FAULT
#define OUTPUT_REPORTED_FAULT_BRAKE_RPT_2_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_BRAKE_RPT_2_FAULT
#define OUTPUT_REPORTED_FAULT_BRAKE_RPT_2_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_BRAKE_RPT_2_NO_FAULT
#define PACMOD_FAULT_BRAKE_RPT_2_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_BRAKE_RPT_2_FAULT
#define PACMOD_FAULT_BRAKE_RPT_2_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_BRAKE_RPT_2_NO_FAULT
#define VEHICLE_FAULT_BRAKE_RPT_2_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_BRAKE_RPT_2_FAULT
#define VEHICLE_FAULT_BRAKE_RPT_2_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_BRAKE_RPT_2_NO_TIMEOUT
#define COMMAND_TIMEOUT_BRAKE_RPT_2_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_BRAKE_RPT_2_TIMEOUT
#define COMMAND_TIMEOUT_BRAKE_RPT_2_TIMEOUT (1)
#endif


// Value tables for @CONTROL_STATUS signal

#ifndef CONTROL_STATUS_BRAKE_RPT_2_SAFE
#define CONTROL_STATUS_BRAKE_RPT_2_SAFE (0)
#endif

#ifndef CONTROL_STATUS_BRAKE_RPT_2_AVAILABLE
#define CONTROL_STATUS_BRAKE_RPT_2_AVAILABLE (1)
#endif


// Value tables for @PERFORMANCE_STATUS signal

#ifndef PERFORMANCE_STATUS_BRAKE_RPT_2_NONE
#define PERFORMANCE_STATUS_BRAKE_RPT_2_NONE (0)
#endif

#ifndef PERFORMANCE_STATUS_BRAKE_RPT_2_CMD_TRACKING_FAILURE
#define PERFORMANCE_STATUS_BRAKE_RPT_2_CMD_TRACKING_FAILURE (1)
#endif

#ifndef PERFORMANCE_STATUS_BRAKE_RPT_2_APPOACHING_OPERATIONAL_LIMITS
#define PERFORMANCE_STATUS_BRAKE_RPT_2_APPOACHING_OPERATIONAL_LIMITS (2)
#endif

#ifndef PERFORMANCE_STATUS_BRAKE_RPT_2_LIMITING_ACTIVE
#define PERFORMANCE_STATUS_BRAKE_RPT_2_LIMITING_ACTIVE (3)
#endif

#ifndef PERFORMANCE_STATUS_BRAKE_RPT_2_LIMITING_IMMINENT
#define PERFORMANCE_STATUS_BRAKE_RPT_2_LIMITING_IMMINENT (4)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  uint16_t MANUAL_INPUT_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t COMMANDED_VALUE_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t OUTPUT_VALUE_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS : 1;                //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS : 2;           //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS : 3;            //      Bits= 3

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  uint16_t MANUAL_INPUT_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t COMMANDED_VALUE_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t OUTPUT_VALUE_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS;                    //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS;               //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS;                //      Bits= 3

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_RPT_2_t;

// def @CRUISE_CONTROL_BUTTONS_RPT CAN Message (520  0x208)
#define CRUISE_CONTROL_BUTTONS_RPT_IDE (0U)
#define CRUISE_CONTROL_BUTTONS_RPT_DLC (4U)
#define CRUISE_CONTROL_BUTTONS_RPT_CANID (0x208)
#define CRUISE_CONTROL_BUTTONS_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_CRUISE_CONTROL_BUTTONS_RPT_FALSE
#define ENABLED_CRUISE_CONTROL_BUTTONS_RPT_FALSE (0)
#endif

#ifndef ENABLED_CRUISE_CONTROL_BUTTONS_RPT_TRUE
#define ENABLED_CRUISE_CONTROL_BUTTONS_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_CRUISE_CONTROL_BUTTONS_RPT_FALSE
#define OVERRIDE_ACTIVE_CRUISE_CONTROL_BUTTONS_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_CRUISE_CONTROL_BUTTONS_RPT_TRUE
#define OVERRIDE_ACTIVE_CRUISE_CONTROL_BUTTONS_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_CRUISE_CONTROL_BUTTONS_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_CRUISE_CONTROL_BUTTONS_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_CRUISE_CONTROL_BUTTONS_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_CRUISE_CONTROL_BUTTONS_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_CRUISE_CONTROL_BUTTONS_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_CRUISE_CONTROL_BUTTONS_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_CRUISE_CONTROL_BUTTONS_RPT_FAULT
#define INPUT_OUTPUT_FAULT_CRUISE_CONTROL_BUTTONS_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_CRUISE_CONTROL_BUTTONS_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_CRUISE_CONTROL_BUTTONS_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_CRUISE_CONTROL_BUTTONS_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_CRUISE_CONTROL_BUTTONS_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_CRUISE_CONTROL_BUTTONS_RPT_NO_FAULT
#define PACMOD_FAULT_CRUISE_CONTROL_BUTTONS_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_CRUISE_CONTROL_BUTTONS_RPT_FAULT
#define PACMOD_FAULT_CRUISE_CONTROL_BUTTONS_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_CRUISE_CONTROL_BUTTONS_RPT_NO_FAULT
#define VEHICLE_FAULT_CRUISE_CONTROL_BUTTONS_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_CRUISE_CONTROL_BUTTONS_RPT_FAULT
#define VEHICLE_FAULT_CRUISE_CONTROL_BUTTONS_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_CRUISE_CONTROL_BUTTONS_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_CRUISE_CONTROL_BUTTONS_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_CRUISE_CONTROL_BUTTONS_RPT_TIMEOUT
#define COMMAND_TIMEOUT_CRUISE_CONTROL_BUTTONS_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_LIM
#define MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_LIM (7)
#endif

#ifndef MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ON_OFF
#define MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ON_OFF (6)
#endif

#ifndef MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_RES_INC
#define MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_RES_INC (5)
#endif

#ifndef MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_SET_DEC
#define MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_SET_DEC (4)
#endif

#ifndef MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_CLOSER
#define MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_CLOSER (3)
#endif

#ifndef MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_FURTHER
#define MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_FURTHER (2)
#endif

#ifndef MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_CNCL
#define MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_CNCL (1)
#endif

#ifndef MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_NONE
#define MANUAL_INPUT_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_NONE (0)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_LIM
#define COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_LIM (7)
#endif

#ifndef COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ON_OFF
#define COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ON_OFF (6)
#endif

#ifndef COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_RES_INC
#define COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_RES_INC (5)
#endif

#ifndef COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_SET_DEC
#define COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_SET_DEC (4)
#endif

#ifndef COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_CLOSER
#define COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_CLOSER (3)
#endif

#ifndef COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_FURTHER
#define COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_FURTHER (2)
#endif

#ifndef COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_CNCL
#define COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_CNCL (1)
#endif

#ifndef COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_NONE
#define COMMANDED_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_NONE (0)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_LIM
#define OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_LIM (7)
#endif

#ifndef OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ON_OFF
#define OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ON_OFF (6)
#endif

#ifndef OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_RES_INC
#define OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_RES_INC (5)
#endif

#ifndef OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_SET_DEC
#define OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_SET_DEC (4)
#endif

#ifndef OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_CLOSER
#define OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_CLOSER (3)
#endif

#ifndef OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_FURTHER
#define OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_ACC_FURTHER (2)
#endif

#ifndef OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_CNCL
#define OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_CNCL (1)
#endif

#ifndef OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_NONE
#define OUTPUT_VALUE_CRUISE_CONTROL_BUTTONS_RPT_CRUISE_CONTROL_NONE (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  // NONE = no button pressed, CNCL = Cancel, FURTHER* or CLOSER* = Change follow distance, SET_DEC* = set/decrement, RES_INC* = resume/increment, ON_OFF = Cruise On/Off, LIM* = Speed limiter On/Off. *Exact function varies across vehicles - See platform guide.
  //  7 : "CRUISE_CONTROL_LIM"
  //  6 : "CRUISE_CONTROL_ON_OFF"
  //  5 : "CRUISE_CONTROL_RES_INC"
  //  4 : "CRUISE_CONTROL_SET_DEC"
  //  3 : "CRUISE_CONTROL_ACC_CLOSER"
  //  2 : "CRUISE_CONTROL_ACC_FURTHER"
  //  1 : "CRUISE_CONTROL_CNCL"
  //  0 : "CRUISE_CONTROL_NONE"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  // NONE = no button pressed, CNCL = Cancel, FURTHER* or CLOSER* = Change follow distance, SET_DEC* = set/decrement, RES_INC* = resume/increment, ON_OFF = Cruise On/Off, LIM* = Speed limiter On/Off. *Exact function varies across vehicles - See platform guide.
  //  7 : "CRUISE_CONTROL_LIM"
  //  6 : "CRUISE_CONTROL_ON_OFF"
  //  5 : "CRUISE_CONTROL_RES_INC"
  //  4 : "CRUISE_CONTROL_SET_DEC"
  //  3 : "CRUISE_CONTROL_ACC_CLOSER"
  //  2 : "CRUISE_CONTROL_ACC_FURTHER"
  //  1 : "CRUISE_CONTROL_CNCL"
  //  0 : "CRUISE_CONTROL_NONE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  // NONE = no button pressed, CNCL = Cancel, FURTHER* or CLOSER* = Change follow distance, SET_DEC* = set/decrement, RES_INC* = resume/increment, ON_OFF = Cruise On/Off, LIM* = Speed limiter On/Off. *Exact function varies across vehicles - See platform guide.
  //  7 : "CRUISE_CONTROL_LIM"
  //  6 : "CRUISE_CONTROL_ON_OFF"
  //  5 : "CRUISE_CONTROL_RES_INC"
  //  4 : "CRUISE_CONTROL_SET_DEC"
  //  3 : "CRUISE_CONTROL_ACC_CLOSER"
  //  2 : "CRUISE_CONTROL_ACC_FURTHER"
  //  1 : "CRUISE_CONTROL_CNCL"
  //  0 : "CRUISE_CONTROL_NONE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  // NONE = no button pressed, CNCL = Cancel, FURTHER* or CLOSER* = Change follow distance, SET_DEC* = set/decrement, RES_INC* = resume/increment, ON_OFF = Cruise On/Off, LIM* = Speed limiter On/Off. *Exact function varies across vehicles - See platform guide.
  //  7 : "CRUISE_CONTROL_LIM"
  //  6 : "CRUISE_CONTROL_ON_OFF"
  //  5 : "CRUISE_CONTROL_RES_INC"
  //  4 : "CRUISE_CONTROL_SET_DEC"
  //  3 : "CRUISE_CONTROL_ACC_CLOSER"
  //  2 : "CRUISE_CONTROL_ACC_FURTHER"
  //  1 : "CRUISE_CONTROL_CNCL"
  //  0 : "CRUISE_CONTROL_NONE"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  // NONE = no button pressed, CNCL = Cancel, FURTHER* or CLOSER* = Change follow distance, SET_DEC* = set/decrement, RES_INC* = resume/increment, ON_OFF = Cruise On/Off, LIM* = Speed limiter On/Off. *Exact function varies across vehicles - See platform guide.
  //  7 : "CRUISE_CONTROL_LIM"
  //  6 : "CRUISE_CONTROL_ON_OFF"
  //  5 : "CRUISE_CONTROL_RES_INC"
  //  4 : "CRUISE_CONTROL_SET_DEC"
  //  3 : "CRUISE_CONTROL_ACC_CLOSER"
  //  2 : "CRUISE_CONTROL_ACC_FURTHER"
  //  1 : "CRUISE_CONTROL_CNCL"
  //  0 : "CRUISE_CONTROL_NONE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  // NONE = no button pressed, CNCL = Cancel, FURTHER* or CLOSER* = Change follow distance, SET_DEC* = set/decrement, RES_INC* = resume/increment, ON_OFF = Cruise On/Off, LIM* = Speed limiter On/Off. *Exact function varies across vehicles - See platform guide.
  //  7 : "CRUISE_CONTROL_LIM"
  //  6 : "CRUISE_CONTROL_ON_OFF"
  //  5 : "CRUISE_CONTROL_RES_INC"
  //  4 : "CRUISE_CONTROL_SET_DEC"
  //  3 : "CRUISE_CONTROL_ACC_CLOSER"
  //  2 : "CRUISE_CONTROL_ACC_FURTHER"
  //  1 : "CRUISE_CONTROL_CNCL"
  //  0 : "CRUISE_CONTROL_NONE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} CRUISE_CONTROL_BUTTONS_RPT_t;

// def @DASH_CONTROLS_LEFT_RPT CAN Message (524  0x20c)
#define DASH_CONTROLS_LEFT_RPT_IDE (0U)
#define DASH_CONTROLS_LEFT_RPT_DLC (4U)
#define DASH_CONTROLS_LEFT_RPT_CANID (0x20c)
#define DASH_CONTROLS_LEFT_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_DASH_CONTROLS_LEFT_RPT_FALSE
#define ENABLED_DASH_CONTROLS_LEFT_RPT_FALSE (0)
#endif

#ifndef ENABLED_DASH_CONTROLS_LEFT_RPT_TRUE
#define ENABLED_DASH_CONTROLS_LEFT_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_DASH_CONTROLS_LEFT_RPT_FALSE
#define OVERRIDE_ACTIVE_DASH_CONTROLS_LEFT_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_DASH_CONTROLS_LEFT_RPT_TRUE
#define OVERRIDE_ACTIVE_DASH_CONTROLS_LEFT_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_DASH_CONTROLS_LEFT_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_DASH_CONTROLS_LEFT_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_DASH_CONTROLS_LEFT_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_DASH_CONTROLS_LEFT_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_DASH_CONTROLS_LEFT_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_DASH_CONTROLS_LEFT_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_DASH_CONTROLS_LEFT_RPT_FAULT
#define INPUT_OUTPUT_FAULT_DASH_CONTROLS_LEFT_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_DASH_CONTROLS_LEFT_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_DASH_CONTROLS_LEFT_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_DASH_CONTROLS_LEFT_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_DASH_CONTROLS_LEFT_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_DASH_CONTROLS_LEFT_RPT_NO_FAULT
#define PACMOD_FAULT_DASH_CONTROLS_LEFT_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_DASH_CONTROLS_LEFT_RPT_FAULT
#define PACMOD_FAULT_DASH_CONTROLS_LEFT_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_DASH_CONTROLS_LEFT_RPT_NO_FAULT
#define VEHICLE_FAULT_DASH_CONTROLS_LEFT_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_DASH_CONTROLS_LEFT_RPT_FAULT
#define VEHICLE_FAULT_DASH_CONTROLS_LEFT_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_DASH_CONTROLS_LEFT_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_DASH_CONTROLS_LEFT_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_DASH_CONTROLS_LEFT_RPT_TIMEOUT
#define COMMAND_TIMEOUT_DASH_CONTROLS_LEFT_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_DOWN
#define MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_DOWN (5)
#endif

#ifndef MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_UP
#define MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_UP (4)
#endif

#ifndef MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_RIGHT
#define MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_RIGHT (3)
#endif

#ifndef MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_LEFT
#define MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_LEFT (2)
#endif

#ifndef MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_OK
#define MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_OK (1)
#endif

#ifndef MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_NONE
#define MANUAL_INPUT_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_NONE (0)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_DOWN
#define COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_DOWN (5)
#endif

#ifndef COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_UP
#define COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_UP (4)
#endif

#ifndef COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_RIGHT
#define COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_RIGHT (3)
#endif

#ifndef COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_LEFT
#define COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_LEFT (2)
#endif

#ifndef COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_OK
#define COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_OK (1)
#endif

#ifndef COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_NONE
#define COMMANDED_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_NONE (0)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_DOWN
#define OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_DOWN (5)
#endif

#ifndef OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_UP
#define OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_UP (4)
#endif

#ifndef OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_RIGHT
#define OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_RIGHT (3)
#endif

#ifndef OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_LEFT
#define OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_LEFT (2)
#endif

#ifndef OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_OK
#define OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_OK (1)
#endif

#ifndef OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_NONE
#define OUTPUT_VALUE_DASH_CONTROLS_LEFT_RPT_DASH_CONTROL_NONE (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} DASH_CONTROLS_LEFT_RPT_t;

// def @DASH_CONTROLS_RIGHT_RPT CAN Message (528  0x210)
#define DASH_CONTROLS_RIGHT_RPT_IDE (0U)
#define DASH_CONTROLS_RIGHT_RPT_DLC (4U)
#define DASH_CONTROLS_RIGHT_RPT_CANID (0x210)
#define DASH_CONTROLS_RIGHT_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_DASH_CONTROLS_RIGHT_RPT_FALSE
#define ENABLED_DASH_CONTROLS_RIGHT_RPT_FALSE (0)
#endif

#ifndef ENABLED_DASH_CONTROLS_RIGHT_RPT_TRUE
#define ENABLED_DASH_CONTROLS_RIGHT_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_DASH_CONTROLS_RIGHT_RPT_FALSE
#define OVERRIDE_ACTIVE_DASH_CONTROLS_RIGHT_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_DASH_CONTROLS_RIGHT_RPT_TRUE
#define OVERRIDE_ACTIVE_DASH_CONTROLS_RIGHT_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_DASH_CONTROLS_RIGHT_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_DASH_CONTROLS_RIGHT_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_DASH_CONTROLS_RIGHT_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_DASH_CONTROLS_RIGHT_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_DASH_CONTROLS_RIGHT_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_DASH_CONTROLS_RIGHT_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_DASH_CONTROLS_RIGHT_RPT_FAULT
#define INPUT_OUTPUT_FAULT_DASH_CONTROLS_RIGHT_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_DASH_CONTROLS_RIGHT_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_DASH_CONTROLS_RIGHT_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_DASH_CONTROLS_RIGHT_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_DASH_CONTROLS_RIGHT_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_DASH_CONTROLS_RIGHT_RPT_NO_FAULT
#define PACMOD_FAULT_DASH_CONTROLS_RIGHT_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_DASH_CONTROLS_RIGHT_RPT_FAULT
#define PACMOD_FAULT_DASH_CONTROLS_RIGHT_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_DASH_CONTROLS_RIGHT_RPT_NO_FAULT
#define VEHICLE_FAULT_DASH_CONTROLS_RIGHT_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_DASH_CONTROLS_RIGHT_RPT_FAULT
#define VEHICLE_FAULT_DASH_CONTROLS_RIGHT_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_DASH_CONTROLS_RIGHT_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_DASH_CONTROLS_RIGHT_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_DASH_CONTROLS_RIGHT_RPT_TIMEOUT
#define COMMAND_TIMEOUT_DASH_CONTROLS_RIGHT_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_DOWN
#define MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_DOWN (5)
#endif

#ifndef MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_UP
#define MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_UP (4)
#endif

#ifndef MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_RIGHT
#define MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_RIGHT (3)
#endif

#ifndef MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_LEFT
#define MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_LEFT (2)
#endif

#ifndef MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_OK
#define MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_OK (1)
#endif

#ifndef MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_NONE
#define MANUAL_INPUT_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_NONE (0)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_DOWN
#define COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_DOWN (5)
#endif

#ifndef COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_UP
#define COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_UP (4)
#endif

#ifndef COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_RIGHT
#define COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_RIGHT (3)
#endif

#ifndef COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_LEFT
#define COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_LEFT (2)
#endif

#ifndef COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_OK
#define COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_OK (1)
#endif

#ifndef COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_NONE
#define COMMANDED_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_NONE (0)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_DOWN
#define OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_DOWN (5)
#endif

#ifndef OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_UP
#define OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_UP (4)
#endif

#ifndef OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_RIGHT
#define OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_RIGHT (3)
#endif

#ifndef OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_LEFT
#define OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_LEFT (2)
#endif

#ifndef OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_OK
#define OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_OK (1)
#endif

#ifndef OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_NONE
#define OUTPUT_VALUE_DASH_CONTROLS_RIGHT_RPT_DASH_CONTROL_NONE (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  5 : "DASH_CONTROL_DOWN"
  //  4 : "DASH_CONTROL_UP"
  //  3 : "DASH_CONTROL_RIGHT"
  //  2 : "DASH_CONTROL_LEFT"
  //  1 : "DASH_CONTROL_OK"
  //  0 : "DASH_CONTROL_NONE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} DASH_CONTROLS_RIGHT_RPT_t;

// def @HAZARD_LIGHTS_RPT CAN Message (532  0x214)
#define HAZARD_LIGHTS_RPT_IDE (0U)
#define HAZARD_LIGHTS_RPT_DLC (4U)
#define HAZARD_LIGHTS_RPT_CANID (0x214)
#define HAZARD_LIGHTS_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_HAZARD_LIGHTS_RPT_FALSE
#define ENABLED_HAZARD_LIGHTS_RPT_FALSE (0)
#endif

#ifndef ENABLED_HAZARD_LIGHTS_RPT_TRUE
#define ENABLED_HAZARD_LIGHTS_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_HAZARD_LIGHTS_RPT_FALSE
#define OVERRIDE_ACTIVE_HAZARD_LIGHTS_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_HAZARD_LIGHTS_RPT_TRUE
#define OVERRIDE_ACTIVE_HAZARD_LIGHTS_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_HAZARD_LIGHTS_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_HAZARD_LIGHTS_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_HAZARD_LIGHTS_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_HAZARD_LIGHTS_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_HAZARD_LIGHTS_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_HAZARD_LIGHTS_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_HAZARD_LIGHTS_RPT_FAULT
#define INPUT_OUTPUT_FAULT_HAZARD_LIGHTS_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_HAZARD_LIGHTS_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_HAZARD_LIGHTS_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_HAZARD_LIGHTS_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_HAZARD_LIGHTS_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_HAZARD_LIGHTS_RPT_NO_FAULT
#define PACMOD_FAULT_HAZARD_LIGHTS_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_HAZARD_LIGHTS_RPT_FAULT
#define PACMOD_FAULT_HAZARD_LIGHTS_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_HAZARD_LIGHTS_RPT_NO_FAULT
#define VEHICLE_FAULT_HAZARD_LIGHTS_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_HAZARD_LIGHTS_RPT_FAULT
#define VEHICLE_FAULT_HAZARD_LIGHTS_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_HAZARD_LIGHTS_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_HAZARD_LIGHTS_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_HAZARD_LIGHTS_RPT_TIMEOUT
#define COMMAND_TIMEOUT_HAZARD_LIGHTS_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_HAZARD_LIGHTS_RPT_OFFNOT_PRESSED
#define MANUAL_INPUT_HAZARD_LIGHTS_RPT_OFFNOT_PRESSED (0)
#endif

#ifndef MANUAL_INPUT_HAZARD_LIGHTS_RPT_ONPRESSED
#define MANUAL_INPUT_HAZARD_LIGHTS_RPT_ONPRESSED (1)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_HAZARD_LIGHTS_RPT_OFF
#define COMMANDED_VALUE_HAZARD_LIGHTS_RPT_OFF (0)
#endif

#ifndef COMMANDED_VALUE_HAZARD_LIGHTS_RPT_ON
#define COMMANDED_VALUE_HAZARD_LIGHTS_RPT_ON (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_HAZARD_LIGHTS_RPT_OFFNOT_PRESSED
#define OUTPUT_VALUE_HAZARD_LIGHTS_RPT_OFFNOT_PRESSED (0)
#endif

#ifndef OUTPUT_VALUE_HAZARD_LIGHTS_RPT_ONPRESSED
#define OUTPUT_VALUE_HAZARD_LIGHTS_RPT_ONPRESSED (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  // Platforms vary on use of latched or momentary interface, see platform user guide.
  //  0 : "OFF/NOT_PRESSED"
  //  1 : "ON/PRESSED"
  uint8_t MANUAL_INPUT : 1;                  //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE : 1;               //      Bits= 1

  // Platforms vary on use of latched or momentary interface, see platform user guide.
  //  0 : "OFF/NOT_PRESSED"
  //  1 : "ON/PRESSED"
  uint8_t OUTPUT_VALUE : 1;                  //      Bits= 1

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  // Platforms vary on use of latched or momentary interface, see platform user guide.
  //  0 : "OFF/NOT_PRESSED"
  //  1 : "ON/PRESSED"
  uint8_t MANUAL_INPUT;                      //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 1

  // Platforms vary on use of latched or momentary interface, see platform user guide.
  //  0 : "OFF/NOT_PRESSED"
  //  1 : "ON/PRESSED"
  uint8_t OUTPUT_VALUE;                      //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} HAZARD_LIGHTS_RPT_t;

// def @HEADLIGHT_RPT CAN Message (536  0x218)
#define HEADLIGHT_RPT_IDE (0U)
#define HEADLIGHT_RPT_DLC (4U)
#define HEADLIGHT_RPT_CANID (0x218)
#define HEADLIGHT_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_HEADLIGHT_RPT_FALSE
#define ENABLED_HEADLIGHT_RPT_FALSE (0)
#endif

#ifndef ENABLED_HEADLIGHT_RPT_TRUE
#define ENABLED_HEADLIGHT_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_HEADLIGHT_RPT_FALSE
#define OVERRIDE_ACTIVE_HEADLIGHT_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_HEADLIGHT_RPT_TRUE
#define OVERRIDE_ACTIVE_HEADLIGHT_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_HEADLIGHT_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_HEADLIGHT_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_HEADLIGHT_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_HEADLIGHT_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_HEADLIGHT_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_HEADLIGHT_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_HEADLIGHT_RPT_FAULT
#define INPUT_OUTPUT_FAULT_HEADLIGHT_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_HEADLIGHT_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_HEADLIGHT_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_HEADLIGHT_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_HEADLIGHT_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_HEADLIGHT_RPT_NO_FAULT
#define PACMOD_FAULT_HEADLIGHT_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_HEADLIGHT_RPT_FAULT
#define PACMOD_FAULT_HEADLIGHT_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_HEADLIGHT_RPT_NO_FAULT
#define VEHICLE_FAULT_HEADLIGHT_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_HEADLIGHT_RPT_FAULT
#define VEHICLE_FAULT_HEADLIGHT_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_HEADLIGHT_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_HEADLIGHT_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_HEADLIGHT_RPT_TIMEOUT
#define COMMAND_TIMEOUT_HEADLIGHT_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_HEADLIGHT_RPT_HIGH_BEAMS
#define MANUAL_INPUT_HEADLIGHT_RPT_HIGH_BEAMS (2)
#endif

#ifndef MANUAL_INPUT_HEADLIGHT_RPT_LOW_BEAMS
#define MANUAL_INPUT_HEADLIGHT_RPT_LOW_BEAMS (1)
#endif

#ifndef MANUAL_INPUT_HEADLIGHT_RPT_HEADLIGHTS_OFF
#define MANUAL_INPUT_HEADLIGHT_RPT_HEADLIGHTS_OFF (0)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_HEADLIGHT_RPT_HIGH_BEAMS
#define COMMANDED_VALUE_HEADLIGHT_RPT_HIGH_BEAMS (2)
#endif

#ifndef COMMANDED_VALUE_HEADLIGHT_RPT_LOW_BEAMS
#define COMMANDED_VALUE_HEADLIGHT_RPT_LOW_BEAMS (1)
#endif

#ifndef COMMANDED_VALUE_HEADLIGHT_RPT_HEADLIGHTS_OFF
#define COMMANDED_VALUE_HEADLIGHT_RPT_HEADLIGHTS_OFF (0)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_HEADLIGHT_RPT_HIGH_BEAMS
#define OUTPUT_VALUE_HEADLIGHT_RPT_HIGH_BEAMS (2)
#endif

#ifndef OUTPUT_VALUE_HEADLIGHT_RPT_LOW_BEAMS
#define OUTPUT_VALUE_HEADLIGHT_RPT_LOW_BEAMS (1)
#endif

#ifndef OUTPUT_VALUE_HEADLIGHT_RPT_HEADLIGHTS_OFF
#define OUTPUT_VALUE_HEADLIGHT_RPT_HEADLIGHTS_OFF (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  2 : "HIGH_BEAMS"
  //  1 : "LOW_BEAMS"
  //  0 : "HEADLIGHTS_OFF"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  2 : "HIGH_BEAMS"
  //  1 : "LOW_BEAMS"
  //  0 : "HEADLIGHTS_OFF"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  2 : "HIGH_BEAMS"
  //  1 : "LOW_BEAMS"
  //  0 : "HEADLIGHTS_OFF"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  2 : "HIGH_BEAMS"
  //  1 : "LOW_BEAMS"
  //  0 : "HEADLIGHTS_OFF"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  2 : "HIGH_BEAMS"
  //  1 : "LOW_BEAMS"
  //  0 : "HEADLIGHTS_OFF"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  2 : "HIGH_BEAMS"
  //  1 : "LOW_BEAMS"
  //  0 : "HEADLIGHTS_OFF"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} HEADLIGHT_RPT_t;

// def @HORN_RPT CAN Message (540  0x21c)
#define HORN_RPT_IDE (0U)
#define HORN_RPT_DLC (4U)
#define HORN_RPT_CANID (0x21c)
#define HORN_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_HORN_RPT_FALSE
#define ENABLED_HORN_RPT_FALSE (0)
#endif

#ifndef ENABLED_HORN_RPT_TRUE
#define ENABLED_HORN_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_HORN_RPT_FALSE
#define OVERRIDE_ACTIVE_HORN_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_HORN_RPT_TRUE
#define OVERRIDE_ACTIVE_HORN_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_HORN_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_HORN_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_HORN_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_HORN_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_HORN_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_HORN_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_HORN_RPT_FAULT
#define INPUT_OUTPUT_FAULT_HORN_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_HORN_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_HORN_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_HORN_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_HORN_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_HORN_RPT_NO_FAULT
#define PACMOD_FAULT_HORN_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_HORN_RPT_FAULT
#define PACMOD_FAULT_HORN_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_HORN_RPT_NO_FAULT
#define VEHICLE_FAULT_HORN_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_HORN_RPT_FAULT
#define VEHICLE_FAULT_HORN_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_HORN_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_HORN_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_HORN_RPT_TIMEOUT
#define COMMAND_TIMEOUT_HORN_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_HORN_RPT_OFF
#define MANUAL_INPUT_HORN_RPT_OFF (0)
#endif

#ifndef MANUAL_INPUT_HORN_RPT_ON
#define MANUAL_INPUT_HORN_RPT_ON (1)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_HORN_RPT_OFF
#define COMMANDED_VALUE_HORN_RPT_OFF (0)
#endif

#ifndef COMMANDED_VALUE_HORN_RPT_ON
#define COMMANDED_VALUE_HORN_RPT_ON (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_HORN_RPT_OFF
#define OUTPUT_VALUE_HORN_RPT_OFF (0)
#endif

#ifndef OUTPUT_VALUE_HORN_RPT_ON
#define OUTPUT_VALUE_HORN_RPT_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} HORN_RPT_t;

// def @MEDIA_CONTROLS_RPT CAN Message (544  0x220)
#define MEDIA_CONTROLS_RPT_IDE (0U)
#define MEDIA_CONTROLS_RPT_DLC (4U)
#define MEDIA_CONTROLS_RPT_CANID (0x220)
#define MEDIA_CONTROLS_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_MEDIA_CONTROLS_RPT_FALSE
#define ENABLED_MEDIA_CONTROLS_RPT_FALSE (0)
#endif

#ifndef ENABLED_MEDIA_CONTROLS_RPT_TRUE
#define ENABLED_MEDIA_CONTROLS_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_MEDIA_CONTROLS_RPT_FALSE
#define OVERRIDE_ACTIVE_MEDIA_CONTROLS_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_MEDIA_CONTROLS_RPT_TRUE
#define OVERRIDE_ACTIVE_MEDIA_CONTROLS_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_MEDIA_CONTROLS_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_MEDIA_CONTROLS_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_MEDIA_CONTROLS_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_MEDIA_CONTROLS_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_MEDIA_CONTROLS_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_MEDIA_CONTROLS_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_MEDIA_CONTROLS_RPT_FAULT
#define INPUT_OUTPUT_FAULT_MEDIA_CONTROLS_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_MEDIA_CONTROLS_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_MEDIA_CONTROLS_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_MEDIA_CONTROLS_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_MEDIA_CONTROLS_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_MEDIA_CONTROLS_RPT_NO_FAULT
#define PACMOD_FAULT_MEDIA_CONTROLS_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_MEDIA_CONTROLS_RPT_FAULT
#define PACMOD_FAULT_MEDIA_CONTROLS_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_MEDIA_CONTROLS_RPT_NO_FAULT
#define VEHICLE_FAULT_MEDIA_CONTROLS_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_MEDIA_CONTROLS_RPT_FAULT
#define VEHICLE_FAULT_MEDIA_CONTROLS_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_MEDIA_CONTROLS_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_MEDIA_CONTROLS_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_MEDIA_CONTROLS_RPT_TIMEOUT
#define COMMAND_TIMEOUT_MEDIA_CONTROLS_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_DOWN
#define MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_DOWN (6)
#endif

#ifndef MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_UP
#define MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_UP (5)
#endif

#ifndef MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP
#define MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP (4)
#endif

#ifndef MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_PREV_TRACK_ANSWER
#define MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_PREV_TRACK_ANSWER (3)
#endif

#ifndef MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_MUTE
#define MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_MUTE (2)
#endif

#ifndef MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOICE_COMMAND
#define MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOICE_COMMAND (1)
#endif

#ifndef MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NONE
#define MANUAL_INPUT_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NONE (0)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_DOWN
#define COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_DOWN (6)
#endif

#ifndef COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_UP
#define COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_UP (5)
#endif

#ifndef COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP
#define COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP (4)
#endif

#ifndef COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_PREV_TRACK_ANSWER
#define COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_PREV_TRACK_ANSWER (3)
#endif

#ifndef COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_MUTE
#define COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_MUTE (2)
#endif

#ifndef COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOICE_COMMAND
#define COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOICE_COMMAND (1)
#endif

#ifndef COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NONE
#define COMMANDED_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NONE (0)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_DOWN
#define OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_DOWN (6)
#endif

#ifndef OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_UP
#define OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOL_UP (5)
#endif

#ifndef OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP
#define OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP (4)
#endif

#ifndef OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_PREV_TRACK_ANSWER
#define OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_PREV_TRACK_ANSWER (3)
#endif

#ifndef OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_MUTE
#define OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_MUTE (2)
#endif

#ifndef OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOICE_COMMAND
#define OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_VOICE_COMMAND (1)
#endif

#ifndef OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NONE
#define OUTPUT_VALUE_MEDIA_CONTROLS_RPT_MEDIA_CONTROL_NONE (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  6 : "MEDIA_CONTROL_VOL_DOWN"
  //  5 : "MEDIA_CONTROL_VOL_UP"
  //  4 : "MEDIA_CONTROL_NEXT_TRACK_HANG_UP"
  //  3 : "MEDIA_CONTROL_PREV_TRACK_ANSWER"
  //  2 : "MEDIA_CONTROL_MUTE"
  //  1 : "MEDIA_CONTROL_VOICE_COMMAND"
  //  0 : "MEDIA_CONTROL_NONE"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  6 : "MEDIA_CONTROL_VOL_DOWN"
  //  5 : "MEDIA_CONTROL_VOL_UP"
  //  4 : "MEDIA_CONTROL_NEXT_TRACK_HANG_UP"
  //  3 : "MEDIA_CONTROL_PREV_TRACK_ANSWER"
  //  2 : "MEDIA_CONTROL_MUTE"
  //  1 : "MEDIA_CONTROL_VOICE_COMMAND"
  //  0 : "MEDIA_CONTROL_NONE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  6 : "MEDIA_CONTROL_VOL_DOWN"
  //  5 : "MEDIA_CONTROL_VOL_UP"
  //  4 : "MEDIA_CONTROL_NEXT_TRACK_HANG_UP"
  //  3 : "MEDIA_CONTROL_PREV_TRACK_ANSWER"
  //  2 : "MEDIA_CONTROL_MUTE"
  //  1 : "MEDIA_CONTROL_VOICE_COMMAND"
  //  0 : "MEDIA_CONTROL_NONE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  6 : "MEDIA_CONTROL_VOL_DOWN"
  //  5 : "MEDIA_CONTROL_VOL_UP"
  //  4 : "MEDIA_CONTROL_NEXT_TRACK_HANG_UP"
  //  3 : "MEDIA_CONTROL_PREV_TRACK_ANSWER"
  //  2 : "MEDIA_CONTROL_MUTE"
  //  1 : "MEDIA_CONTROL_VOICE_COMMAND"
  //  0 : "MEDIA_CONTROL_NONE"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  6 : "MEDIA_CONTROL_VOL_DOWN"
  //  5 : "MEDIA_CONTROL_VOL_UP"
  //  4 : "MEDIA_CONTROL_NEXT_TRACK_HANG_UP"
  //  3 : "MEDIA_CONTROL_PREV_TRACK_ANSWER"
  //  2 : "MEDIA_CONTROL_MUTE"
  //  1 : "MEDIA_CONTROL_VOICE_COMMAND"
  //  0 : "MEDIA_CONTROL_NONE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  6 : "MEDIA_CONTROL_VOL_DOWN"
  //  5 : "MEDIA_CONTROL_VOL_UP"
  //  4 : "MEDIA_CONTROL_NEXT_TRACK_HANG_UP"
  //  3 : "MEDIA_CONTROL_PREV_TRACK_ANSWER"
  //  2 : "MEDIA_CONTROL_MUTE"
  //  1 : "MEDIA_CONTROL_VOICE_COMMAND"
  //  0 : "MEDIA_CONTROL_NONE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} MEDIA_CONTROLS_RPT_t;

// def @PARKING_BRAKE_RPT CAN Message (548  0x224)
#define PARKING_BRAKE_RPT_IDE (0U)
#define PARKING_BRAKE_RPT_DLC (5U)
#define PARKING_BRAKE_RPT_CANID (0x224)
#define PARKING_BRAKE_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_PARKING_BRAKE_RPT_FALSE
#define ENABLED_PARKING_BRAKE_RPT_FALSE (0)
#endif

#ifndef ENABLED_PARKING_BRAKE_RPT_TRUE
#define ENABLED_PARKING_BRAKE_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_PARKING_BRAKE_RPT_FALSE
#define OVERRIDE_ACTIVE_PARKING_BRAKE_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_PARKING_BRAKE_RPT_TRUE
#define OVERRIDE_ACTIVE_PARKING_BRAKE_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_PARKING_BRAKE_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_PARKING_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_PARKING_BRAKE_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_PARKING_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_PARKING_BRAKE_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_PARKING_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_PARKING_BRAKE_RPT_FAULT
#define INPUT_OUTPUT_FAULT_PARKING_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_PARKING_BRAKE_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_PARKING_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_PARKING_BRAKE_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_PARKING_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_PARKING_BRAKE_RPT_NO_FAULT
#define PACMOD_FAULT_PARKING_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_PARKING_BRAKE_RPT_FAULT
#define PACMOD_FAULT_PARKING_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_PARKING_BRAKE_RPT_NO_FAULT
#define VEHICLE_FAULT_PARKING_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_PARKING_BRAKE_RPT_FAULT
#define VEHICLE_FAULT_PARKING_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_PARKING_BRAKE_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_PARKING_BRAKE_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_PARKING_BRAKE_RPT_TIMEOUT
#define COMMAND_TIMEOUT_PARKING_BRAKE_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_PARKING_BRAKE_RPT_OFF
#define MANUAL_INPUT_PARKING_BRAKE_RPT_OFF (0)
#endif

#ifndef MANUAL_INPUT_PARKING_BRAKE_RPT_ON
#define MANUAL_INPUT_PARKING_BRAKE_RPT_ON (1)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_PARKING_BRAKE_RPT_OFF
#define COMMANDED_VALUE_PARKING_BRAKE_RPT_OFF (0)
#endif

#ifndef COMMANDED_VALUE_PARKING_BRAKE_RPT_ON
#define COMMANDED_VALUE_PARKING_BRAKE_RPT_ON (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_PARKING_BRAKE_RPT_OFF
#define OUTPUT_VALUE_PARKING_BRAKE_RPT_OFF (0)
#endif

#ifndef OUTPUT_VALUE_PARKING_BRAKE_RPT_ON
#define OUTPUT_VALUE_PARKING_BRAKE_RPT_ON (1)
#endif


// Value tables for @CONTROL_STATUS signal

#ifndef CONTROL_STATUS_PARKING_BRAKE_RPT_SAFE
#define CONTROL_STATUS_PARKING_BRAKE_RPT_SAFE (0)
#endif

#ifndef CONTROL_STATUS_PARKING_BRAKE_RPT_AVAILABLE
#define CONTROL_STATUS_PARKING_BRAKE_RPT_AVAILABLE (1)
#endif


// Value tables for @PERFORMANCE_STATUS signal

#ifndef PERFORMANCE_STATUS_PARKING_BRAKE_RPT_NONE
#define PERFORMANCE_STATUS_PARKING_BRAKE_RPT_NONE (0)
#endif

#ifndef PERFORMANCE_STATUS_PARKING_BRAKE_RPT_CMD_TRACKING_FAILURE
#define PERFORMANCE_STATUS_PARKING_BRAKE_RPT_CMD_TRACKING_FAILURE (1)
#endif

#ifndef PERFORMANCE_STATUS_PARKING_BRAKE_RPT_APPOACHING_OPERATIONAL_LIMITS
#define PERFORMANCE_STATUS_PARKING_BRAKE_RPT_APPOACHING_OPERATIONAL_LIMITS (2)
#endif

#ifndef PERFORMANCE_STATUS_PARKING_BRAKE_RPT_LIMITING_ACTIVE
#define PERFORMANCE_STATUS_PARKING_BRAKE_RPT_LIMITING_ACTIVE (3)
#endif

#ifndef PERFORMANCE_STATUS_PARKING_BRAKE_RPT_LIMITING_IMMINENT
#define PERFORMANCE_STATUS_PARKING_BRAKE_RPT_LIMITING_IMMINENT (4)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT : 1;                  //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE : 1;                  //      Bits= 1

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS : 1;                //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS : 2;           //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS : 3;            //      Bits= 3

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 1

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS;                    //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS;               //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS;                //      Bits= 3

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} PARKING_BRAKE_RPT_t;

// def @PARKING_BRAKE_RPT_2 CAN Message (550  0x226)
#define PARKING_BRAKE_RPT_2_IDE (0U)
#define PARKING_BRAKE_RPT_2_DLC (5U)
#define PARKING_BRAKE_RPT_2_CANID (0x226)
#define PARKING_BRAKE_RPT_2_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_PARKING_BRAKE_RPT_2_FALSE
#define ENABLED_PARKING_BRAKE_RPT_2_FALSE (0)
#endif

#ifndef ENABLED_PARKING_BRAKE_RPT_2_TRUE
#define ENABLED_PARKING_BRAKE_RPT_2_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_PARKING_BRAKE_RPT_2_FALSE
#define OVERRIDE_ACTIVE_PARKING_BRAKE_RPT_2_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_PARKING_BRAKE_RPT_2_TRUE
#define OVERRIDE_ACTIVE_PARKING_BRAKE_RPT_2_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_PARKING_BRAKE_RPT_2_NO_FAULT
#define COMMAND_OUTPUT_FAULT_PARKING_BRAKE_RPT_2_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_PARKING_BRAKE_RPT_2_FAULT
#define COMMAND_OUTPUT_FAULT_PARKING_BRAKE_RPT_2_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_PARKING_BRAKE_RPT_2_NO_FAULT
#define INPUT_OUTPUT_FAULT_PARKING_BRAKE_RPT_2_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_PARKING_BRAKE_RPT_2_FAULT
#define INPUT_OUTPUT_FAULT_PARKING_BRAKE_RPT_2_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_PARKING_BRAKE_RPT_2_NO_FAULT
#define OUTPUT_REPORTED_FAULT_PARKING_BRAKE_RPT_2_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_PARKING_BRAKE_RPT_2_FAULT
#define OUTPUT_REPORTED_FAULT_PARKING_BRAKE_RPT_2_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_PARKING_BRAKE_RPT_2_NO_FAULT
#define PACMOD_FAULT_PARKING_BRAKE_RPT_2_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_PARKING_BRAKE_RPT_2_FAULT
#define PACMOD_FAULT_PARKING_BRAKE_RPT_2_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_PARKING_BRAKE_RPT_2_NO_FAULT
#define VEHICLE_FAULT_PARKING_BRAKE_RPT_2_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_PARKING_BRAKE_RPT_2_FAULT
#define VEHICLE_FAULT_PARKING_BRAKE_RPT_2_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_PARKING_BRAKE_RPT_2_NO_TIMEOUT
#define COMMAND_TIMEOUT_PARKING_BRAKE_RPT_2_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_PARKING_BRAKE_RPT_2_TIMEOUT
#define COMMAND_TIMEOUT_PARKING_BRAKE_RPT_2_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_PARKING_BRAKE_RPT_2_OFF
#define MANUAL_INPUT_PARKING_BRAKE_RPT_2_OFF (0)
#endif

#ifndef MANUAL_INPUT_PARKING_BRAKE_RPT_2_ON
#define MANUAL_INPUT_PARKING_BRAKE_RPT_2_ON (1)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_PARKING_BRAKE_RPT_2_OFF
#define COMMANDED_VALUE_PARKING_BRAKE_RPT_2_OFF (0)
#endif

#ifndef COMMANDED_VALUE_PARKING_BRAKE_RPT_2_ON
#define COMMANDED_VALUE_PARKING_BRAKE_RPT_2_ON (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_PARKING_BRAKE_RPT_2_OFF
#define OUTPUT_VALUE_PARKING_BRAKE_RPT_2_OFF (0)
#endif

#ifndef OUTPUT_VALUE_PARKING_BRAKE_RPT_2_ON
#define OUTPUT_VALUE_PARKING_BRAKE_RPT_2_ON (1)
#endif


// Value tables for @CONTROL_STATUS signal

#ifndef CONTROL_STATUS_PARKING_BRAKE_RPT_2_SAFE
#define CONTROL_STATUS_PARKING_BRAKE_RPT_2_SAFE (0)
#endif

#ifndef CONTROL_STATUS_PARKING_BRAKE_RPT_2_AVAILABLE
#define CONTROL_STATUS_PARKING_BRAKE_RPT_2_AVAILABLE (1)
#endif


// Value tables for @PERFORMANCE_STATUS signal

#ifndef PERFORMANCE_STATUS_PARKING_BRAKE_RPT_2_NONE
#define PERFORMANCE_STATUS_PARKING_BRAKE_RPT_2_NONE (0)
#endif

#ifndef PERFORMANCE_STATUS_PARKING_BRAKE_RPT_2_CMD_TRACKING_FAILURE
#define PERFORMANCE_STATUS_PARKING_BRAKE_RPT_2_CMD_TRACKING_FAILURE (1)
#endif

#ifndef PERFORMANCE_STATUS_PARKING_BRAKE_RPT_2_APPOACHING_OPERATIONAL_LIMITS
#define PERFORMANCE_STATUS_PARKING_BRAKE_RPT_2_APPOACHING_OPERATIONAL_LIMITS (2)
#endif

#ifndef PERFORMANCE_STATUS_PARKING_BRAKE_RPT_2_LIMITING_ACTIVE
#define PERFORMANCE_STATUS_PARKING_BRAKE_RPT_2_LIMITING_ACTIVE (3)
#endif

#ifndef PERFORMANCE_STATUS_PARKING_BRAKE_RPT_2_LIMITING_IMMINENT
#define PERFORMANCE_STATUS_PARKING_BRAKE_RPT_2_LIMITING_IMMINENT (4)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT : 1;                  //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE : 1;                  //      Bits= 1

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS : 1;                //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS : 2;           //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS : 3;            //      Bits= 3

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 1

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS;                    //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS;               //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS;                //      Bits= 3

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} PARKING_BRAKE_RPT_2_t;

// def @SHIFT_RPT CAN Message (552  0x228)
#define SHIFT_RPT_IDE (0U)
#define SHIFT_RPT_DLC (5U)
#define SHIFT_RPT_CANID (0x228)

// Value tables for @ENABLED signal

#ifndef ENABLED_SHIFT_RPT_FALSE
#define ENABLED_SHIFT_RPT_FALSE (0)
#endif

#ifndef ENABLED_SHIFT_RPT_TRUE
#define ENABLED_SHIFT_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_SHIFT_RPT_FALSE
#define OVERRIDE_ACTIVE_SHIFT_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_SHIFT_RPT_TRUE
#define OVERRIDE_ACTIVE_SHIFT_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_SHIFT_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_SHIFT_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_SHIFT_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_SHIFT_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_SHIFT_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_SHIFT_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_SHIFT_RPT_FAULT
#define INPUT_OUTPUT_FAULT_SHIFT_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_SHIFT_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_SHIFT_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_SHIFT_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_SHIFT_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_SHIFT_RPT_NO_FAULT
#define PACMOD_FAULT_SHIFT_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_SHIFT_RPT_FAULT
#define PACMOD_FAULT_SHIFT_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_SHIFT_RPT_NO_FAULT
#define VEHICLE_FAULT_SHIFT_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_SHIFT_RPT_FAULT
#define VEHICLE_FAULT_SHIFT_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_SHIFT_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_SHIFT_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_SHIFT_RPT_TIMEOUT
#define COMMAND_TIMEOUT_SHIFT_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_SHIFT_RPT_PARK
#define MANUAL_INPUT_SHIFT_RPT_PARK (0)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_REVERSE
#define MANUAL_INPUT_SHIFT_RPT_REVERSE (1)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_NEUTRAL
#define MANUAL_INPUT_SHIFT_RPT_NEUTRAL (2)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_FORWARDHIGH
#define MANUAL_INPUT_SHIFT_RPT_FORWARDHIGH (3)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_LOW
#define MANUAL_INPUT_SHIFT_RPT_LOW (4)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_BETWEEN_GEARS
#define MANUAL_INPUT_SHIFT_RPT_BETWEEN_GEARS (5)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_ERROR
#define MANUAL_INPUT_SHIFT_RPT_ERROR (6)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_NONE
#define MANUAL_INPUT_SHIFT_RPT_NONE (7)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_REV_THIRD
#define MANUAL_INPUT_SHIFT_RPT_REV_THIRD (124)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_REV_SECOND
#define MANUAL_INPUT_SHIFT_RPT_REV_SECOND (125)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_REV_FIRST
#define MANUAL_INPUT_SHIFT_RPT_REV_FIRST (126)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_RESERVED
#define MANUAL_INPUT_SHIFT_RPT_RESERVED (127)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_FIRST
#define MANUAL_INPUT_SHIFT_RPT_FIRST (128)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_SECOND
#define MANUAL_INPUT_SHIFT_RPT_SECOND (129)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_THIRD
#define MANUAL_INPUT_SHIFT_RPT_THIRD (130)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_FOURTH
#define MANUAL_INPUT_SHIFT_RPT_FOURTH (131)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_FIFTH
#define MANUAL_INPUT_SHIFT_RPT_FIFTH (132)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_SIXTH
#define MANUAL_INPUT_SHIFT_RPT_SIXTH (133)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_SEVENTH
#define MANUAL_INPUT_SHIFT_RPT_SEVENTH (134)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_EIGHTH
#define MANUAL_INPUT_SHIFT_RPT_EIGHTH (135)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_NINTH
#define MANUAL_INPUT_SHIFT_RPT_NINTH (136)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_TENTH
#define MANUAL_INPUT_SHIFT_RPT_TENTH (137)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_ELEVENTH
#define MANUAL_INPUT_SHIFT_RPT_ELEVENTH (138)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_TWELFTH
#define MANUAL_INPUT_SHIFT_RPT_TWELFTH (139)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_THIRTEENTH
#define MANUAL_INPUT_SHIFT_RPT_THIRTEENTH (140)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_FOURTEENTH
#define MANUAL_INPUT_SHIFT_RPT_FOURTEENTH (141)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_FIFTEENTH
#define MANUAL_INPUT_SHIFT_RPT_FIFTEENTH (142)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_SIXTEENTH
#define MANUAL_INPUT_SHIFT_RPT_SIXTEENTH (143)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_SEVENTEENTH
#define MANUAL_INPUT_SHIFT_RPT_SEVENTEENTH (144)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_EIGHTEENTH
#define MANUAL_INPUT_SHIFT_RPT_EIGHTEENTH (145)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_NINETEENTH
#define MANUAL_INPUT_SHIFT_RPT_NINETEENTH (146)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_TWENTIETH
#define MANUAL_INPUT_SHIFT_RPT_TWENTIETH (147)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_TWENTYFIRST
#define MANUAL_INPUT_SHIFT_RPT_TWENTYFIRST (148)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_TWENTYSECOND
#define MANUAL_INPUT_SHIFT_RPT_TWENTYSECOND (149)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_TWENTYTHIRD
#define MANUAL_INPUT_SHIFT_RPT_TWENTYTHIRD (150)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_TWENTYFOURTH
#define MANUAL_INPUT_SHIFT_RPT_TWENTYFOURTH (151)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_TWENTYFIFTH
#define MANUAL_INPUT_SHIFT_RPT_TWENTYFIFTH (152)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_RESERVED
#define MANUAL_INPUT_SHIFT_RPT_RESERVED (251)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_RESERVED
#define MANUAL_INPUT_SHIFT_RPT_RESERVED (252)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_RESERVED
#define MANUAL_INPUT_SHIFT_RPT_RESERVED (253)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_ERROR
#define MANUAL_INPUT_SHIFT_RPT_ERROR (254)
#endif

#ifndef MANUAL_INPUT_SHIFT_RPT_NOT_AVAIL
#define MANUAL_INPUT_SHIFT_RPT_NOT_AVAIL (255)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_SHIFT_RPT_PARK
#define COMMANDED_VALUE_SHIFT_RPT_PARK (0)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_REVERSE
#define COMMANDED_VALUE_SHIFT_RPT_REVERSE (1)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_NEUTRAL
#define COMMANDED_VALUE_SHIFT_RPT_NEUTRAL (2)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_FORWARDHIGH
#define COMMANDED_VALUE_SHIFT_RPT_FORWARDHIGH (3)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_LOW
#define COMMANDED_VALUE_SHIFT_RPT_LOW (4)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_NONE
#define COMMANDED_VALUE_SHIFT_RPT_NONE (7)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_REV_THIRD
#define COMMANDED_VALUE_SHIFT_RPT_REV_THIRD (124)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_REV_SECOND
#define COMMANDED_VALUE_SHIFT_RPT_REV_SECOND (125)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_REV_FIRST
#define COMMANDED_VALUE_SHIFT_RPT_REV_FIRST (126)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_RESERVED
#define COMMANDED_VALUE_SHIFT_RPT_RESERVED (127)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_FIRST
#define COMMANDED_VALUE_SHIFT_RPT_FIRST (128)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_SECOND
#define COMMANDED_VALUE_SHIFT_RPT_SECOND (129)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_THIRD
#define COMMANDED_VALUE_SHIFT_RPT_THIRD (130)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_FOURTH
#define COMMANDED_VALUE_SHIFT_RPT_FOURTH (131)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_FIFTH
#define COMMANDED_VALUE_SHIFT_RPT_FIFTH (132)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_SIXTH
#define COMMANDED_VALUE_SHIFT_RPT_SIXTH (133)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_SEVENTH
#define COMMANDED_VALUE_SHIFT_RPT_SEVENTH (134)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_EIGHTH
#define COMMANDED_VALUE_SHIFT_RPT_EIGHTH (135)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_NINTH
#define COMMANDED_VALUE_SHIFT_RPT_NINTH (136)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_TENTH
#define COMMANDED_VALUE_SHIFT_RPT_TENTH (137)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_ELEVENTH
#define COMMANDED_VALUE_SHIFT_RPT_ELEVENTH (138)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_TWELFTH
#define COMMANDED_VALUE_SHIFT_RPT_TWELFTH (139)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_THIRTEENTH
#define COMMANDED_VALUE_SHIFT_RPT_THIRTEENTH (140)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_FOURTEENTH
#define COMMANDED_VALUE_SHIFT_RPT_FOURTEENTH (141)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_FIFTEENTH
#define COMMANDED_VALUE_SHIFT_RPT_FIFTEENTH (142)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_SIXTEENTH
#define COMMANDED_VALUE_SHIFT_RPT_SIXTEENTH (143)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_SEVENTEENTH
#define COMMANDED_VALUE_SHIFT_RPT_SEVENTEENTH (144)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_EIGHTEENTH
#define COMMANDED_VALUE_SHIFT_RPT_EIGHTEENTH (145)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_NINETEENTH
#define COMMANDED_VALUE_SHIFT_RPT_NINETEENTH (146)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_TWENTIETH
#define COMMANDED_VALUE_SHIFT_RPT_TWENTIETH (147)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_TWENTYFIRST
#define COMMANDED_VALUE_SHIFT_RPT_TWENTYFIRST (148)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_TWENTYSECOND
#define COMMANDED_VALUE_SHIFT_RPT_TWENTYSECOND (149)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_TWENTYTHIRD
#define COMMANDED_VALUE_SHIFT_RPT_TWENTYTHIRD (150)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_TWENTYFOURTH
#define COMMANDED_VALUE_SHIFT_RPT_TWENTYFOURTH (151)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_TWENTYFIFTH
#define COMMANDED_VALUE_SHIFT_RPT_TWENTYFIFTH (152)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_RESERVED
#define COMMANDED_VALUE_SHIFT_RPT_RESERVED (251)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_RESERVED
#define COMMANDED_VALUE_SHIFT_RPT_RESERVED (252)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_RESERVED
#define COMMANDED_VALUE_SHIFT_RPT_RESERVED (253)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_ERROR
#define COMMANDED_VALUE_SHIFT_RPT_ERROR (254)
#endif

#ifndef COMMANDED_VALUE_SHIFT_RPT_NOT_AVAIL
#define COMMANDED_VALUE_SHIFT_RPT_NOT_AVAIL (255)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_SHIFT_RPT_PARK
#define OUTPUT_VALUE_SHIFT_RPT_PARK (0)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_REVERSE
#define OUTPUT_VALUE_SHIFT_RPT_REVERSE (1)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_NEUTRAL
#define OUTPUT_VALUE_SHIFT_RPT_NEUTRAL (2)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_FORWARDHIGH
#define OUTPUT_VALUE_SHIFT_RPT_FORWARDHIGH (3)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_LOW
#define OUTPUT_VALUE_SHIFT_RPT_LOW (4)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_BETWEEN_GEARS
#define OUTPUT_VALUE_SHIFT_RPT_BETWEEN_GEARS (5)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_ERROR
#define OUTPUT_VALUE_SHIFT_RPT_ERROR (6)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_NONE
#define OUTPUT_VALUE_SHIFT_RPT_NONE (7)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_REV_THIRD
#define OUTPUT_VALUE_SHIFT_RPT_REV_THIRD (124)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_REV_SECOND
#define OUTPUT_VALUE_SHIFT_RPT_REV_SECOND (125)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_REV_FIRST
#define OUTPUT_VALUE_SHIFT_RPT_REV_FIRST (126)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_RESERVED
#define OUTPUT_VALUE_SHIFT_RPT_RESERVED (127)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_FIRST
#define OUTPUT_VALUE_SHIFT_RPT_FIRST (128)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_SECOND
#define OUTPUT_VALUE_SHIFT_RPT_SECOND (129)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_THIRD
#define OUTPUT_VALUE_SHIFT_RPT_THIRD (130)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_FOURTH
#define OUTPUT_VALUE_SHIFT_RPT_FOURTH (131)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_FIFTH
#define OUTPUT_VALUE_SHIFT_RPT_FIFTH (132)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_SIXTH
#define OUTPUT_VALUE_SHIFT_RPT_SIXTH (133)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_SEVENTH
#define OUTPUT_VALUE_SHIFT_RPT_SEVENTH (134)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_EIGHTH
#define OUTPUT_VALUE_SHIFT_RPT_EIGHTH (135)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_NINTH
#define OUTPUT_VALUE_SHIFT_RPT_NINTH (136)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_TENTH
#define OUTPUT_VALUE_SHIFT_RPT_TENTH (137)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_ELEVENTH
#define OUTPUT_VALUE_SHIFT_RPT_ELEVENTH (138)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_TWELFTH
#define OUTPUT_VALUE_SHIFT_RPT_TWELFTH (139)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_THIRTEENTH
#define OUTPUT_VALUE_SHIFT_RPT_THIRTEENTH (140)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_FOURTEENTH
#define OUTPUT_VALUE_SHIFT_RPT_FOURTEENTH (141)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_FIFTEENTH
#define OUTPUT_VALUE_SHIFT_RPT_FIFTEENTH (142)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_SIXTEENTH
#define OUTPUT_VALUE_SHIFT_RPT_SIXTEENTH (143)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_SEVENTEENTH
#define OUTPUT_VALUE_SHIFT_RPT_SEVENTEENTH (144)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_EIGHTEENTH
#define OUTPUT_VALUE_SHIFT_RPT_EIGHTEENTH (145)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_NINETEENTH
#define OUTPUT_VALUE_SHIFT_RPT_NINETEENTH (146)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_TWENTIETH
#define OUTPUT_VALUE_SHIFT_RPT_TWENTIETH (147)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_TWENTYFIRST
#define OUTPUT_VALUE_SHIFT_RPT_TWENTYFIRST (148)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_TWENTYSECOND
#define OUTPUT_VALUE_SHIFT_RPT_TWENTYSECOND (149)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_TWENTYTHIRD
#define OUTPUT_VALUE_SHIFT_RPT_TWENTYTHIRD (150)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_TWENTYFOURTH
#define OUTPUT_VALUE_SHIFT_RPT_TWENTYFOURTH (151)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_TWENTYFIFTH
#define OUTPUT_VALUE_SHIFT_RPT_TWENTYFIFTH (152)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_RESERVED
#define OUTPUT_VALUE_SHIFT_RPT_RESERVED (251)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_RESERVED
#define OUTPUT_VALUE_SHIFT_RPT_RESERVED (252)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_RESERVED
#define OUTPUT_VALUE_SHIFT_RPT_RESERVED (253)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_ERROR
#define OUTPUT_VALUE_SHIFT_RPT_ERROR (254)
#endif

#ifndef OUTPUT_VALUE_SHIFT_RPT_NOT_AVAIL
#define OUTPUT_VALUE_SHIFT_RPT_NOT_AVAIL (255)
#endif


// Value tables for @CONTROL_STATUS signal

#ifndef CONTROL_STATUS_SHIFT_RPT_SAFE
#define CONTROL_STATUS_SHIFT_RPT_SAFE (0)
#endif

#ifndef CONTROL_STATUS_SHIFT_RPT_AVAILABLE
#define CONTROL_STATUS_SHIFT_RPT_AVAILABLE (1)
#endif


// Value tables for @PERFORMANCE_STATUS signal

#ifndef PERFORMANCE_STATUS_SHIFT_RPT_NONE
#define PERFORMANCE_STATUS_SHIFT_RPT_NONE (0)
#endif

#ifndef PERFORMANCE_STATUS_SHIFT_RPT_CMD_TRACKING_FAILURE
#define PERFORMANCE_STATUS_SHIFT_RPT_CMD_TRACKING_FAILURE (1)
#endif

#ifndef PERFORMANCE_STATUS_SHIFT_RPT_APPOACHING_OPERATIONAL_LIMITS
#define PERFORMANCE_STATUS_SHIFT_RPT_APPOACHING_OPERATIONAL_LIMITS (2)
#endif

#ifndef PERFORMANCE_STATUS_SHIFT_RPT_LIMITING_ACTIVE
#define PERFORMANCE_STATUS_SHIFT_RPT_LIMITING_ACTIVE (3)
#endif

#ifndef PERFORMANCE_STATUS_SHIFT_RPT_LIMITING_IMMINENT
#define PERFORMANCE_STATUS_SHIFT_RPT_LIMITING_IMMINENT (4)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "PARK"
  //  1 : "REVERSE"
  //  2 : "NEUTRAL"
  //  3 : "FORWARD/HIGH"
  //  4 : "LOW"
  //  5 : "BETWEEN_GEARS"
  //  6 : "ERROR"
  //  7 : "NONE"
  //  124 : "REV_THIRD"
  //  125 : "REV_SECOND"
  //  126 : "REV_FIRST"
  //  127 : "RESERVED"
  //  128 : "FIRST"
  //  129 : "SECOND"
  //  130 : "THIRD"
  //  131 : "FOURTH"
  //  132 : "FIFTH"
  //  133 : "SIXTH"
  //  134 : "SEVENTH"
  //  135 : "EIGHTH"
  //  136 : "NINTH"
  //  137 : "TENTH"
  //  138 : "ELEVENTH"
  //  139 : "TWELFTH"
  //  140 : "THIRTEENTH"
  //  141 : "FOURTEENTH"
  //  142 : "FIFTEENTH"
  //  143 : "SIXTEENTH"
  //  144 : "SEVENTEENTH"
  //  145 : "EIGHTEENTH"
  //  146 : "NINETEENTH"
  //  147 : "TWENTIETH"
  //  148 : "TWENTY-FIRST"
  //  149 : "TWENTY-SECOND"
  //  150 : "TWENTY-THIRD"
  //  151 : "TWENTY-FOURTH"
  //  152 : "TWENTY-FIFTH"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "PARK"
  //  1 : "REVERSE"
  //  2 : "NEUTRAL"
  //  3 : "FORWARD/HIGH"
  //  4 : "LOW"
  //  7 : "NONE"
  //  124 : "REV_THIRD"
  //  125 : "REV_SECOND"
  //  126 : "REV_FIRST"
  //  127 : "RESERVED"
  //  128 : "FIRST"
  //  129 : "SECOND"
  //  130 : "THIRD"
  //  131 : "FOURTH"
  //  132 : "FIFTH"
  //  133 : "SIXTH"
  //  134 : "SEVENTH"
  //  135 : "EIGHTH"
  //  136 : "NINTH"
  //  137 : "TENTH"
  //  138 : "ELEVENTH"
  //  139 : "TWELFTH"
  //  140 : "THIRTEENTH"
  //  141 : "FOURTEENTH"
  //  142 : "FIFTEENTH"
  //  143 : "SIXTEENTH"
  //  144 : "SEVENTEENTH"
  //  145 : "EIGHTEENTH"
  //  146 : "NINETEENTH"
  //  147 : "TWENTIETH"
  //  148 : "TWENTY-FIRST"
  //  149 : "TWENTY-SECOND"
  //  150 : "TWENTY-THIRD"
  //  151 : "TWENTY-FOURTH"
  //  152 : "TWENTY-FIFTH"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "PARK"
  //  1 : "REVERSE"
  //  2 : "NEUTRAL"
  //  3 : "FORWARD/HIGH"
  //  4 : "LOW"
  //  5 : "BETWEEN_GEARS"
  //  6 : "ERROR"
  //  7 : "NONE"
  //  124 : "REV_THIRD"
  //  125 : "REV_SECOND"
  //  126 : "REV_FIRST"
  //  127 : "RESERVED"
  //  128 : "FIRST"
  //  129 : "SECOND"
  //  130 : "THIRD"
  //  131 : "FOURTH"
  //  132 : "FIFTH"
  //  133 : "SIXTH"
  //  134 : "SEVENTH"
  //  135 : "EIGHTH"
  //  136 : "NINTH"
  //  137 : "TENTH"
  //  138 : "ELEVENTH"
  //  139 : "TWELFTH"
  //  140 : "THIRTEENTH"
  //  141 : "FOURTEENTH"
  //  142 : "FIFTEENTH"
  //  143 : "SIXTEENTH"
  //  144 : "SEVENTEENTH"
  //  145 : "EIGHTEENTH"
  //  146 : "NINETEENTH"
  //  147 : "TWENTIETH"
  //  148 : "TWENTY-FIRST"
  //  149 : "TWENTY-SECOND"
  //  150 : "TWENTY-THIRD"
  //  151 : "TWENTY-FOURTH"
  //  152 : "TWENTY-FIFTH"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS : 1;                //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS : 2;           //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS : 3;            //      Bits= 3

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "PARK"
  //  1 : "REVERSE"
  //  2 : "NEUTRAL"
  //  3 : "FORWARD/HIGH"
  //  4 : "LOW"
  //  5 : "BETWEEN_GEARS"
  //  6 : "ERROR"
  //  7 : "NONE"
  //  124 : "REV_THIRD"
  //  125 : "REV_SECOND"
  //  126 : "REV_FIRST"
  //  127 : "RESERVED"
  //  128 : "FIRST"
  //  129 : "SECOND"
  //  130 : "THIRD"
  //  131 : "FOURTH"
  //  132 : "FIFTH"
  //  133 : "SIXTH"
  //  134 : "SEVENTH"
  //  135 : "EIGHTH"
  //  136 : "NINTH"
  //  137 : "TENTH"
  //  138 : "ELEVENTH"
  //  139 : "TWELFTH"
  //  140 : "THIRTEENTH"
  //  141 : "FOURTEENTH"
  //  142 : "FIFTEENTH"
  //  143 : "SIXTEENTH"
  //  144 : "SEVENTEENTH"
  //  145 : "EIGHTEENTH"
  //  146 : "NINETEENTH"
  //  147 : "TWENTIETH"
  //  148 : "TWENTY-FIRST"
  //  149 : "TWENTY-SECOND"
  //  150 : "TWENTY-THIRD"
  //  151 : "TWENTY-FOURTH"
  //  152 : "TWENTY-FIFTH"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "PARK"
  //  1 : "REVERSE"
  //  2 : "NEUTRAL"
  //  3 : "FORWARD/HIGH"
  //  4 : "LOW"
  //  7 : "NONE"
  //  124 : "REV_THIRD"
  //  125 : "REV_SECOND"
  //  126 : "REV_FIRST"
  //  127 : "RESERVED"
  //  128 : "FIRST"
  //  129 : "SECOND"
  //  130 : "THIRD"
  //  131 : "FOURTH"
  //  132 : "FIFTH"
  //  133 : "SIXTH"
  //  134 : "SEVENTH"
  //  135 : "EIGHTH"
  //  136 : "NINTH"
  //  137 : "TENTH"
  //  138 : "ELEVENTH"
  //  139 : "TWELFTH"
  //  140 : "THIRTEENTH"
  //  141 : "FOURTEENTH"
  //  142 : "FIFTEENTH"
  //  143 : "SIXTEENTH"
  //  144 : "SEVENTEENTH"
  //  145 : "EIGHTEENTH"
  //  146 : "NINETEENTH"
  //  147 : "TWENTIETH"
  //  148 : "TWENTY-FIRST"
  //  149 : "TWENTY-SECOND"
  //  150 : "TWENTY-THIRD"
  //  151 : "TWENTY-FOURTH"
  //  152 : "TWENTY-FIFTH"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "PARK"
  //  1 : "REVERSE"
  //  2 : "NEUTRAL"
  //  3 : "FORWARD/HIGH"
  //  4 : "LOW"
  //  5 : "BETWEEN_GEARS"
  //  6 : "ERROR"
  //  7 : "NONE"
  //  124 : "REV_THIRD"
  //  125 : "REV_SECOND"
  //  126 : "REV_FIRST"
  //  127 : "RESERVED"
  //  128 : "FIRST"
  //  129 : "SECOND"
  //  130 : "THIRD"
  //  131 : "FOURTH"
  //  132 : "FIFTH"
  //  133 : "SIXTH"
  //  134 : "SEVENTH"
  //  135 : "EIGHTH"
  //  136 : "NINTH"
  //  137 : "TENTH"
  //  138 : "ELEVENTH"
  //  139 : "TWELFTH"
  //  140 : "THIRTEENTH"
  //  141 : "FOURTEENTH"
  //  142 : "FIFTEENTH"
  //  143 : "SIXTEENTH"
  //  144 : "SEVENTEENTH"
  //  145 : "EIGHTEENTH"
  //  146 : "NINETEENTH"
  //  147 : "TWENTIETH"
  //  148 : "TWENTY-FIRST"
  //  149 : "TWENTY-SECOND"
  //  150 : "TWENTY-THIRD"
  //  151 : "TWENTY-FOURTH"
  //  152 : "TWENTY-FIFTH"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS;                    //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS;               //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS;                //      Bits= 3

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SHIFT_RPT_t;

// def @STEERING_RPT CAN Message (556  0x22c)
#define STEERING_RPT_IDE (0U)
#define STEERING_RPT_DLC (8U)
#define STEERING_RPT_CANID (0x22c)

// Value tables for @ENABLED signal

#ifndef ENABLED_STEERING_RPT_FALSE
#define ENABLED_STEERING_RPT_FALSE (0)
#endif

#ifndef ENABLED_STEERING_RPT_TRUE
#define ENABLED_STEERING_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_STEERING_RPT_FALSE
#define OVERRIDE_ACTIVE_STEERING_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_STEERING_RPT_TRUE
#define OVERRIDE_ACTIVE_STEERING_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_STEERING_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_STEERING_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_STEERING_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_STEERING_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_STEERING_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_STEERING_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_STEERING_RPT_FAULT
#define INPUT_OUTPUT_FAULT_STEERING_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_STEERING_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_STEERING_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_STEERING_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_STEERING_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_STEERING_RPT_NO_FAULT
#define PACMOD_FAULT_STEERING_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_STEERING_RPT_FAULT
#define PACMOD_FAULT_STEERING_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_STEERING_RPT_NO_FAULT
#define VEHICLE_FAULT_STEERING_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_STEERING_RPT_FAULT
#define VEHICLE_FAULT_STEERING_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_STEERING_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_STEERING_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_STEERING_RPT_TIMEOUT
#define COMMAND_TIMEOUT_STEERING_RPT_TIMEOUT (1)
#endif


// Value tables for @CONTROL_STATUS signal

#ifndef CONTROL_STATUS_STEERING_RPT_SAFE
#define CONTROL_STATUS_STEERING_RPT_SAFE (0)
#endif

#ifndef CONTROL_STATUS_STEERING_RPT_AVAILABLE
#define CONTROL_STATUS_STEERING_RPT_AVAILABLE (1)
#endif


// Value tables for @PERFORMANCE_STATUS signal

#ifndef PERFORMANCE_STATUS_STEERING_RPT_NONE
#define PERFORMANCE_STATUS_STEERING_RPT_NONE (0)
#endif

#ifndef PERFORMANCE_STATUS_STEERING_RPT_CMD_TRACKING_FAILURE
#define PERFORMANCE_STATUS_STEERING_RPT_CMD_TRACKING_FAILURE (1)
#endif

#ifndef PERFORMANCE_STATUS_STEERING_RPT_APPOACHING_OPERATIONAL_LIMITS
#define PERFORMANCE_STATUS_STEERING_RPT_APPOACHING_OPERATIONAL_LIMITS (2)
#endif

#ifndef PERFORMANCE_STATUS_STEERING_RPT_LIMITING_ACTIVE
#define PERFORMANCE_STATUS_STEERING_RPT_LIMITING_ACTIVE (3)
#endif

#ifndef PERFORMANCE_STATUS_STEERING_RPT_LIMITING_IMMINENT
#define PERFORMANCE_STATUS_STEERING_RPT_LIMITING_IMMINENT (4)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  int16_t MANUAL_INPUT_ro;                   //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t COMMANDED_VALUE_ro;                //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t OUTPUT_VALUE_ro;                   //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS : 1;                //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS : 2;           //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS : 3;            //      Bits= 3

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  int16_t MANUAL_INPUT_ro;                   //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t COMMANDED_VALUE_ro;                //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t OUTPUT_VALUE_ro;                   //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS;                    //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS;               //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS;                //      Bits= 3

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} STEERING_RPT_t;

// def @STEERING_CMD_LIMIT_RPT CAN Message (557  0x22d)
#define STEERING_CMD_LIMIT_RPT_IDE (0U)
#define STEERING_CMD_LIMIT_RPT_DLC (8U)
#define STEERING_CMD_LIMIT_RPT_CANID (0x22d)
// signal: @POSITION_CMD_LIMIT_ro
#define PACMOD13_POSITION_CMD_LIMIT_ro_CovFactor (0.001)
#define PACMOD13_POSITION_CMD_LIMIT_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_POSITION_CMD_LIMIT_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @LIMITED_POSITION_CMD_ro
#define PACMOD13_LIMITED_POSITION_CMD_ro_CovFactor (0.001)
#define PACMOD13_LIMITED_POSITION_CMD_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_LIMITED_POSITION_CMD_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @ROTATION_RATE_CMD_LIMIT_ro
#define PACMOD13_ROTATION_RATE_CMD_LIMIT_ro_CovFactor (0.001)
#define PACMOD13_ROTATION_RATE_CMD_LIMIT_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_ROTATION_RATE_CMD_LIMIT_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @LIMITED_ROTATION_RATE_ro
#define PACMOD13_LIMITED_ROTATION_RATE_ro_CovFactor (0.001)
#define PACMOD13_LIMITED_ROTATION_RATE_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_LIMITED_ROTATION_RATE_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t POSITION_CMD_LIMIT_ro;             //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t POSITION_CMD_LIMIT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t LIMITED_POSITION_CMD_ro;           //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LIMITED_POSITION_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t ROTATION_RATE_CMD_LIMIT_ro;       //      Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROTATION_RATE_CMD_LIMIT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t LIMITED_ROTATION_RATE_ro;         //      Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LIMITED_ROTATION_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int16_t POSITION_CMD_LIMIT_ro;             //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t POSITION_CMD_LIMIT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t LIMITED_POSITION_CMD_ro;           //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LIMITED_POSITION_CMD_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t ROTATION_RATE_CMD_LIMIT_ro;       //      Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROTATION_RATE_CMD_LIMIT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t LIMITED_ROTATION_RATE_ro;         //      Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LIMITED_ROTATION_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} STEERING_CMD_LIMIT_RPT_t;

// def @STEERING_RPT_2 CAN Message (558  0x22e)
#define STEERING_RPT_2_IDE (0U)
#define STEERING_RPT_2_DLC (8U)
#define STEERING_RPT_2_CANID (0x22e)

// Value tables for @ENABLED signal

#ifndef ENABLED_STEERING_RPT_2_FALSE
#define ENABLED_STEERING_RPT_2_FALSE (0)
#endif

#ifndef ENABLED_STEERING_RPT_2_TRUE
#define ENABLED_STEERING_RPT_2_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_STEERING_RPT_2_FALSE
#define OVERRIDE_ACTIVE_STEERING_RPT_2_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_STEERING_RPT_2_TRUE
#define OVERRIDE_ACTIVE_STEERING_RPT_2_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_STEERING_RPT_2_NO_FAULT
#define COMMAND_OUTPUT_FAULT_STEERING_RPT_2_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_STEERING_RPT_2_FAULT
#define COMMAND_OUTPUT_FAULT_STEERING_RPT_2_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_STEERING_RPT_2_NO_FAULT
#define INPUT_OUTPUT_FAULT_STEERING_RPT_2_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_STEERING_RPT_2_FAULT
#define INPUT_OUTPUT_FAULT_STEERING_RPT_2_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_STEERING_RPT_2_NO_FAULT
#define OUTPUT_REPORTED_FAULT_STEERING_RPT_2_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_STEERING_RPT_2_FAULT
#define OUTPUT_REPORTED_FAULT_STEERING_RPT_2_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_STEERING_RPT_2_NO_FAULT
#define PACMOD_FAULT_STEERING_RPT_2_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_STEERING_RPT_2_FAULT
#define PACMOD_FAULT_STEERING_RPT_2_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_STEERING_RPT_2_NO_FAULT
#define VEHICLE_FAULT_STEERING_RPT_2_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_STEERING_RPT_2_FAULT
#define VEHICLE_FAULT_STEERING_RPT_2_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_STEERING_RPT_2_NO_TIMEOUT
#define COMMAND_TIMEOUT_STEERING_RPT_2_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_STEERING_RPT_2_TIMEOUT
#define COMMAND_TIMEOUT_STEERING_RPT_2_TIMEOUT (1)
#endif


// Value tables for @CONTROL_STATUS signal

#ifndef CONTROL_STATUS_STEERING_RPT_2_SAFE
#define CONTROL_STATUS_STEERING_RPT_2_SAFE (0)
#endif

#ifndef CONTROL_STATUS_STEERING_RPT_2_AVAILABLE
#define CONTROL_STATUS_STEERING_RPT_2_AVAILABLE (1)
#endif


// Value tables for @PERFORMANCE_STATUS signal

#ifndef PERFORMANCE_STATUS_STEERING_RPT_2_NONE
#define PERFORMANCE_STATUS_STEERING_RPT_2_NONE (0)
#endif

#ifndef PERFORMANCE_STATUS_STEERING_RPT_2_CMD_TRACKING_FAILURE
#define PERFORMANCE_STATUS_STEERING_RPT_2_CMD_TRACKING_FAILURE (1)
#endif

#ifndef PERFORMANCE_STATUS_STEERING_RPT_2_APPOACHING_OPERATIONAL_LIMITS
#define PERFORMANCE_STATUS_STEERING_RPT_2_APPOACHING_OPERATIONAL_LIMITS (2)
#endif

#ifndef PERFORMANCE_STATUS_STEERING_RPT_2_LIMITING_ACTIVE
#define PERFORMANCE_STATUS_STEERING_RPT_2_LIMITING_ACTIVE (3)
#endif

#ifndef PERFORMANCE_STATUS_STEERING_RPT_2_LIMITING_IMMINENT
#define PERFORMANCE_STATUS_STEERING_RPT_2_LIMITING_IMMINENT (4)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  int16_t MANUAL_INPUT_ro;                   //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t COMMANDED_VALUE_ro;                //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t OUTPUT_VALUE_ro;                   //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS : 1;                //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS : 2;           //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS : 3;            //      Bits= 3

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  int16_t MANUAL_INPUT_ro;                   //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t COMMANDED_VALUE_ro;                //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t OUTPUT_VALUE_ro;                   //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS;                    //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS;               //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS;                //      Bits= 3

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} STEERING_RPT_2_t;

// def @TURN_RPT CAN Message (560  0x230)
#define TURN_RPT_IDE (0U)
#define TURN_RPT_DLC (4U)
#define TURN_RPT_CANID (0x230)
#define TURN_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_TURN_RPT_FALSE
#define ENABLED_TURN_RPT_FALSE (0)
#endif

#ifndef ENABLED_TURN_RPT_TRUE
#define ENABLED_TURN_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_TURN_RPT_FALSE
#define OVERRIDE_ACTIVE_TURN_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_TURN_RPT_TRUE
#define OVERRIDE_ACTIVE_TURN_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_TURN_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_TURN_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_TURN_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_TURN_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_TURN_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_TURN_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_TURN_RPT_FAULT
#define INPUT_OUTPUT_FAULT_TURN_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_TURN_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_TURN_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_TURN_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_TURN_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_TURN_RPT_NO_FAULT
#define PACMOD_FAULT_TURN_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_TURN_RPT_FAULT
#define PACMOD_FAULT_TURN_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_TURN_RPT_NO_FAULT
#define VEHICLE_FAULT_TURN_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_TURN_RPT_FAULT
#define VEHICLE_FAULT_TURN_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_TURN_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_TURN_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_TURN_RPT_TIMEOUT
#define COMMAND_TIMEOUT_TURN_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_TURN_RPT_RIGHT
#define MANUAL_INPUT_TURN_RPT_RIGHT (0)
#endif

#ifndef MANUAL_INPUT_TURN_RPT_NONE
#define MANUAL_INPUT_TURN_RPT_NONE (1)
#endif

#ifndef MANUAL_INPUT_TURN_RPT_LEFT
#define MANUAL_INPUT_TURN_RPT_LEFT (2)
#endif

#ifndef MANUAL_INPUT_TURN_RPT_HAZARD
#define MANUAL_INPUT_TURN_RPT_HAZARD (3)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_TURN_RPT_RIGHT
#define COMMANDED_VALUE_TURN_RPT_RIGHT (0)
#endif

#ifndef COMMANDED_VALUE_TURN_RPT_NONE
#define COMMANDED_VALUE_TURN_RPT_NONE (1)
#endif

#ifndef COMMANDED_VALUE_TURN_RPT_LEFT
#define COMMANDED_VALUE_TURN_RPT_LEFT (2)
#endif

#ifndef COMMANDED_VALUE_TURN_RPT_HAZARD
#define COMMANDED_VALUE_TURN_RPT_HAZARD (3)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_TURN_RPT_RIGHT
#define OUTPUT_VALUE_TURN_RPT_RIGHT (0)
#endif

#ifndef OUTPUT_VALUE_TURN_RPT_NONE
#define OUTPUT_VALUE_TURN_RPT_NONE (1)
#endif

#ifndef OUTPUT_VALUE_TURN_RPT_LEFT
#define OUTPUT_VALUE_TURN_RPT_LEFT (2)
#endif

#ifndef OUTPUT_VALUE_TURN_RPT_HAZARD
#define OUTPUT_VALUE_TURN_RPT_HAZARD (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "RIGHT"
  //  1 : "NONE"
  //  2 : "LEFT"
  //  3 : "HAZARD"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "RIGHT"
  //  1 : "NONE"
  //  2 : "LEFT"
  //  3 : "HAZARD"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "RIGHT"
  //  1 : "NONE"
  //  2 : "LEFT"
  //  3 : "HAZARD"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "RIGHT"
  //  1 : "NONE"
  //  2 : "LEFT"
  //  3 : "HAZARD"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "RIGHT"
  //  1 : "NONE"
  //  2 : "LEFT"
  //  3 : "HAZARD"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "RIGHT"
  //  1 : "NONE"
  //  2 : "LEFT"
  //  3 : "HAZARD"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TURN_RPT_t;

// def @WIPER_RPT CAN Message (564  0x234)
#define WIPER_RPT_IDE (0U)
#define WIPER_RPT_DLC (4U)
#define WIPER_RPT_CANID (0x234)
#define WIPER_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_WIPER_RPT_FALSE
#define ENABLED_WIPER_RPT_FALSE (0)
#endif

#ifndef ENABLED_WIPER_RPT_TRUE
#define ENABLED_WIPER_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_WIPER_RPT_FALSE
#define OVERRIDE_ACTIVE_WIPER_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_WIPER_RPT_TRUE
#define OVERRIDE_ACTIVE_WIPER_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_WIPER_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_WIPER_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_WIPER_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_WIPER_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_WIPER_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_WIPER_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_WIPER_RPT_FAULT
#define INPUT_OUTPUT_FAULT_WIPER_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_WIPER_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_WIPER_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_WIPER_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_WIPER_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_WIPER_RPT_NO_FAULT
#define PACMOD_FAULT_WIPER_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_WIPER_RPT_FAULT
#define PACMOD_FAULT_WIPER_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_WIPER_RPT_NO_FAULT
#define VEHICLE_FAULT_WIPER_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_WIPER_RPT_FAULT
#define VEHICLE_FAULT_WIPER_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_WIPER_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_WIPER_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_WIPER_RPT_TIMEOUT
#define COMMAND_TIMEOUT_WIPER_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_WIPER_RPT_HIGH
#define MANUAL_INPUT_WIPER_RPT_HIGH (255)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_MEDIUM
#define MANUAL_INPUT_WIPER_RPT_MEDIUM (254)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_LOW
#define MANUAL_INPUT_WIPER_RPT_LOW (253)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_INTERMITTENT_10
#define MANUAL_INPUT_WIPER_RPT_INTERMITTENT_10 (10)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_INTERMITTENT_9
#define MANUAL_INPUT_WIPER_RPT_INTERMITTENT_9 (9)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_INTERMITTENT_8
#define MANUAL_INPUT_WIPER_RPT_INTERMITTENT_8 (8)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_INTERMITTENT_7
#define MANUAL_INPUT_WIPER_RPT_INTERMITTENT_7 (7)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_INTERMITTENT_6
#define MANUAL_INPUT_WIPER_RPT_INTERMITTENT_6 (6)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_INTERMITTENT_5
#define MANUAL_INPUT_WIPER_RPT_INTERMITTENT_5 (5)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_INTERMITTENT_4
#define MANUAL_INPUT_WIPER_RPT_INTERMITTENT_4 (4)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_INTERMITTENT_3
#define MANUAL_INPUT_WIPER_RPT_INTERMITTENT_3 (3)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_INTERMITTENT_2
#define MANUAL_INPUT_WIPER_RPT_INTERMITTENT_2 (2)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_INTERMITTENT_1
#define MANUAL_INPUT_WIPER_RPT_INTERMITTENT_1 (1)
#endif

#ifndef MANUAL_INPUT_WIPER_RPT_WIPERS_OFF
#define MANUAL_INPUT_WIPER_RPT_WIPERS_OFF (0)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_WIPER_RPT_HIGH
#define COMMANDED_VALUE_WIPER_RPT_HIGH (255)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_MEDIUM
#define COMMANDED_VALUE_WIPER_RPT_MEDIUM (254)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_LOW
#define COMMANDED_VALUE_WIPER_RPT_LOW (253)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_10
#define COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_10 (10)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_9
#define COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_9 (9)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_8
#define COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_8 (8)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_7
#define COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_7 (7)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_6
#define COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_6 (6)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_5
#define COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_5 (5)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_4
#define COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_4 (4)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_3
#define COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_3 (3)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_2
#define COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_2 (2)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_1
#define COMMANDED_VALUE_WIPER_RPT_INTERMITTENT_1 (1)
#endif

#ifndef COMMANDED_VALUE_WIPER_RPT_WIPERS_OFF
#define COMMANDED_VALUE_WIPER_RPT_WIPERS_OFF (0)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_WIPER_RPT_HIGH
#define OUTPUT_VALUE_WIPER_RPT_HIGH (255)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_MEDIUM
#define OUTPUT_VALUE_WIPER_RPT_MEDIUM (254)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_LOW
#define OUTPUT_VALUE_WIPER_RPT_LOW (253)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_10
#define OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_10 (10)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_9
#define OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_9 (9)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_8
#define OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_8 (8)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_7
#define OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_7 (7)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_6
#define OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_6 (6)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_5
#define OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_5 (5)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_4
#define OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_4 (4)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_3
#define OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_3 (3)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_2
#define OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_2 (2)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_1
#define OUTPUT_VALUE_WIPER_RPT_INTERMITTENT_1 (1)
#endif

#ifndef OUTPUT_VALUE_WIPER_RPT_WIPERS_OFF
#define OUTPUT_VALUE_WIPER_RPT_WIPERS_OFF (0)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  255 : "HIGH"
  //  254 : "MEDIUM"
  //  253 : "LOW"
  //  10 : "INTERMITTENT_10"
  //  9 : "INTERMITTENT_9"
  //  8 : "INTERMITTENT_8"
  //  7 : "INTERMITTENT_7"
  //  6 : "INTERMITTENT_6"
  //  5 : "INTERMITTENT_5"
  //  4 : "INTERMITTENT_4"
  //  3 : "INTERMITTENT_3"
  //  2 : "INTERMITTENT_2"
  //  1 : "INTERMITTENT_1"
  //  0 : "WIPERS_OFF"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  255 : "HIGH"
  //  254 : "MEDIUM"
  //  253 : "LOW"
  //  10 : "INTERMITTENT_10"
  //  9 : "INTERMITTENT_9"
  //  8 : "INTERMITTENT_8"
  //  7 : "INTERMITTENT_7"
  //  6 : "INTERMITTENT_6"
  //  5 : "INTERMITTENT_5"
  //  4 : "INTERMITTENT_4"
  //  3 : "INTERMITTENT_3"
  //  2 : "INTERMITTENT_2"
  //  1 : "INTERMITTENT_1"
  //  0 : "WIPERS_OFF"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  255 : "HIGH"
  //  254 : "MEDIUM"
  //  253 : "LOW"
  //  10 : "INTERMITTENT_10"
  //  9 : "INTERMITTENT_9"
  //  8 : "INTERMITTENT_8"
  //  7 : "INTERMITTENT_7"
  //  6 : "INTERMITTENT_6"
  //  5 : "INTERMITTENT_5"
  //  4 : "INTERMITTENT_4"
  //  3 : "INTERMITTENT_3"
  //  2 : "INTERMITTENT_2"
  //  1 : "INTERMITTENT_1"
  //  0 : "WIPERS_OFF"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  255 : "HIGH"
  //  254 : "MEDIUM"
  //  253 : "LOW"
  //  10 : "INTERMITTENT_10"
  //  9 : "INTERMITTENT_9"
  //  8 : "INTERMITTENT_8"
  //  7 : "INTERMITTENT_7"
  //  6 : "INTERMITTENT_6"
  //  5 : "INTERMITTENT_5"
  //  4 : "INTERMITTENT_4"
  //  3 : "INTERMITTENT_3"
  //  2 : "INTERMITTENT_2"
  //  1 : "INTERMITTENT_1"
  //  0 : "WIPERS_OFF"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  255 : "HIGH"
  //  254 : "MEDIUM"
  //  253 : "LOW"
  //  10 : "INTERMITTENT_10"
  //  9 : "INTERMITTENT_9"
  //  8 : "INTERMITTENT_8"
  //  7 : "INTERMITTENT_7"
  //  6 : "INTERMITTENT_6"
  //  5 : "INTERMITTENT_5"
  //  4 : "INTERMITTENT_4"
  //  3 : "INTERMITTENT_3"
  //  2 : "INTERMITTENT_2"
  //  1 : "INTERMITTENT_1"
  //  0 : "WIPERS_OFF"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  255 : "HIGH"
  //  254 : "MEDIUM"
  //  253 : "LOW"
  //  10 : "INTERMITTENT_10"
  //  9 : "INTERMITTENT_9"
  //  8 : "INTERMITTENT_8"
  //  7 : "INTERMITTENT_7"
  //  6 : "INTERMITTENT_6"
  //  5 : "INTERMITTENT_5"
  //  4 : "INTERMITTENT_4"
  //  3 : "INTERMITTENT_3"
  //  2 : "INTERMITTENT_2"
  //  1 : "INTERMITTENT_1"
  //  0 : "WIPERS_OFF"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} WIPER_RPT_t;

// def @SPRAYER_RPT CAN Message (568  0x238)
#define SPRAYER_RPT_IDE (0U)
#define SPRAYER_RPT_DLC (4U)
#define SPRAYER_RPT_CANID (0x238)
#define SPRAYER_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_SPRAYER_RPT_FALSE
#define ENABLED_SPRAYER_RPT_FALSE (0)
#endif

#ifndef ENABLED_SPRAYER_RPT_TRUE
#define ENABLED_SPRAYER_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_SPRAYER_RPT_FALSE
#define OVERRIDE_ACTIVE_SPRAYER_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_SPRAYER_RPT_TRUE
#define OVERRIDE_ACTIVE_SPRAYER_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_SPRAYER_RPT_FALSE
#define COMMAND_OUTPUT_FAULT_SPRAYER_RPT_FALSE (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_SPRAYER_RPT_TRUE
#define COMMAND_OUTPUT_FAULT_SPRAYER_RPT_TRUE (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_SPRAYER_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_SPRAYER_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_SPRAYER_RPT_FAULT
#define INPUT_OUTPUT_FAULT_SPRAYER_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_SPRAYER_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_SPRAYER_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_SPRAYER_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_SPRAYER_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_SPRAYER_RPT_NO_FAULT
#define PACMOD_FAULT_SPRAYER_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_SPRAYER_RPT_FAULT
#define PACMOD_FAULT_SPRAYER_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_SPRAYER_RPT_NO_FAULT
#define VEHICLE_FAULT_SPRAYER_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_SPRAYER_RPT_FAULT
#define VEHICLE_FAULT_SPRAYER_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_SPRAYER_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_SPRAYER_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_SPRAYER_RPT_TIMEOUT
#define COMMAND_TIMEOUT_SPRAYER_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_SPRAYER_RPT_NOT_SPRAYING
#define MANUAL_INPUT_SPRAYER_RPT_NOT_SPRAYING (0)
#endif

#ifndef MANUAL_INPUT_SPRAYER_RPT_SPRAYING
#define MANUAL_INPUT_SPRAYER_RPT_SPRAYING (1)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_SPRAYER_RPT_NOT_SPRAYING
#define COMMANDED_VALUE_SPRAYER_RPT_NOT_SPRAYING (0)
#endif

#ifndef COMMANDED_VALUE_SPRAYER_RPT_SPRAYING
#define COMMANDED_VALUE_SPRAYER_RPT_SPRAYING (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_SPRAYER_RPT_NOT_SPRAYING
#define OUTPUT_VALUE_SPRAYER_RPT_NOT_SPRAYING (0)
#endif

#ifndef OUTPUT_VALUE_SPRAYER_RPT_SPRAYING
#define OUTPUT_VALUE_SPRAYER_RPT_SPRAYING (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t MANUAL_INPUT : 1;                  //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t COMMANDED_VALUE : 1;               //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t OUTPUT_VALUE : 1;                  //      Bits= 1

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t MANUAL_INPUT;                      //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t COMMANDED_VALUE;                   //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t OUTPUT_VALUE;                      //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SPRAYER_RPT_t;

// def @BRAKE_DECEL_RPT CAN Message (572  0x23c)
#define BRAKE_DECEL_RPT_IDE (0U)
#define BRAKE_DECEL_RPT_DLC (7U)
#define BRAKE_DECEL_RPT_CANID (0x23c)

// Value tables for @ENABLED signal

#ifndef ENABLED_BRAKE_DECEL_RPT_FALSE
#define ENABLED_BRAKE_DECEL_RPT_FALSE (0)
#endif

#ifndef ENABLED_BRAKE_DECEL_RPT_TRUE
#define ENABLED_BRAKE_DECEL_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_BRAKE_DECEL_RPT_FALSE
#define OVERRIDE_ACTIVE_BRAKE_DECEL_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_BRAKE_DECEL_RPT_TRUE
#define OVERRIDE_ACTIVE_BRAKE_DECEL_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_BRAKE_DECEL_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_BRAKE_DECEL_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_BRAKE_DECEL_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_BRAKE_DECEL_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_BRAKE_DECEL_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_BRAKE_DECEL_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_BRAKE_DECEL_RPT_FAULT
#define INPUT_OUTPUT_FAULT_BRAKE_DECEL_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_BRAKE_DECEL_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_BRAKE_DECEL_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_BRAKE_DECEL_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_BRAKE_DECEL_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_BRAKE_DECEL_RPT_NO_FAULT
#define PACMOD_FAULT_BRAKE_DECEL_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_BRAKE_DECEL_RPT_FAULT
#define PACMOD_FAULT_BRAKE_DECEL_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_BRAKE_DECEL_RPT_NO_FAULT
#define VEHICLE_FAULT_BRAKE_DECEL_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_BRAKE_DECEL_RPT_FAULT
#define VEHICLE_FAULT_BRAKE_DECEL_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_BRAKE_DECEL_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_BRAKE_DECEL_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_BRAKE_DECEL_RPT_TIMEOUT
#define COMMAND_TIMEOUT_BRAKE_DECEL_RPT_TIMEOUT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  uint16_t MANUAL_INPUT_ro;                  //      Bits=16 Factor= 0.001           Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t COMMANDED_VALUE_ro;               //      Bits=16 Factor= 0.001           Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t OUTPUT_VALUE_ro;                  //      Bits=16 Factor= 0.001           Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  uint16_t MANUAL_INPUT_ro;                  //      Bits=16 Factor= 0.001           Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t COMMANDED_VALUE_ro;               //      Bits=16 Factor= 0.001           Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t OUTPUT_VALUE_ro;                  //      Bits=16 Factor= 0.001           Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_DECEL_RPT_t;

// def @REAR_PASS_DOOR_RPT CAN Message (576  0x240)
#define REAR_PASS_DOOR_RPT_IDE (0U)
#define REAR_PASS_DOOR_RPT_DLC (4U)
#define REAR_PASS_DOOR_RPT_CANID (0x240)
#define REAR_PASS_DOOR_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_REAR_PASS_DOOR_RPT_FALSE
#define ENABLED_REAR_PASS_DOOR_RPT_FALSE (0)
#endif

#ifndef ENABLED_REAR_PASS_DOOR_RPT_TRUE
#define ENABLED_REAR_PASS_DOOR_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_REAR_PASS_DOOR_RPT_FALSE
#define OVERRIDE_ACTIVE_REAR_PASS_DOOR_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_REAR_PASS_DOOR_RPT_TRUE
#define OVERRIDE_ACTIVE_REAR_PASS_DOOR_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_REAR_PASS_DOOR_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_REAR_PASS_DOOR_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_REAR_PASS_DOOR_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_REAR_PASS_DOOR_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_REAR_PASS_DOOR_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_REAR_PASS_DOOR_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_REAR_PASS_DOOR_RPT_FAULT
#define INPUT_OUTPUT_FAULT_REAR_PASS_DOOR_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_REAR_PASS_DOOR_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_REAR_PASS_DOOR_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_REAR_PASS_DOOR_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_REAR_PASS_DOOR_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_REAR_PASS_DOOR_RPT_NO_FAULT
#define PACMOD_FAULT_REAR_PASS_DOOR_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_REAR_PASS_DOOR_RPT_FAULT
#define PACMOD_FAULT_REAR_PASS_DOOR_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_REAR_PASS_DOOR_RPT_NO_FAULT
#define VEHICLE_FAULT_REAR_PASS_DOOR_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_REAR_PASS_DOOR_RPT_FAULT
#define VEHICLE_FAULT_REAR_PASS_DOOR_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_REAR_PASS_DOOR_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_REAR_PASS_DOOR_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_REAR_PASS_DOOR_RPT_TIMEOUT
#define COMMAND_TIMEOUT_REAR_PASS_DOOR_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_REAR_PASS_DOOR_RPT_NEUTRAL
#define MANUAL_INPUT_REAR_PASS_DOOR_RPT_NEUTRAL (0)
#endif

#ifndef MANUAL_INPUT_REAR_PASS_DOOR_RPT_OPEN
#define MANUAL_INPUT_REAR_PASS_DOOR_RPT_OPEN (1)
#endif

#ifndef MANUAL_INPUT_REAR_PASS_DOOR_RPT_CLOSE
#define MANUAL_INPUT_REAR_PASS_DOOR_RPT_CLOSE (2)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_REAR_PASS_DOOR_RPT_NEUTRAL
#define COMMANDED_VALUE_REAR_PASS_DOOR_RPT_NEUTRAL (0)
#endif

#ifndef COMMANDED_VALUE_REAR_PASS_DOOR_RPT_OPEN
#define COMMANDED_VALUE_REAR_PASS_DOOR_RPT_OPEN (1)
#endif

#ifndef COMMANDED_VALUE_REAR_PASS_DOOR_RPT_CLOSE
#define COMMANDED_VALUE_REAR_PASS_DOOR_RPT_CLOSE (2)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_REAR_PASS_DOOR_RPT_NEUTRAL
#define OUTPUT_VALUE_REAR_PASS_DOOR_RPT_NEUTRAL (0)
#endif

#ifndef OUTPUT_VALUE_REAR_PASS_DOOR_RPT_OPEN
#define OUTPUT_VALUE_REAR_PASS_DOOR_RPT_OPEN (1)
#endif

#ifndef OUTPUT_VALUE_REAR_PASS_DOOR_RPT_CLOSE
#define OUTPUT_VALUE_REAR_PASS_DOOR_RPT_CLOSE (2)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "NEUTRAL"
  //  1 : "OPEN"
  //  2 : "CLOSE"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "NEUTRAL"
  //  1 : "OPEN"
  //  2 : "CLOSE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "NEUTRAL"
  //  1 : "OPEN"
  //  2 : "CLOSE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "NEUTRAL"
  //  1 : "OPEN"
  //  2 : "CLOSE"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "NEUTRAL"
  //  1 : "OPEN"
  //  2 : "CLOSE"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "NEUTRAL"
  //  1 : "OPEN"
  //  2 : "CLOSE"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} REAR_PASS_DOOR_RPT_t;

// def @ENGINE_BRAKE_RPT CAN Message (580  0x244)
#define ENGINE_BRAKE_RPT_IDE (0U)
#define ENGINE_BRAKE_RPT_DLC (5U)
#define ENGINE_BRAKE_RPT_CANID (0x244)

// Value tables for @ENABLED signal

#ifndef ENABLED_ENGINE_BRAKE_RPT_FALSE
#define ENABLED_ENGINE_BRAKE_RPT_FALSE (0)
#endif

#ifndef ENABLED_ENGINE_BRAKE_RPT_TRUE
#define ENABLED_ENGINE_BRAKE_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_ENGINE_BRAKE_RPT_FALSE
#define OVERRIDE_ACTIVE_ENGINE_BRAKE_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_ENGINE_BRAKE_RPT_TRUE
#define OVERRIDE_ACTIVE_ENGINE_BRAKE_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_ENGINE_BRAKE_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_ENGINE_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_ENGINE_BRAKE_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_ENGINE_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_ENGINE_BRAKE_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_ENGINE_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_ENGINE_BRAKE_RPT_FAULT
#define INPUT_OUTPUT_FAULT_ENGINE_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_ENGINE_BRAKE_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_ENGINE_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_ENGINE_BRAKE_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_ENGINE_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_ENGINE_BRAKE_RPT_NO_FAULT
#define PACMOD_FAULT_ENGINE_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_ENGINE_BRAKE_RPT_FAULT
#define PACMOD_FAULT_ENGINE_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_ENGINE_BRAKE_RPT_NO_FAULT
#define VEHICLE_FAULT_ENGINE_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_ENGINE_BRAKE_RPT_FAULT
#define VEHICLE_FAULT_ENGINE_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_ENGINE_BRAKE_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_ENGINE_BRAKE_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_ENGINE_BRAKE_RPT_TIMEOUT
#define COMMAND_TIMEOUT_ENGINE_BRAKE_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_ENGINE_BRAKE_RPT_OFF
#define MANUAL_INPUT_ENGINE_BRAKE_RPT_OFF (0)
#endif

#ifndef MANUAL_INPUT_ENGINE_BRAKE_RPT_LEVEL_1
#define MANUAL_INPUT_ENGINE_BRAKE_RPT_LEVEL_1 (1)
#endif

#ifndef MANUAL_INPUT_ENGINE_BRAKE_RPT_LEVEL_2
#define MANUAL_INPUT_ENGINE_BRAKE_RPT_LEVEL_2 (2)
#endif

#ifndef MANUAL_INPUT_ENGINE_BRAKE_RPT_LEVEL_3
#define MANUAL_INPUT_ENGINE_BRAKE_RPT_LEVEL_3 (3)
#endif

#ifndef MANUAL_INPUT_ENGINE_BRAKE_RPT_LEVEL_4
#define MANUAL_INPUT_ENGINE_BRAKE_RPT_LEVEL_4 (4)
#endif

#ifndef MANUAL_INPUT_ENGINE_BRAKE_RPT_LEVEL_5
#define MANUAL_INPUT_ENGINE_BRAKE_RPT_LEVEL_5 (5)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_ENGINE_BRAKE_RPT_OFF
#define COMMANDED_VALUE_ENGINE_BRAKE_RPT_OFF (0)
#endif

#ifndef COMMANDED_VALUE_ENGINE_BRAKE_RPT_LEVEL_1
#define COMMANDED_VALUE_ENGINE_BRAKE_RPT_LEVEL_1 (1)
#endif

#ifndef COMMANDED_VALUE_ENGINE_BRAKE_RPT_LEVEL_2
#define COMMANDED_VALUE_ENGINE_BRAKE_RPT_LEVEL_2 (2)
#endif

#ifndef COMMANDED_VALUE_ENGINE_BRAKE_RPT_LEVEL_3
#define COMMANDED_VALUE_ENGINE_BRAKE_RPT_LEVEL_3 (3)
#endif

#ifndef COMMANDED_VALUE_ENGINE_BRAKE_RPT_LEVEL_4
#define COMMANDED_VALUE_ENGINE_BRAKE_RPT_LEVEL_4 (4)
#endif

#ifndef COMMANDED_VALUE_ENGINE_BRAKE_RPT_LEVEL_5
#define COMMANDED_VALUE_ENGINE_BRAKE_RPT_LEVEL_5 (5)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_ENGINE_BRAKE_RPT_OFF
#define OUTPUT_VALUE_ENGINE_BRAKE_RPT_OFF (0)
#endif

#ifndef OUTPUT_VALUE_ENGINE_BRAKE_RPT_LEVEL_1
#define OUTPUT_VALUE_ENGINE_BRAKE_RPT_LEVEL_1 (1)
#endif

#ifndef OUTPUT_VALUE_ENGINE_BRAKE_RPT_LEVEL_2
#define OUTPUT_VALUE_ENGINE_BRAKE_RPT_LEVEL_2 (2)
#endif

#ifndef OUTPUT_VALUE_ENGINE_BRAKE_RPT_LEVEL_3
#define OUTPUT_VALUE_ENGINE_BRAKE_RPT_LEVEL_3 (3)
#endif

#ifndef OUTPUT_VALUE_ENGINE_BRAKE_RPT_LEVEL_4
#define OUTPUT_VALUE_ENGINE_BRAKE_RPT_LEVEL_4 (4)
#endif

#ifndef OUTPUT_VALUE_ENGINE_BRAKE_RPT_LEVEL_5
#define OUTPUT_VALUE_ENGINE_BRAKE_RPT_LEVEL_5 (5)
#endif


// Value tables for @MAN_AUTO signal

#ifndef MAN_AUTO_ENGINE_BRAKE_RPT_AUTO_OFF
#define MAN_AUTO_ENGINE_BRAKE_RPT_AUTO_OFF (0)
#endif

#ifndef MAN_AUTO_ENGINE_BRAKE_RPT_AUTO_ON
#define MAN_AUTO_ENGINE_BRAKE_RPT_AUTO_ON (1)
#endif


// Value tables for @CMD_AUTO signal

#ifndef CMD_AUTO_ENGINE_BRAKE_RPT_AUTO_OFF
#define CMD_AUTO_ENGINE_BRAKE_RPT_AUTO_OFF (0)
#endif

#ifndef CMD_AUTO_ENGINE_BRAKE_RPT_AUTO_ON
#define CMD_AUTO_ENGINE_BRAKE_RPT_AUTO_ON (1)
#endif


// Value tables for @OUT_AUTO signal

#ifndef OUT_AUTO_ENGINE_BRAKE_RPT_AUTO_OFF
#define OUT_AUTO_ENGINE_BRAKE_RPT_AUTO_OFF (0)
#endif

#ifndef OUT_AUTO_ENGINE_BRAKE_RPT_AUTO_ON
#define OUT_AUTO_ENGINE_BRAKE_RPT_AUTO_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  // Brake aggressiveness increases with increasing numerical values. Each operator control setting maps one-to-one with each LEVEL, starting with 1. Higher LEVELs with no match map to maximum.
  //  0 : "OFF"
  //  1 : "LEVEL_1"
  //  2 : "LEVEL_2"
  //  3 : "LEVEL_3"
  //  4 : "LEVEL_4"
  //  5 : "LEVEL_5"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  // Brake aggressiveness increases with increasing numerical values. Each operator control setting maps one-to-one with each LEVEL, starting with 1. Higher LEVELs with no match map to maximum.
  //  0 : "OFF"
  //  1 : "LEVEL_1"
  //  2 : "LEVEL_2"
  //  3 : "LEVEL_3"
  //  4 : "LEVEL_4"
  //  5 : "LEVEL_5"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  // Brake aggressiveness increases with increasing numerical values. Each operator control setting maps one-to-one with each LEVEL, starting with 1. Higher LEVELs with no match map to maximum.
  //  0 : "OFF"
  //  1 : "LEVEL_1"
  //  2 : "LEVEL_2"
  //  3 : "LEVEL_3"
  //  4 : "LEVEL_4"
  //  5 : "LEVEL_5"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

  // Braking aggressiveness automatic while AUTO_ON.
  //  0 : "AUTO_OFF"
  //  1 : "AUTO_ON"
  uint8_t MAN_AUTO : 2;                      //      Bits= 2

  // Braking aggressiveness automatic while AUTO_ON.
  //  0 : "AUTO_OFF"
  //  1 : "AUTO_ON"
  uint8_t CMD_AUTO : 2;                      //      Bits= 2

  // Braking aggressiveness automatic while AUTO_ON.
  //  0 : "AUTO_OFF"
  //  1 : "AUTO_ON"
  uint8_t OUT_AUTO : 2;                      //      Bits= 2

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  // Brake aggressiveness increases with increasing numerical values. Each operator control setting maps one-to-one with each LEVEL, starting with 1. Higher LEVELs with no match map to maximum.
  //  0 : "OFF"
  //  1 : "LEVEL_1"
  //  2 : "LEVEL_2"
  //  3 : "LEVEL_3"
  //  4 : "LEVEL_4"
  //  5 : "LEVEL_5"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  // Brake aggressiveness increases with increasing numerical values. Each operator control setting maps one-to-one with each LEVEL, starting with 1. Higher LEVELs with no match map to maximum.
  //  0 : "OFF"
  //  1 : "LEVEL_1"
  //  2 : "LEVEL_2"
  //  3 : "LEVEL_3"
  //  4 : "LEVEL_4"
  //  5 : "LEVEL_5"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  // Brake aggressiveness increases with increasing numerical values. Each operator control setting maps one-to-one with each LEVEL, starting with 1. Higher LEVELs with no match map to maximum.
  //  0 : "OFF"
  //  1 : "LEVEL_1"
  //  2 : "LEVEL_2"
  //  3 : "LEVEL_3"
  //  4 : "LEVEL_4"
  //  5 : "LEVEL_5"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

  // Braking aggressiveness automatic while AUTO_ON.
  //  0 : "AUTO_OFF"
  //  1 : "AUTO_ON"
  uint8_t MAN_AUTO;                          //      Bits= 2

  // Braking aggressiveness automatic while AUTO_ON.
  //  0 : "AUTO_OFF"
  //  1 : "AUTO_ON"
  uint8_t CMD_AUTO;                          //      Bits= 2

  // Braking aggressiveness automatic while AUTO_ON.
  //  0 : "AUTO_OFF"
  //  1 : "AUTO_ON"
  uint8_t OUT_AUTO;                          //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ENGINE_BRAKE_RPT_t;

// def @EXHAUST_BRAKE_RPT CAN Message (581  0x245)
#define EXHAUST_BRAKE_RPT_IDE (0U)
#define EXHAUST_BRAKE_RPT_DLC (4U)
#define EXHAUST_BRAKE_RPT_CANID (0x245)
#define EXHAUST_BRAKE_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_EXHAUST_BRAKE_RPT_FALSE
#define ENABLED_EXHAUST_BRAKE_RPT_FALSE (0)
#endif

#ifndef ENABLED_EXHAUST_BRAKE_RPT_TRUE
#define ENABLED_EXHAUST_BRAKE_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_EXHAUST_BRAKE_RPT_FALSE
#define OVERRIDE_ACTIVE_EXHAUST_BRAKE_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_EXHAUST_BRAKE_RPT_TRUE
#define OVERRIDE_ACTIVE_EXHAUST_BRAKE_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_EXHAUST_BRAKE_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_EXHAUST_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_EXHAUST_BRAKE_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_EXHAUST_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_EXHAUST_BRAKE_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_EXHAUST_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_EXHAUST_BRAKE_RPT_FAULT
#define INPUT_OUTPUT_FAULT_EXHAUST_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_EXHAUST_BRAKE_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_EXHAUST_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_EXHAUST_BRAKE_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_EXHAUST_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_EXHAUST_BRAKE_RPT_NO_FAULT
#define PACMOD_FAULT_EXHAUST_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_EXHAUST_BRAKE_RPT_FAULT
#define PACMOD_FAULT_EXHAUST_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_EXHAUST_BRAKE_RPT_NO_FAULT
#define VEHICLE_FAULT_EXHAUST_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_EXHAUST_BRAKE_RPT_FAULT
#define VEHICLE_FAULT_EXHAUST_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_EXHAUST_BRAKE_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_EXHAUST_BRAKE_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_EXHAUST_BRAKE_RPT_TIMEOUT
#define COMMAND_TIMEOUT_EXHAUST_BRAKE_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_EXHAUST_BRAKE_RPT_OFF
#define MANUAL_INPUT_EXHAUST_BRAKE_RPT_OFF (0)
#endif

#ifndef MANUAL_INPUT_EXHAUST_BRAKE_RPT_ON
#define MANUAL_INPUT_EXHAUST_BRAKE_RPT_ON (1)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_EXHAUST_BRAKE_RPT_OFF
#define COMMANDED_VALUE_EXHAUST_BRAKE_RPT_OFF (0)
#endif

#ifndef COMMANDED_VALUE_EXHAUST_BRAKE_RPT_ON
#define COMMANDED_VALUE_EXHAUST_BRAKE_RPT_ON (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_EXHAUST_BRAKE_RPT_OFF
#define OUTPUT_VALUE_EXHAUST_BRAKE_RPT_OFF (0)
#endif

#ifndef OUTPUT_VALUE_EXHAUST_BRAKE_RPT_ON
#define OUTPUT_VALUE_EXHAUST_BRAKE_RPT_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} EXHAUST_BRAKE_RPT_t;

// def @MARKER_LAMP_RPT CAN Message (584  0x248)
#define MARKER_LAMP_RPT_IDE (0U)
#define MARKER_LAMP_RPT_DLC (4U)
#define MARKER_LAMP_RPT_CANID (0x248)
#define MARKER_LAMP_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_MARKER_LAMP_RPT_FALSE
#define ENABLED_MARKER_LAMP_RPT_FALSE (0)
#endif

#ifndef ENABLED_MARKER_LAMP_RPT_TRUE
#define ENABLED_MARKER_LAMP_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_MARKER_LAMP_RPT_FALSE
#define OVERRIDE_ACTIVE_MARKER_LAMP_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_MARKER_LAMP_RPT_TRUE
#define OVERRIDE_ACTIVE_MARKER_LAMP_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_MARKER_LAMP_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_MARKER_LAMP_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_MARKER_LAMP_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_MARKER_LAMP_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_MARKER_LAMP_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_MARKER_LAMP_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_MARKER_LAMP_RPT_FAULT
#define INPUT_OUTPUT_FAULT_MARKER_LAMP_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_MARKER_LAMP_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_MARKER_LAMP_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_MARKER_LAMP_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_MARKER_LAMP_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_MARKER_LAMP_RPT_NO_FAULT
#define PACMOD_FAULT_MARKER_LAMP_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_MARKER_LAMP_RPT_FAULT
#define PACMOD_FAULT_MARKER_LAMP_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_MARKER_LAMP_RPT_NO_FAULT
#define VEHICLE_FAULT_MARKER_LAMP_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_MARKER_LAMP_RPT_FAULT
#define VEHICLE_FAULT_MARKER_LAMP_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_MARKER_LAMP_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_MARKER_LAMP_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_MARKER_LAMP_RPT_TIMEOUT
#define COMMAND_TIMEOUT_MARKER_LAMP_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_MARKER_LAMP_RPT_OFF
#define MANUAL_INPUT_MARKER_LAMP_RPT_OFF (0)
#endif

#ifndef MANUAL_INPUT_MARKER_LAMP_RPT_ON
#define MANUAL_INPUT_MARKER_LAMP_RPT_ON (1)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_MARKER_LAMP_RPT_OFF
#define COMMANDED_VALUE_MARKER_LAMP_RPT_OFF (0)
#endif

#ifndef COMMANDED_VALUE_MARKER_LAMP_RPT_ON
#define COMMANDED_VALUE_MARKER_LAMP_RPT_ON (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_MARKER_LAMP_RPT_OFF
#define OUTPUT_VALUE_MARKER_LAMP_RPT_OFF (0)
#endif

#ifndef OUTPUT_VALUE_MARKER_LAMP_RPT_ON
#define OUTPUT_VALUE_MARKER_LAMP_RPT_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT : 1;                  //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE : 1;                  //      Bits= 1

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} MARKER_LAMP_RPT_t;

// def @CABIN_TEMP_RPT CAN Message (588  0x24c)
#define CABIN_TEMP_RPT_IDE (0U)
#define CABIN_TEMP_RPT_DLC (4U)
#define CABIN_TEMP_RPT_CANID (0x24c)
#define CABIN_TEMP_RPT_CYC (1000U)

// Value tables for @ENABLED signal

#ifndef ENABLED_CABIN_TEMP_RPT_FALSE
#define ENABLED_CABIN_TEMP_RPT_FALSE (0)
#endif

#ifndef ENABLED_CABIN_TEMP_RPT_TRUE
#define ENABLED_CABIN_TEMP_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_CABIN_TEMP_RPT_FALSE
#define OVERRIDE_ACTIVE_CABIN_TEMP_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_CABIN_TEMP_RPT_TRUE
#define OVERRIDE_ACTIVE_CABIN_TEMP_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_CABIN_TEMP_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_CABIN_TEMP_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_CABIN_TEMP_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_CABIN_TEMP_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_CABIN_TEMP_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_CABIN_TEMP_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_CABIN_TEMP_RPT_FAULT
#define INPUT_OUTPUT_FAULT_CABIN_TEMP_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_CABIN_TEMP_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_CABIN_TEMP_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_CABIN_TEMP_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_CABIN_TEMP_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_CABIN_TEMP_RPT_NO_FAULT
#define PACMOD_FAULT_CABIN_TEMP_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_CABIN_TEMP_RPT_FAULT
#define PACMOD_FAULT_CABIN_TEMP_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_CABIN_TEMP_RPT_NO_FAULT
#define VEHICLE_FAULT_CABIN_TEMP_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_CABIN_TEMP_RPT_FAULT
#define VEHICLE_FAULT_CABIN_TEMP_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_CABIN_TEMP_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_CABIN_TEMP_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_CABIN_TEMP_RPT_TIMEOUT
#define COMMAND_TIMEOUT_CABIN_TEMP_RPT_TIMEOUT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  uint8_t MANUAL_INPUT_ro;                   //      Bits= 8 Offset= 10.0               Factor= 0.1             Unit:'deg_C'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t COMMANDED_VALUE_ro;                //      Bits= 8 Offset= 10.0               Factor= 0.1             Unit:'deg_C'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t OUTPUT_VALUE_ro;                   //      Bits= 8 Offset= 10.0               Factor= 0.1             Unit:'deg_C'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  uint8_t MANUAL_INPUT_ro;                   //      Bits= 8 Offset= 10.0               Factor= 0.1             Unit:'deg_C'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t COMMANDED_VALUE_ro;                //      Bits= 8 Offset= 10.0               Factor= 0.1             Unit:'deg_C'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t OUTPUT_VALUE_ro;                   //      Bits= 8 Offset= 10.0               Factor= 0.1             Unit:'deg_C'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} CABIN_TEMP_RPT_t;

// def @CABIN_FAN_SPEED_RPT CAN Message (592  0x250)
#define CABIN_FAN_SPEED_RPT_IDE (0U)
#define CABIN_FAN_SPEED_RPT_DLC (4U)
#define CABIN_FAN_SPEED_RPT_CANID (0x250)
#define CABIN_FAN_SPEED_RPT_CYC (1000U)

// Value tables for @ENABLED signal

#ifndef ENABLED_CABIN_FAN_SPEED_RPT_FALSE
#define ENABLED_CABIN_FAN_SPEED_RPT_FALSE (0)
#endif

#ifndef ENABLED_CABIN_FAN_SPEED_RPT_TRUE
#define ENABLED_CABIN_FAN_SPEED_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_CABIN_FAN_SPEED_RPT_FALSE
#define OVERRIDE_ACTIVE_CABIN_FAN_SPEED_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_CABIN_FAN_SPEED_RPT_TRUE
#define OVERRIDE_ACTIVE_CABIN_FAN_SPEED_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_CABIN_FAN_SPEED_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_CABIN_FAN_SPEED_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_CABIN_FAN_SPEED_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_CABIN_FAN_SPEED_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_CABIN_FAN_SPEED_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_CABIN_FAN_SPEED_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_CABIN_FAN_SPEED_RPT_FAULT
#define INPUT_OUTPUT_FAULT_CABIN_FAN_SPEED_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_CABIN_FAN_SPEED_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_CABIN_FAN_SPEED_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_CABIN_FAN_SPEED_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_CABIN_FAN_SPEED_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_CABIN_FAN_SPEED_RPT_NO_FAULT
#define PACMOD_FAULT_CABIN_FAN_SPEED_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_CABIN_FAN_SPEED_RPT_FAULT
#define PACMOD_FAULT_CABIN_FAN_SPEED_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_CABIN_FAN_SPEED_RPT_NO_FAULT
#define VEHICLE_FAULT_CABIN_FAN_SPEED_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_CABIN_FAN_SPEED_RPT_FAULT
#define VEHICLE_FAULT_CABIN_FAN_SPEED_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_CABIN_FAN_SPEED_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_CABIN_FAN_SPEED_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_CABIN_FAN_SPEED_RPT_TIMEOUT
#define COMMAND_TIMEOUT_CABIN_FAN_SPEED_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_OFF
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_OFF (0)
#endif

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_1
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_1 (1)
#endif

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_2
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_2 (2)
#endif

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_3
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_3 (3)
#endif

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_4
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_4 (4)
#endif

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_5
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_5 (5)
#endif

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_6
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_6 (6)
#endif

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_7
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_7 (7)
#endif

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_8
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_8 (8)
#endif

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_9
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_9 (9)
#endif

#ifndef MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_10
#define MANUAL_INPUT_CABIN_FAN_SPEED_RPT_FAN_SPEED_10 (10)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_OFF
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_OFF (0)
#endif

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_1
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_1 (1)
#endif

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_2
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_2 (2)
#endif

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_3
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_3 (3)
#endif

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_4
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_4 (4)
#endif

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_5
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_5 (5)
#endif

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_6
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_6 (6)
#endif

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_7
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_7 (7)
#endif

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_8
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_8 (8)
#endif

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_9
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_9 (9)
#endif

#ifndef COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_10
#define COMMANDED_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_10 (10)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_OFF
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_OFF (0)
#endif

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_1
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_1 (1)
#endif

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_2
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_2 (2)
#endif

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_3
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_3 (3)
#endif

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_4
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_4 (4)
#endif

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_5
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_5 (5)
#endif

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_6
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_6 (6)
#endif

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_7
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_7 (7)
#endif

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_8
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_8 (8)
#endif

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_9
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_9 (9)
#endif

#ifndef OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_10
#define OUTPUT_VALUE_CABIN_FAN_SPEED_RPT_FAN_SPEED_10 (10)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "FAN_OFF"
  //  1 : "FAN_SPEED_1"
  //  2 : "FAN_SPEED_2"
  //  3 : "FAN_SPEED_3"
  //  4 : "FAN_SPEED_4"
  //  5 : "FAN_SPEED_5"
  //  6 : "FAN_SPEED_6"
  //  7 : "FAN_SPEED_7"
  //  8 : "FAN_SPEED_8"
  //  9 : "FAN_SPEED_9"
  //  10 : "FAN_SPEED_10"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "FAN_OFF"
  //  1 : "FAN_SPEED_1"
  //  2 : "FAN_SPEED_2"
  //  3 : "FAN_SPEED_3"
  //  4 : "FAN_SPEED_4"
  //  5 : "FAN_SPEED_5"
  //  6 : "FAN_SPEED_6"
  //  7 : "FAN_SPEED_7"
  //  8 : "FAN_SPEED_8"
  //  9 : "FAN_SPEED_9"
  //  10 : "FAN_SPEED_10"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "FAN_OFF"
  //  1 : "FAN_SPEED_1"
  //  2 : "FAN_SPEED_2"
  //  3 : "FAN_SPEED_3"
  //  4 : "FAN_SPEED_4"
  //  5 : "FAN_SPEED_5"
  //  6 : "FAN_SPEED_6"
  //  7 : "FAN_SPEED_7"
  //  8 : "FAN_SPEED_8"
  //  9 : "FAN_SPEED_9"
  //  10 : "FAN_SPEED_10"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "FAN_OFF"
  //  1 : "FAN_SPEED_1"
  //  2 : "FAN_SPEED_2"
  //  3 : "FAN_SPEED_3"
  //  4 : "FAN_SPEED_4"
  //  5 : "FAN_SPEED_5"
  //  6 : "FAN_SPEED_6"
  //  7 : "FAN_SPEED_7"
  //  8 : "FAN_SPEED_8"
  //  9 : "FAN_SPEED_9"
  //  10 : "FAN_SPEED_10"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "FAN_OFF"
  //  1 : "FAN_SPEED_1"
  //  2 : "FAN_SPEED_2"
  //  3 : "FAN_SPEED_3"
  //  4 : "FAN_SPEED_4"
  //  5 : "FAN_SPEED_5"
  //  6 : "FAN_SPEED_6"
  //  7 : "FAN_SPEED_7"
  //  8 : "FAN_SPEED_8"
  //  9 : "FAN_SPEED_9"
  //  10 : "FAN_SPEED_10"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "FAN_OFF"
  //  1 : "FAN_SPEED_1"
  //  2 : "FAN_SPEED_2"
  //  3 : "FAN_SPEED_3"
  //  4 : "FAN_SPEED_4"
  //  5 : "FAN_SPEED_5"
  //  6 : "FAN_SPEED_6"
  //  7 : "FAN_SPEED_7"
  //  8 : "FAN_SPEED_8"
  //  9 : "FAN_SPEED_9"
  //  10 : "FAN_SPEED_10"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} CABIN_FAN_SPEED_RPT_t;

// def @CABIN_CLIMATE_RPT CAN Message (596  0x254)
#define CABIN_CLIMATE_RPT_IDE (0U)
#define CABIN_CLIMATE_RPT_DLC (7U)
#define CABIN_CLIMATE_RPT_CANID (0x254)
#define CABIN_CLIMATE_RPT_CYC (1000U)

// Value tables for @ENABLED signal

#ifndef ENABLED_CABIN_CLIMATE_RPT_FALSE
#define ENABLED_CABIN_CLIMATE_RPT_FALSE (0)
#endif

#ifndef ENABLED_CABIN_CLIMATE_RPT_TRUE
#define ENABLED_CABIN_CLIMATE_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_CABIN_CLIMATE_RPT_FALSE
#define OVERRIDE_ACTIVE_CABIN_CLIMATE_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_CABIN_CLIMATE_RPT_TRUE
#define OVERRIDE_ACTIVE_CABIN_CLIMATE_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_CABIN_CLIMATE_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_CABIN_CLIMATE_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_CABIN_CLIMATE_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_CABIN_CLIMATE_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_CABIN_CLIMATE_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_CABIN_CLIMATE_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_CABIN_CLIMATE_RPT_FAULT
#define INPUT_OUTPUT_FAULT_CABIN_CLIMATE_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_CABIN_CLIMATE_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_CABIN_CLIMATE_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_CABIN_CLIMATE_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_CABIN_CLIMATE_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_CABIN_CLIMATE_RPT_NO_FAULT
#define PACMOD_FAULT_CABIN_CLIMATE_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_CABIN_CLIMATE_RPT_FAULT
#define PACMOD_FAULT_CABIN_CLIMATE_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_CABIN_CLIMATE_RPT_NO_FAULT
#define VEHICLE_FAULT_CABIN_CLIMATE_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_CABIN_CLIMATE_RPT_FAULT
#define VEHICLE_FAULT_CABIN_CLIMATE_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_CABIN_CLIMATE_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_CABIN_CLIMATE_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_CABIN_CLIMATE_RPT_TIMEOUT
#define COMMAND_TIMEOUT_CABIN_CLIMATE_RPT_TIMEOUT (1)
#endif


// Value tables for @MAN_AC_OFF_ON signal

#ifndef MAN_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define MAN_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef MAN_AC_OFF_ON_CABIN_CLIMATE_RPT_ON
#define MAN_AC_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @MAN_MAX_AC_OFF_ON signal

#ifndef MAN_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define MAN_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef MAN_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_ON
#define MAN_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @MAN_DEFROST_OFF_ON signal

#ifndef MAN_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define MAN_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef MAN_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON
#define MAN_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @MAN_MAX_DEFROST_OFF_ON signal

#ifndef MAN_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define MAN_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef MAN_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON
#define MAN_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @MAN_DIR_UP_OFF_ON signal

#ifndef MAN_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define MAN_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef MAN_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_ON
#define MAN_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @MAN_DIR_DOWN_OFF_ON signal

#ifndef MAN_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define MAN_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef MAN_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_ON
#define MAN_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @CMD_AC_OFF_ON signal

#ifndef CMD_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define CMD_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef CMD_AC_OFF_ON_CABIN_CLIMATE_RPT_ON
#define CMD_AC_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @CMD_MAX_AC_OFF_ON signal

#ifndef CMD_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define CMD_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef CMD_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_ON
#define CMD_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @CMD_DEFROST_OFF_ON signal

#ifndef CMD_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define CMD_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef CMD_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON
#define CMD_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @CMD_MAX_DEFROST_OFF_ON signal

#ifndef CMD_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define CMD_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef CMD_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON
#define CMD_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @CMD_DIR_UP_OFF_ON signal

#ifndef CMD_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define CMD_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef CMD_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_ON
#define CMD_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @CMD_DIR_DOWN_OFF_ON signal

#ifndef CMD_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define CMD_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef CMD_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_ON
#define CMD_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @OUT_AC_OFF_ON signal

#ifndef OUT_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define OUT_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef OUT_AC_OFF_ON_CABIN_CLIMATE_RPT_ON
#define OUT_AC_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @OUT_MAX_AC_OFF_ON signal

#ifndef OUT_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define OUT_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef OUT_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_ON
#define OUT_MAX_AC_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @OUT_DEFROST_OFF_ON signal

#ifndef OUT_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define OUT_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef OUT_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON
#define OUT_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @OUT_MAX_DEFROST_OFF_ON signal

#ifndef OUT_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define OUT_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef OUT_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON
#define OUT_MAX_DEFROST_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @OUT_DIR_UP_OFF_ON signal

#ifndef OUT_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define OUT_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef OUT_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_ON
#define OUT_DIR_UP_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


// Value tables for @OUT_DIR_DOWN_OFF_ON signal

#ifndef OUT_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_OFF
#define OUT_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_OFF (0)
#endif

#ifndef OUT_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_ON
#define OUT_DIR_DOWN_OFF_ON_CABIN_CLIMATE_RPT_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_AC_OFF_ON : 2;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_MAX_AC_OFF_ON : 2;             //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_DEFROST_OFF_ON : 2;            //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_MAX_DEFROST_OFF_ON : 2;        //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_DIR_UP_OFF_ON : 2;             //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_DIR_DOWN_OFF_ON : 2;           //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_AC_OFF_ON : 2;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_MAX_AC_OFF_ON : 2;             //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DEFROST_OFF_ON : 2;            //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_MAX_DEFROST_OFF_ON : 2;        //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DIR_UP_OFF_ON : 2;             //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DIR_DOWN_OFF_ON : 2;           //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_AC_OFF_ON : 2;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_MAX_AC_OFF_ON : 2;             //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_DEFROST_OFF_ON : 2;            //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_MAX_DEFROST_OFF_ON : 2;        //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_DIR_UP_OFF_ON : 2;             //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_DIR_DOWN_OFF_ON : 2;           //      Bits= 2

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_AC_OFF_ON;                     //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_MAX_AC_OFF_ON;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_DEFROST_OFF_ON;                //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_MAX_DEFROST_OFF_ON;            //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_DIR_UP_OFF_ON;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MAN_DIR_DOWN_OFF_ON;               //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_AC_OFF_ON;                     //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_MAX_AC_OFF_ON;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DEFROST_OFF_ON;                //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_MAX_DEFROST_OFF_ON;            //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DIR_UP_OFF_ON;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t CMD_DIR_DOWN_OFF_ON;               //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_AC_OFF_ON;                     //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_MAX_AC_OFF_ON;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_DEFROST_OFF_ON;                //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_MAX_DEFROST_OFF_ON;            //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_DIR_UP_OFF_ON;                 //      Bits= 2

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUT_DIR_DOWN_OFF_ON;               //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} CABIN_CLIMATE_RPT_t;

// def @TIPPER_BODY_RPT_00 CAN Message (600  0x258)
#define TIPPER_BODY_RPT_00_IDE (0U)
#define TIPPER_BODY_RPT_00_DLC (4U)
#define TIPPER_BODY_RPT_00_CANID (0x258)
#define TIPPER_BODY_RPT_00_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_TIPPER_BODY_RPT_00_FALSE
#define ENABLED_TIPPER_BODY_RPT_00_FALSE (0)
#endif

#ifndef ENABLED_TIPPER_BODY_RPT_00_TRUE
#define ENABLED_TIPPER_BODY_RPT_00_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_TIPPER_BODY_RPT_00_FALSE
#define OVERRIDE_ACTIVE_TIPPER_BODY_RPT_00_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_TIPPER_BODY_RPT_00_TRUE
#define OVERRIDE_ACTIVE_TIPPER_BODY_RPT_00_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_00_NO_FAULT
#define COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_00_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_00_FAULT
#define COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_00_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_00_NO_FAULT
#define INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_00_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_00_FAULT
#define INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_00_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_00_NO_FAULT
#define OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_00_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_00_FAULT
#define OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_00_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_TIPPER_BODY_RPT_00_NO_FAULT
#define PACMOD_FAULT_TIPPER_BODY_RPT_00_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_TIPPER_BODY_RPT_00_FAULT
#define PACMOD_FAULT_TIPPER_BODY_RPT_00_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_TIPPER_BODY_RPT_00_NO_FAULT
#define VEHICLE_FAULT_TIPPER_BODY_RPT_00_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_TIPPER_BODY_RPT_00_FAULT
#define VEHICLE_FAULT_TIPPER_BODY_RPT_00_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_TIPPER_BODY_RPT_00_NO_TIMEOUT
#define COMMAND_TIMEOUT_TIPPER_BODY_RPT_00_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_TIPPER_BODY_RPT_00_TIMEOUT
#define COMMAND_TIMEOUT_TIPPER_BODY_RPT_00_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_TIPPER_BODY_RPT_00_NO_ACTION
#define MANUAL_INPUT_TIPPER_BODY_RPT_00_NO_ACTION (0)
#endif

#ifndef MANUAL_INPUT_TIPPER_BODY_RPT_00_RAISE
#define MANUAL_INPUT_TIPPER_BODY_RPT_00_RAISE (1)
#endif

#ifndef MANUAL_INPUT_TIPPER_BODY_RPT_00_LOWER
#define MANUAL_INPUT_TIPPER_BODY_RPT_00_LOWER (2)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_TIPPER_BODY_RPT_00_NO_ACTION
#define COMMANDED_VALUE_TIPPER_BODY_RPT_00_NO_ACTION (0)
#endif

#ifndef COMMANDED_VALUE_TIPPER_BODY_RPT_00_RAISE
#define COMMANDED_VALUE_TIPPER_BODY_RPT_00_RAISE (1)
#endif

#ifndef COMMANDED_VALUE_TIPPER_BODY_RPT_00_LOWER
#define COMMANDED_VALUE_TIPPER_BODY_RPT_00_LOWER (2)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_TIPPER_BODY_RPT_00_NO_ACTION
#define OUTPUT_VALUE_TIPPER_BODY_RPT_00_NO_ACTION (0)
#endif

#ifndef OUTPUT_VALUE_TIPPER_BODY_RPT_00_RAISE
#define OUTPUT_VALUE_TIPPER_BODY_RPT_00_RAISE (1)
#endif

#ifndef OUTPUT_VALUE_TIPPER_BODY_RPT_00_LOWER
#define OUTPUT_VALUE_TIPPER_BODY_RPT_00_LOWER (2)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIPPER_BODY_RPT_00_t;

// def @POWER_TAKE_OFF_RPT CAN Message (604  0x25c)
#define POWER_TAKE_OFF_RPT_IDE (0U)
#define POWER_TAKE_OFF_RPT_DLC (4U)
#define POWER_TAKE_OFF_RPT_CANID (0x25c)
#define POWER_TAKE_OFF_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_POWER_TAKE_OFF_RPT_FALSE
#define ENABLED_POWER_TAKE_OFF_RPT_FALSE (0)
#endif

#ifndef ENABLED_POWER_TAKE_OFF_RPT_TRUE
#define ENABLED_POWER_TAKE_OFF_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_POWER_TAKE_OFF_RPT_FALSE
#define OVERRIDE_ACTIVE_POWER_TAKE_OFF_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_POWER_TAKE_OFF_RPT_TRUE
#define OVERRIDE_ACTIVE_POWER_TAKE_OFF_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_POWER_TAKE_OFF_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_POWER_TAKE_OFF_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_POWER_TAKE_OFF_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_POWER_TAKE_OFF_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_POWER_TAKE_OFF_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_POWER_TAKE_OFF_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_POWER_TAKE_OFF_RPT_FAULT
#define INPUT_OUTPUT_FAULT_POWER_TAKE_OFF_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_POWER_TAKE_OFF_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_POWER_TAKE_OFF_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_POWER_TAKE_OFF_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_POWER_TAKE_OFF_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_POWER_TAKE_OFF_RPT_NO_FAULT
#define PACMOD_FAULT_POWER_TAKE_OFF_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_POWER_TAKE_OFF_RPT_FAULT
#define PACMOD_FAULT_POWER_TAKE_OFF_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_POWER_TAKE_OFF_RPT_NO_FAULT
#define VEHICLE_FAULT_POWER_TAKE_OFF_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_POWER_TAKE_OFF_RPT_FAULT
#define VEHICLE_FAULT_POWER_TAKE_OFF_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_POWER_TAKE_OFF_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_POWER_TAKE_OFF_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_POWER_TAKE_OFF_RPT_TIMEOUT
#define COMMAND_TIMEOUT_POWER_TAKE_OFF_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_POWER_TAKE_OFF_RPT_OFF
#define MANUAL_INPUT_POWER_TAKE_OFF_RPT_OFF (0)
#endif

#ifndef MANUAL_INPUT_POWER_TAKE_OFF_RPT_ON
#define MANUAL_INPUT_POWER_TAKE_OFF_RPT_ON (1)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_POWER_TAKE_OFF_RPT_OFF
#define COMMANDED_VALUE_POWER_TAKE_OFF_RPT_OFF (0)
#endif

#ifndef COMMANDED_VALUE_POWER_TAKE_OFF_RPT_ON
#define COMMANDED_VALUE_POWER_TAKE_OFF_RPT_ON (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_POWER_TAKE_OFF_RPT_OFF
#define OUTPUT_VALUE_POWER_TAKE_OFF_RPT_OFF (0)
#endif

#ifndef OUTPUT_VALUE_POWER_TAKE_OFF_RPT_ON
#define OUTPUT_VALUE_POWER_TAKE_OFF_RPT_ON (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} POWER_TAKE_OFF_RPT_t;

// def @TRAILER_BRAKE_RPT CAN Message (608  0x260)
#define TRAILER_BRAKE_RPT_IDE (0U)
#define TRAILER_BRAKE_RPT_DLC (7U)
#define TRAILER_BRAKE_RPT_CANID (0x260)

// Value tables for @ENABLED signal

#ifndef ENABLED_TRAILER_BRAKE_RPT_FALSE
#define ENABLED_TRAILER_BRAKE_RPT_FALSE (0)
#endif

#ifndef ENABLED_TRAILER_BRAKE_RPT_TRUE
#define ENABLED_TRAILER_BRAKE_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_TRAILER_BRAKE_RPT_FALSE
#define OVERRIDE_ACTIVE_TRAILER_BRAKE_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_TRAILER_BRAKE_RPT_TRUE
#define OVERRIDE_ACTIVE_TRAILER_BRAKE_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_TRAILER_BRAKE_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_TRAILER_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_TRAILER_BRAKE_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_TRAILER_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_TRAILER_BRAKE_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_TRAILER_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_TRAILER_BRAKE_RPT_FAULT
#define INPUT_OUTPUT_FAULT_TRAILER_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_TRAILER_BRAKE_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_TRAILER_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_TRAILER_BRAKE_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_TRAILER_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_TRAILER_BRAKE_RPT_NO_FAULT
#define PACMOD_FAULT_TRAILER_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_TRAILER_BRAKE_RPT_FAULT
#define PACMOD_FAULT_TRAILER_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_TRAILER_BRAKE_RPT_NO_FAULT
#define VEHICLE_FAULT_TRAILER_BRAKE_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_TRAILER_BRAKE_RPT_FAULT
#define VEHICLE_FAULT_TRAILER_BRAKE_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_TRAILER_BRAKE_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_TRAILER_BRAKE_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_TRAILER_BRAKE_RPT_TIMEOUT
#define COMMAND_TIMEOUT_TRAILER_BRAKE_RPT_TIMEOUT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  uint16_t MANUAL_INPUT_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t COMMANDED_VALUE_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t OUTPUT_VALUE_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  uint16_t MANUAL_INPUT_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MANUAL_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t COMMANDED_VALUE_ro;               //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t COMMANDED_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t OUTPUT_VALUE_ro;                  //      Bits=16 Factor= 0.001           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OUTPUT_VALUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_BRAKE_RPT_t;

// def @TRAILER_AIR_SUPPLY_RPT CAN Message (612  0x264)
#define TRAILER_AIR_SUPPLY_RPT_IDE (0U)
#define TRAILER_AIR_SUPPLY_RPT_DLC (5U)
#define TRAILER_AIR_SUPPLY_RPT_CANID (0x264)

// Value tables for @ENABLED signal

#ifndef ENABLED_TRAILER_AIR_SUPPLY_RPT_FALSE
#define ENABLED_TRAILER_AIR_SUPPLY_RPT_FALSE (0)
#endif

#ifndef ENABLED_TRAILER_AIR_SUPPLY_RPT_TRUE
#define ENABLED_TRAILER_AIR_SUPPLY_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_TRAILER_AIR_SUPPLY_RPT_FALSE
#define OVERRIDE_ACTIVE_TRAILER_AIR_SUPPLY_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_TRAILER_AIR_SUPPLY_RPT_TRUE
#define OVERRIDE_ACTIVE_TRAILER_AIR_SUPPLY_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_FAULT
#define INPUT_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_TRAILER_AIR_SUPPLY_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_TRAILER_AIR_SUPPLY_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_TRAILER_AIR_SUPPLY_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_TRAILER_AIR_SUPPLY_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_TRAILER_AIR_SUPPLY_RPT_NO_FAULT
#define PACMOD_FAULT_TRAILER_AIR_SUPPLY_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_TRAILER_AIR_SUPPLY_RPT_FAULT
#define PACMOD_FAULT_TRAILER_AIR_SUPPLY_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_TRAILER_AIR_SUPPLY_RPT_NO_FAULT
#define VEHICLE_FAULT_TRAILER_AIR_SUPPLY_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_TRAILER_AIR_SUPPLY_RPT_FAULT
#define VEHICLE_FAULT_TRAILER_AIR_SUPPLY_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_TRAILER_AIR_SUPPLY_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_TRAILER_AIR_SUPPLY_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_TRAILER_AIR_SUPPLY_RPT_TIMEOUT
#define COMMAND_TIMEOUT_TRAILER_AIR_SUPPLY_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_TRAILER_AIR_SUPPLY_RPT_OFF
#define MANUAL_INPUT_TRAILER_AIR_SUPPLY_RPT_OFF (0)
#endif

#ifndef MANUAL_INPUT_TRAILER_AIR_SUPPLY_RPT_ON
#define MANUAL_INPUT_TRAILER_AIR_SUPPLY_RPT_ON (1)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_TRAILER_AIR_SUPPLY_RPT_OFF
#define COMMANDED_VALUE_TRAILER_AIR_SUPPLY_RPT_OFF (0)
#endif

#ifndef COMMANDED_VALUE_TRAILER_AIR_SUPPLY_RPT_ON
#define COMMANDED_VALUE_TRAILER_AIR_SUPPLY_RPT_ON (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_TRAILER_AIR_SUPPLY_RPT_OFF
#define OUTPUT_VALUE_TRAILER_AIR_SUPPLY_RPT_OFF (0)
#endif

#ifndef OUTPUT_VALUE_TRAILER_AIR_SUPPLY_RPT_ON
#define OUTPUT_VALUE_TRAILER_AIR_SUPPLY_RPT_ON (1)
#endif


// Value tables for @CONTROL_STATUS signal

#ifndef CONTROL_STATUS_TRAILER_AIR_SUPPLY_RPT_SAFE
#define CONTROL_STATUS_TRAILER_AIR_SUPPLY_RPT_SAFE (0)
#endif

#ifndef CONTROL_STATUS_TRAILER_AIR_SUPPLY_RPT_AVAILABLE
#define CONTROL_STATUS_TRAILER_AIR_SUPPLY_RPT_AVAILABLE (1)
#endif


// Value tables for @PERFORMANCE_STATUS signal

#ifndef PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_NONE
#define PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_NONE (0)
#endif

#ifndef PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_CMD_TRACKING_FAILURE
#define PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_CMD_TRACKING_FAILURE (1)
#endif

#ifndef PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_APPOACHING_OPERATIONAL_LIMITS
#define PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_APPOACHING_OPERATIONAL_LIMITS (2)
#endif

#ifndef PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_LIMITING_ACTIVE
#define PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_LIMITING_ACTIVE (3)
#endif

#ifndef PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_LIMITING_IMMINENT
#define PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_LIMITING_IMMINENT (4)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT : 1;                  //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE : 1;                  //      Bits= 1

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS : 1;                //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS : 2;           //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS : 3;            //      Bits= 3

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 1

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS;                    //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS;               //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS;                //      Bits= 3

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_AIR_SUPPLY_RPT_t;

// def @TRAILER_AIR_SUPPLY_RPT_2 CAN Message (614  0x266)
#define TRAILER_AIR_SUPPLY_RPT_2_IDE (0U)
#define TRAILER_AIR_SUPPLY_RPT_2_DLC (5U)
#define TRAILER_AIR_SUPPLY_RPT_2_CANID (0x266)

// Value tables for @ENABLED signal

#ifndef ENABLED_TRAILER_AIR_SUPPLY_RPT_2_FALSE
#define ENABLED_TRAILER_AIR_SUPPLY_RPT_2_FALSE (0)
#endif

#ifndef ENABLED_TRAILER_AIR_SUPPLY_RPT_2_TRUE
#define ENABLED_TRAILER_AIR_SUPPLY_RPT_2_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_TRAILER_AIR_SUPPLY_RPT_2_FALSE
#define OVERRIDE_ACTIVE_TRAILER_AIR_SUPPLY_RPT_2_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_TRAILER_AIR_SUPPLY_RPT_2_TRUE
#define OVERRIDE_ACTIVE_TRAILER_AIR_SUPPLY_RPT_2_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_2_NO_FAULT
#define COMMAND_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_2_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_2_FAULT
#define COMMAND_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_2_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_2_NO_FAULT
#define INPUT_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_2_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_2_FAULT
#define INPUT_OUTPUT_FAULT_TRAILER_AIR_SUPPLY_RPT_2_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_TRAILER_AIR_SUPPLY_RPT_2_NO_FAULT
#define OUTPUT_REPORTED_FAULT_TRAILER_AIR_SUPPLY_RPT_2_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_TRAILER_AIR_SUPPLY_RPT_2_FAULT
#define OUTPUT_REPORTED_FAULT_TRAILER_AIR_SUPPLY_RPT_2_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_TRAILER_AIR_SUPPLY_RPT_2_NO_FAULT
#define PACMOD_FAULT_TRAILER_AIR_SUPPLY_RPT_2_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_TRAILER_AIR_SUPPLY_RPT_2_FAULT
#define PACMOD_FAULT_TRAILER_AIR_SUPPLY_RPT_2_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_TRAILER_AIR_SUPPLY_RPT_2_NO_FAULT
#define VEHICLE_FAULT_TRAILER_AIR_SUPPLY_RPT_2_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_TRAILER_AIR_SUPPLY_RPT_2_FAULT
#define VEHICLE_FAULT_TRAILER_AIR_SUPPLY_RPT_2_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_TRAILER_AIR_SUPPLY_RPT_2_NO_TIMEOUT
#define COMMAND_TIMEOUT_TRAILER_AIR_SUPPLY_RPT_2_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_TRAILER_AIR_SUPPLY_RPT_2_TIMEOUT
#define COMMAND_TIMEOUT_TRAILER_AIR_SUPPLY_RPT_2_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_TRAILER_AIR_SUPPLY_RPT_2_OFF
#define MANUAL_INPUT_TRAILER_AIR_SUPPLY_RPT_2_OFF (0)
#endif

#ifndef MANUAL_INPUT_TRAILER_AIR_SUPPLY_RPT_2_ON
#define MANUAL_INPUT_TRAILER_AIR_SUPPLY_RPT_2_ON (1)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_TRAILER_AIR_SUPPLY_RPT_2_OFF
#define COMMANDED_VALUE_TRAILER_AIR_SUPPLY_RPT_2_OFF (0)
#endif

#ifndef COMMANDED_VALUE_TRAILER_AIR_SUPPLY_RPT_2_ON
#define COMMANDED_VALUE_TRAILER_AIR_SUPPLY_RPT_2_ON (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_TRAILER_AIR_SUPPLY_RPT_2_OFF
#define OUTPUT_VALUE_TRAILER_AIR_SUPPLY_RPT_2_OFF (0)
#endif

#ifndef OUTPUT_VALUE_TRAILER_AIR_SUPPLY_RPT_2_ON
#define OUTPUT_VALUE_TRAILER_AIR_SUPPLY_RPT_2_ON (1)
#endif


// Value tables for @CONTROL_STATUS signal

#ifndef CONTROL_STATUS_TRAILER_AIR_SUPPLY_RPT_2_SAFE
#define CONTROL_STATUS_TRAILER_AIR_SUPPLY_RPT_2_SAFE (0)
#endif

#ifndef CONTROL_STATUS_TRAILER_AIR_SUPPLY_RPT_2_AVAILABLE
#define CONTROL_STATUS_TRAILER_AIR_SUPPLY_RPT_2_AVAILABLE (1)
#endif


// Value tables for @PERFORMANCE_STATUS signal

#ifndef PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_2_NONE
#define PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_2_NONE (0)
#endif

#ifndef PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_2_CMD_TRACKING_FAILURE
#define PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_2_CMD_TRACKING_FAILURE (1)
#endif

#ifndef PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_2_APPOACHING_OPERATIONAL_LIMITS
#define PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_2_APPOACHING_OPERATIONAL_LIMITS (2)
#endif

#ifndef PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_2_LIMITING_ACTIVE
#define PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_2_LIMITING_ACTIVE (3)
#endif

#ifndef PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_2_LIMITING_IMMINENT
#define PERFORMANCE_STATUS_TRAILER_AIR_SUPPLY_RPT_2_LIMITING_IMMINENT (4)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT : 1;                  //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE : 1;                  //      Bits= 1

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS : 1;                //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS : 2;           //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS : 3;            //      Bits= 3

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MANUAL_INPUT;                      //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t COMMANDED_VALUE;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t OUTPUT_VALUE;                      //      Bits= 1

  //  0 : "SAFE"
  //  1 : "AVAILABLE"
  uint8_t CONTROL_STATUS;                    //      Bits= 1

  // Number of systems in control.
  uint8_t CONTROLLING_SYSTEMS;               //      Bits= 2

  //  0 : "NONE"
  //  1 : "CMD_TRACKING_FAILURE"
  //  2 : "APPOACHING_OPERATIONAL_LIMITS"
  //  3 : "LIMITING_ACTIVE"
  //  4 : "LIMITING_IMMINENT"
  uint8_t PERFORMANCE_STATUS;                //      Bits= 3

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_AIR_SUPPLY_RPT_2_t;

// def @ENGINE_RPT CAN Message (616  0x268)
#define ENGINE_RPT_IDE (0U)
#define ENGINE_RPT_DLC (4U)
#define ENGINE_RPT_CANID (0x268)
#define ENGINE_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_ENGINE_RPT_FALSE
#define ENABLED_ENGINE_RPT_FALSE (0)
#endif

#ifndef ENABLED_ENGINE_RPT_TRUE
#define ENABLED_ENGINE_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_ENGINE_RPT_FALSE
#define OVERRIDE_ACTIVE_ENGINE_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_ENGINE_RPT_TRUE
#define OVERRIDE_ACTIVE_ENGINE_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_ENGINE_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_ENGINE_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_ENGINE_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_ENGINE_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_ENGINE_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_ENGINE_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_ENGINE_RPT_FAULT
#define INPUT_OUTPUT_FAULT_ENGINE_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_ENGINE_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_ENGINE_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_ENGINE_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_ENGINE_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_ENGINE_RPT_NO_FAULT
#define PACMOD_FAULT_ENGINE_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_ENGINE_RPT_FAULT
#define PACMOD_FAULT_ENGINE_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_ENGINE_RPT_NO_FAULT
#define VEHICLE_FAULT_ENGINE_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_ENGINE_RPT_FAULT
#define VEHICLE_FAULT_ENGINE_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_ENGINE_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_ENGINE_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_ENGINE_RPT_TIMEOUT
#define COMMAND_TIMEOUT_ENGINE_RPT_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_ENGINE_RPT_OFF
#define MANUAL_INPUT_ENGINE_RPT_OFF (0)
#endif

#ifndef MANUAL_INPUT_ENGINE_RPT_ACC
#define MANUAL_INPUT_ENGINE_RPT_ACC (1)
#endif

#ifndef MANUAL_INPUT_ENGINE_RPT_ON
#define MANUAL_INPUT_ENGINE_RPT_ON (2)
#endif

#ifndef MANUAL_INPUT_ENGINE_RPT_START
#define MANUAL_INPUT_ENGINE_RPT_START (3)
#endif

#ifndef MANUAL_INPUT_ENGINE_RPT_RUN
#define MANUAL_INPUT_ENGINE_RPT_RUN (4)
#endif

#ifndef MANUAL_INPUT_ENGINE_RPT_RESERVED
#define MANUAL_INPUT_ENGINE_RPT_RESERVED (251)
#endif

#ifndef MANUAL_INPUT_ENGINE_RPT_RESERVED
#define MANUAL_INPUT_ENGINE_RPT_RESERVED (252)
#endif

#ifndef MANUAL_INPUT_ENGINE_RPT_RESERVED
#define MANUAL_INPUT_ENGINE_RPT_RESERVED (253)
#endif

#ifndef MANUAL_INPUT_ENGINE_RPT_ERROR
#define MANUAL_INPUT_ENGINE_RPT_ERROR (254)
#endif

#ifndef MANUAL_INPUT_ENGINE_RPT_NOT_AVAIL
#define MANUAL_INPUT_ENGINE_RPT_NOT_AVAIL (255)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_ENGINE_RPT_NO_ACTION
#define COMMANDED_VALUE_ENGINE_RPT_NO_ACTION (0)
#endif

#ifndef COMMANDED_VALUE_ENGINE_RPT_ENGINE_OFF
#define COMMANDED_VALUE_ENGINE_RPT_ENGINE_OFF (1)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_ENGINE_RPT_ENGINE_OFF
#define OUTPUT_VALUE_ENGINE_RPT_ENGINE_OFF (1)
#endif

#ifndef OUTPUT_VALUE_ENGINE_RPT_ENGINE_RUNNING
#define OUTPUT_VALUE_ENGINE_RPT_ENGINE_RUNNING (2)
#endif

#ifndef OUTPUT_VALUE_ENGINE_RPT_RESERVED
#define OUTPUT_VALUE_ENGINE_RPT_RESERVED (251)
#endif

#ifndef OUTPUT_VALUE_ENGINE_RPT_RESERVED
#define OUTPUT_VALUE_ENGINE_RPT_RESERVED (252)
#endif

#ifndef OUTPUT_VALUE_ENGINE_RPT_RESERVED
#define OUTPUT_VALUE_ENGINE_RPT_RESERVED (253)
#endif

#ifndef OUTPUT_VALUE_ENGINE_RPT_ERROR
#define OUTPUT_VALUE_ENGINE_RPT_ERROR (254)
#endif

#ifndef OUTPUT_VALUE_ENGINE_RPT_NOT_AVAIL
#define OUTPUT_VALUE_ENGINE_RPT_NOT_AVAIL (255)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ACC"
  //  2 : "ON"
  //  3 : "START"
  //  4 : "RUN"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "NO_ACTION"
  //  1 : "ENGINE_OFF"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  1 : "ENGINE_OFF"
  //  2 : "ENGINE_RUNNING"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ACC"
  //  2 : "ON"
  //  3 : "START"
  //  4 : "RUN"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  //  0 : "NO_ACTION"
  //  1 : "ENGINE_OFF"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  //  1 : "ENGINE_OFF"
  //  2 : "ENGINE_RUNNING"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ENGINE_RPT_t;

// def @TIPPER_BODY_RPT_01 CAN Message (620  0x26c)
#define TIPPER_BODY_RPT_01_IDE (0U)
#define TIPPER_BODY_RPT_01_DLC (4U)
#define TIPPER_BODY_RPT_01_CANID (0x26c)
#define TIPPER_BODY_RPT_01_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_TIPPER_BODY_RPT_01_FALSE
#define ENABLED_TIPPER_BODY_RPT_01_FALSE (0)
#endif

#ifndef ENABLED_TIPPER_BODY_RPT_01_TRUE
#define ENABLED_TIPPER_BODY_RPT_01_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_TIPPER_BODY_RPT_01_FALSE
#define OVERRIDE_ACTIVE_TIPPER_BODY_RPT_01_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_TIPPER_BODY_RPT_01_TRUE
#define OVERRIDE_ACTIVE_TIPPER_BODY_RPT_01_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_01_NO_FAULT
#define COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_01_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_01_FAULT
#define COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_01_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_01_NO_FAULT
#define INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_01_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_01_FAULT
#define INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_01_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_01_NO_FAULT
#define OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_01_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_01_FAULT
#define OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_01_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_TIPPER_BODY_RPT_01_NO_FAULT
#define PACMOD_FAULT_TIPPER_BODY_RPT_01_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_TIPPER_BODY_RPT_01_FAULT
#define PACMOD_FAULT_TIPPER_BODY_RPT_01_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_TIPPER_BODY_RPT_01_NO_FAULT
#define VEHICLE_FAULT_TIPPER_BODY_RPT_01_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_TIPPER_BODY_RPT_01_FAULT
#define VEHICLE_FAULT_TIPPER_BODY_RPT_01_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_TIPPER_BODY_RPT_01_NO_TIMEOUT
#define COMMAND_TIMEOUT_TIPPER_BODY_RPT_01_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_TIPPER_BODY_RPT_01_TIMEOUT
#define COMMAND_TIMEOUT_TIPPER_BODY_RPT_01_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_TIPPER_BODY_RPT_01_NO_ACTION
#define MANUAL_INPUT_TIPPER_BODY_RPT_01_NO_ACTION (0)
#endif

#ifndef MANUAL_INPUT_TIPPER_BODY_RPT_01_RAISE
#define MANUAL_INPUT_TIPPER_BODY_RPT_01_RAISE (1)
#endif

#ifndef MANUAL_INPUT_TIPPER_BODY_RPT_01_LOWER
#define MANUAL_INPUT_TIPPER_BODY_RPT_01_LOWER (2)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_TIPPER_BODY_RPT_01_NO_ACTION
#define COMMANDED_VALUE_TIPPER_BODY_RPT_01_NO_ACTION (0)
#endif

#ifndef COMMANDED_VALUE_TIPPER_BODY_RPT_01_RAISE
#define COMMANDED_VALUE_TIPPER_BODY_RPT_01_RAISE (1)
#endif

#ifndef COMMANDED_VALUE_TIPPER_BODY_RPT_01_LOWER
#define COMMANDED_VALUE_TIPPER_BODY_RPT_01_LOWER (2)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_TIPPER_BODY_RPT_01_NO_ACTION
#define OUTPUT_VALUE_TIPPER_BODY_RPT_01_NO_ACTION (0)
#endif

#ifndef OUTPUT_VALUE_TIPPER_BODY_RPT_01_RAISE
#define OUTPUT_VALUE_TIPPER_BODY_RPT_01_RAISE (1)
#endif

#ifndef OUTPUT_VALUE_TIPPER_BODY_RPT_01_LOWER
#define OUTPUT_VALUE_TIPPER_BODY_RPT_01_LOWER (2)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIPPER_BODY_RPT_01_t;

// def @TIPPER_BODY_RPT_02 CAN Message (624  0x270)
#define TIPPER_BODY_RPT_02_IDE (0U)
#define TIPPER_BODY_RPT_02_DLC (4U)
#define TIPPER_BODY_RPT_02_CANID (0x270)
#define TIPPER_BODY_RPT_02_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_TIPPER_BODY_RPT_02_FALSE
#define ENABLED_TIPPER_BODY_RPT_02_FALSE (0)
#endif

#ifndef ENABLED_TIPPER_BODY_RPT_02_TRUE
#define ENABLED_TIPPER_BODY_RPT_02_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_TIPPER_BODY_RPT_02_FALSE
#define OVERRIDE_ACTIVE_TIPPER_BODY_RPT_02_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_TIPPER_BODY_RPT_02_TRUE
#define OVERRIDE_ACTIVE_TIPPER_BODY_RPT_02_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_02_NO_FAULT
#define COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_02_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_02_FAULT
#define COMMAND_OUTPUT_FAULT_TIPPER_BODY_RPT_02_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_02_NO_FAULT
#define INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_02_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_02_FAULT
#define INPUT_OUTPUT_FAULT_TIPPER_BODY_RPT_02_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_02_NO_FAULT
#define OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_02_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_02_FAULT
#define OUTPUT_REPORTED_FAULT_TIPPER_BODY_RPT_02_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_TIPPER_BODY_RPT_02_NO_FAULT
#define PACMOD_FAULT_TIPPER_BODY_RPT_02_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_TIPPER_BODY_RPT_02_FAULT
#define PACMOD_FAULT_TIPPER_BODY_RPT_02_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_TIPPER_BODY_RPT_02_NO_FAULT
#define VEHICLE_FAULT_TIPPER_BODY_RPT_02_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_TIPPER_BODY_RPT_02_FAULT
#define VEHICLE_FAULT_TIPPER_BODY_RPT_02_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_TIPPER_BODY_RPT_02_NO_TIMEOUT
#define COMMAND_TIMEOUT_TIPPER_BODY_RPT_02_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_TIPPER_BODY_RPT_02_TIMEOUT
#define COMMAND_TIMEOUT_TIPPER_BODY_RPT_02_TIMEOUT (1)
#endif


// Value tables for @MANUAL_INPUT signal

#ifndef MANUAL_INPUT_TIPPER_BODY_RPT_02_NO_ACTION
#define MANUAL_INPUT_TIPPER_BODY_RPT_02_NO_ACTION (0)
#endif

#ifndef MANUAL_INPUT_TIPPER_BODY_RPT_02_RAISE
#define MANUAL_INPUT_TIPPER_BODY_RPT_02_RAISE (1)
#endif

#ifndef MANUAL_INPUT_TIPPER_BODY_RPT_02_LOWER
#define MANUAL_INPUT_TIPPER_BODY_RPT_02_LOWER (2)
#endif


// Value tables for @COMMANDED_VALUE signal

#ifndef COMMANDED_VALUE_TIPPER_BODY_RPT_02_NO_ACTION
#define COMMANDED_VALUE_TIPPER_BODY_RPT_02_NO_ACTION (0)
#endif

#ifndef COMMANDED_VALUE_TIPPER_BODY_RPT_02_RAISE
#define COMMANDED_VALUE_TIPPER_BODY_RPT_02_RAISE (1)
#endif

#ifndef COMMANDED_VALUE_TIPPER_BODY_RPT_02_LOWER
#define COMMANDED_VALUE_TIPPER_BODY_RPT_02_LOWER (2)
#endif


// Value tables for @OUTPUT_VALUE signal

#ifndef OUTPUT_VALUE_TIPPER_BODY_RPT_02_NO_ACTION
#define OUTPUT_VALUE_TIPPER_BODY_RPT_02_NO_ACTION (0)
#endif

#ifndef OUTPUT_VALUE_TIPPER_BODY_RPT_02_RAISE
#define OUTPUT_VALUE_TIPPER_BODY_RPT_02_RAISE (1)
#endif

#ifndef OUTPUT_VALUE_TIPPER_BODY_RPT_02_LOWER
#define OUTPUT_VALUE_TIPPER_BODY_RPT_02_LOWER (2)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t MANUAL_INPUT;                      //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t COMMANDED_VALUE;                   //      Bits= 8

  // RAISE moves towards dump position, LOWER moves towards haul position.
  //  0 : "NO_ACTION"
  //  1 : "RAISE"
  //  2 : "LOWER"
  uint8_t OUTPUT_VALUE;                      //      Bits= 8

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIPPER_BODY_RPT_02_t;

// def @DIFFERENTIAL_LOCKS_RPT CAN Message (628  0x274)
#define DIFFERENTIAL_LOCKS_RPT_IDE (0U)
#define DIFFERENTIAL_LOCKS_RPT_DLC (4U)
#define DIFFERENTIAL_LOCKS_RPT_CANID (0x274)
#define DIFFERENTIAL_LOCKS_RPT_CYC (100U)

// Value tables for @ENABLED signal

#ifndef ENABLED_DIFFERENTIAL_LOCKS_RPT_FALSE
#define ENABLED_DIFFERENTIAL_LOCKS_RPT_FALSE (0)
#endif

#ifndef ENABLED_DIFFERENTIAL_LOCKS_RPT_TRUE
#define ENABLED_DIFFERENTIAL_LOCKS_RPT_TRUE (1)
#endif


// Value tables for @OVERRIDE_ACTIVE signal

#ifndef OVERRIDE_ACTIVE_DIFFERENTIAL_LOCKS_RPT_FALSE
#define OVERRIDE_ACTIVE_DIFFERENTIAL_LOCKS_RPT_FALSE (0)
#endif

#ifndef OVERRIDE_ACTIVE_DIFFERENTIAL_LOCKS_RPT_TRUE
#define OVERRIDE_ACTIVE_DIFFERENTIAL_LOCKS_RPT_TRUE (1)
#endif


// Value tables for @COMMAND_OUTPUT_FAULT signal

#ifndef COMMAND_OUTPUT_FAULT_DIFFERENTIAL_LOCKS_RPT_NO_FAULT
#define COMMAND_OUTPUT_FAULT_DIFFERENTIAL_LOCKS_RPT_NO_FAULT (0)
#endif

#ifndef COMMAND_OUTPUT_FAULT_DIFFERENTIAL_LOCKS_RPT_FAULT
#define COMMAND_OUTPUT_FAULT_DIFFERENTIAL_LOCKS_RPT_FAULT (1)
#endif


// Value tables for @INPUT_OUTPUT_FAULT signal

#ifndef INPUT_OUTPUT_FAULT_DIFFERENTIAL_LOCKS_RPT_NO_FAULT
#define INPUT_OUTPUT_FAULT_DIFFERENTIAL_LOCKS_RPT_NO_FAULT (0)
#endif

#ifndef INPUT_OUTPUT_FAULT_DIFFERENTIAL_LOCKS_RPT_FAULT
#define INPUT_OUTPUT_FAULT_DIFFERENTIAL_LOCKS_RPT_FAULT (1)
#endif


// Value tables for @OUTPUT_REPORTED_FAULT signal

#ifndef OUTPUT_REPORTED_FAULT_DIFFERENTIAL_LOCKS_RPT_NO_FAULT
#define OUTPUT_REPORTED_FAULT_DIFFERENTIAL_LOCKS_RPT_NO_FAULT (0)
#endif

#ifndef OUTPUT_REPORTED_FAULT_DIFFERENTIAL_LOCKS_RPT_FAULT
#define OUTPUT_REPORTED_FAULT_DIFFERENTIAL_LOCKS_RPT_FAULT (1)
#endif


// Value tables for @PACMOD_FAULT signal

#ifndef PACMOD_FAULT_DIFFERENTIAL_LOCKS_RPT_NO_FAULT
#define PACMOD_FAULT_DIFFERENTIAL_LOCKS_RPT_NO_FAULT (0)
#endif

#ifndef PACMOD_FAULT_DIFFERENTIAL_LOCKS_RPT_FAULT
#define PACMOD_FAULT_DIFFERENTIAL_LOCKS_RPT_FAULT (1)
#endif


// Value tables for @VEHICLE_FAULT signal

#ifndef VEHICLE_FAULT_DIFFERENTIAL_LOCKS_RPT_NO_FAULT
#define VEHICLE_FAULT_DIFFERENTIAL_LOCKS_RPT_NO_FAULT (0)
#endif

#ifndef VEHICLE_FAULT_DIFFERENTIAL_LOCKS_RPT_FAULT
#define VEHICLE_FAULT_DIFFERENTIAL_LOCKS_RPT_FAULT (1)
#endif


// Value tables for @COMMAND_TIMEOUT signal

#ifndef COMMAND_TIMEOUT_DIFFERENTIAL_LOCKS_RPT_NO_TIMEOUT
#define COMMAND_TIMEOUT_DIFFERENTIAL_LOCKS_RPT_NO_TIMEOUT (0)
#endif

#ifndef COMMAND_TIMEOUT_DIFFERENTIAL_LOCKS_RPT_TIMEOUT
#define COMMAND_TIMEOUT_DIFFERENTIAL_LOCKS_RPT_TIMEOUT (1)
#endif


// Value tables for @MAN_FRONT_LOCK signal

#ifndef MAN_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF
#define MAN_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF (0)
#endif

#ifndef MAN_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON
#define MAN_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON (1)
#endif

#ifndef MAN_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR
#define MAN_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR (2)
#endif

#ifndef MAN_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL
#define MAN_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL (3)
#endif


// Value tables for @MAN_CENTER_LOCK signal

#ifndef MAN_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF
#define MAN_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF (0)
#endif

#ifndef MAN_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON
#define MAN_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON (1)
#endif

#ifndef MAN_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR
#define MAN_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR (2)
#endif

#ifndef MAN_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL
#define MAN_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL (3)
#endif


// Value tables for @MAN_REAR_LOCK signal

#ifndef MAN_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF
#define MAN_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF (0)
#endif

#ifndef MAN_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON
#define MAN_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON (1)
#endif

#ifndef MAN_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR
#define MAN_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR (2)
#endif

#ifndef MAN_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL
#define MAN_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL (3)
#endif


// Value tables for @CMD_FRONT_LOCK signal

#ifndef CMD_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF
#define CMD_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF (0)
#endif

#ifndef CMD_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON
#define CMD_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON (1)
#endif

#ifndef CMD_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR
#define CMD_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR (2)
#endif

#ifndef CMD_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL
#define CMD_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL (3)
#endif


// Value tables for @CMD_CENTER_LOCK signal

#ifndef CMD_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF
#define CMD_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF (0)
#endif

#ifndef CMD_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON
#define CMD_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON (1)
#endif

#ifndef CMD_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR
#define CMD_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR (2)
#endif

#ifndef CMD_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL
#define CMD_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL (3)
#endif


// Value tables for @CMD_REAR_LOCK signal

#ifndef CMD_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF
#define CMD_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF (0)
#endif

#ifndef CMD_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON
#define CMD_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON (1)
#endif

#ifndef CMD_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR
#define CMD_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR (2)
#endif

#ifndef CMD_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL
#define CMD_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL (3)
#endif


// Value tables for @OUT_FRONT_LOCK signal

#ifndef OUT_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF
#define OUT_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF (0)
#endif

#ifndef OUT_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON
#define OUT_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON (1)
#endif

#ifndef OUT_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR
#define OUT_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR (2)
#endif

#ifndef OUT_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL
#define OUT_FRONT_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL (3)
#endif


// Value tables for @OUT_CENTER_LOCK signal

#ifndef OUT_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF
#define OUT_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF (0)
#endif

#ifndef OUT_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON
#define OUT_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON (1)
#endif

#ifndef OUT_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR
#define OUT_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR (2)
#endif

#ifndef OUT_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL
#define OUT_CENTER_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL (3)
#endif


// Value tables for @OUT_REAR_LOCK signal

#ifndef OUT_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF
#define OUT_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_OFF (0)
#endif

#ifndef OUT_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON
#define OUT_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_LOCK_ON (1)
#endif

#ifndef OUT_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR
#define OUT_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_ERROR (2)
#endif

#ifndef OUT_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL
#define OUT_REAR_LOCK_DIFFERENTIAL_LOCKS_RPT_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED : 1;                       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT : 1;            //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT : 1;         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT : 1;                  //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT : 1;                 //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT : 1;               //      Bits= 1

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t MAN_FRONT_LOCK : 2;                //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t MAN_CENTER_LOCK : 2;               //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t MAN_REAR_LOCK : 2;                 //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CMD_FRONT_LOCK : 2;                //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CMD_CENTER_LOCK : 2;               //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CMD_REAR_LOCK : 2;                 //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t OUT_FRONT_LOCK : 2;                //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t OUT_CENTER_LOCK : 2;               //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t OUT_REAR_LOCK : 2;                 //      Bits= 2

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENABLED;                           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t OVERRIDE_ACTIVE;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t COMMAND_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t INPUT_OUTPUT_FAULT;                //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t OUTPUT_REPORTED_FAULT;             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t PACMOD_FAULT;                      //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t VEHICLE_FAULT;                     //      Bits= 1

  //  0 : "NO_TIMEOUT"
  //  1 : "TIMEOUT"
  uint8_t COMMAND_TIMEOUT;                   //      Bits= 1

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t MAN_FRONT_LOCK;                    //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t MAN_CENTER_LOCK;                   //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t MAN_REAR_LOCK;                     //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CMD_FRONT_LOCK;                    //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CMD_CENTER_LOCK;                   //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CMD_REAR_LOCK;                     //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t OUT_FRONT_LOCK;                    //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t OUT_CENTER_LOCK;                   //      Bits= 2

  //  0 : "LOCK_OFF"
  //  1 : "LOCK_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t OUT_REAR_LOCK;                     //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} DIFFERENTIAL_LOCKS_RPT_t;

// def @ACCEL_AUX_RPT CAN Message (768  0x300)
#define ACCEL_AUX_RPT_IDE (0U)
#define ACCEL_AUX_RPT_DLC (6U)
#define ACCEL_AUX_RPT_CANID (0x300)

// Value tables for @OPERATOR_INTERACTION signal

#ifndef OPERATOR_INTERACTION_ACCEL_AUX_RPT_NO_INTERACTION
#define OPERATOR_INTERACTION_ACCEL_AUX_RPT_NO_INTERACTION (0)
#endif

#ifndef OPERATOR_INTERACTION_ACCEL_AUX_RPT_INTERACTION
#define OPERATOR_INTERACTION_ACCEL_AUX_RPT_INTERACTION (1)
#endif


// Value tables for @ACCEL_LIMITING_ACTIVE signal

#ifndef ACCEL_LIMITING_ACTIVE_ACCEL_AUX_RPT_NOT_ACTIVE
#define ACCEL_LIMITING_ACTIVE_ACCEL_AUX_RPT_NOT_ACTIVE (0)
#endif

#ifndef ACCEL_LIMITING_ACTIVE_ACCEL_AUX_RPT_ACTIVE
#define ACCEL_LIMITING_ACTIVE_ACCEL_AUX_RPT_ACTIVE (1)
#endif


// Value tables for @PRK_BRK_INTERLOCK_ACTIVE signal

#ifndef PRK_BRK_INTERLOCK_ACTIVE_ACCEL_AUX_RPT_NOT_ACTIVE
#define PRK_BRK_INTERLOCK_ACTIVE_ACCEL_AUX_RPT_NOT_ACTIVE (0)
#endif

#ifndef PRK_BRK_INTERLOCK_ACTIVE_ACCEL_AUX_RPT_ACTIVE
#define PRK_BRK_INTERLOCK_ACTIVE_ACCEL_AUX_RPT_ACTIVE (1)
#endif


// Value tables for @BRAKE_INTERLOCK_ACTIVE signal

#ifndef BRAKE_INTERLOCK_ACTIVE_ACCEL_AUX_RPT_NOT_ACTIVE
#define BRAKE_INTERLOCK_ACTIVE_ACCEL_AUX_RPT_NOT_ACTIVE (0)
#endif

#ifndef BRAKE_INTERLOCK_ACTIVE_ACCEL_AUX_RPT_ACTIVE
#define BRAKE_INTERLOCK_ACTIVE_ACCEL_AUX_RPT_ACTIVE (1)
#endif


// Value tables for @CALIBRATION_STATUS signal

#ifndef CALIBRATION_STATUS_ACCEL_AUX_RPT_INACTIVE
#define CALIBRATION_STATUS_ACCEL_AUX_RPT_INACTIVE (0)
#endif

#ifndef CALIBRATION_STATUS_ACCEL_AUX_RPT_ACTIVE
#define CALIBRATION_STATUS_ACCEL_AUX_RPT_ACTIVE (1)
#endif

#ifndef CALIBRATION_STATUS_ACCEL_AUX_RPT_COMPLETE
#define CALIBRATION_STATUS_ACCEL_AUX_RPT_COMPLETE (2)
#endif

#ifndef CALIBRATION_STATUS_ACCEL_AUX_RPT_ERROR
#define CALIBRATION_STATUS_ACCEL_AUX_RPT_ERROR (3)
#endif


// Value tables for @OPERATOR_INTERACTION_AVAIL signal

#ifndef OPERATOR_INTERACTION_AVAIL_ACCEL_AUX_RPT_NOT_AVAILABLE
#define OPERATOR_INTERACTION_AVAIL_ACCEL_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef OPERATOR_INTERACTION_AVAIL_ACCEL_AUX_RPT_AVAILABLE
#define OPERATOR_INTERACTION_AVAIL_ACCEL_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @ACCEL_LIMITING_ACTIVE_AVAIL signal

#ifndef ACCEL_LIMITING_ACTIVE_AVAIL_ACCEL_AUX_RPT_NOT_AVAILABLE
#define ACCEL_LIMITING_ACTIVE_AVAIL_ACCEL_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ACCEL_LIMITING_ACTIVE_AVAIL_ACCEL_AUX_RPT_AVAILABLE
#define ACCEL_LIMITING_ACTIVE_AVAIL_ACCEL_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @PRK_BRK_INTERLOCK_ACTIVE_AVAIL signal

#ifndef PRK_BRK_INTERLOCK_ACTIVE_AVAIL_ACCEL_AUX_RPT_NOT_AVAILABLE
#define PRK_BRK_INTERLOCK_ACTIVE_AVAIL_ACCEL_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef PRK_BRK_INTERLOCK_ACTIVE_AVAIL_ACCEL_AUX_RPT_AVAILABLE
#define PRK_BRK_INTERLOCK_ACTIVE_AVAIL_ACCEL_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @BRAKE_INTERLOCK_ACTIVE_AVAIL signal

#ifndef BRAKE_INTERLOCK_ACTIVE_AVAIL_ACCEL_AUX_RPT_NOT_AVAILABLE
#define BRAKE_INTERLOCK_ACTIVE_AVAIL_ACCEL_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_INTERLOCK_ACTIVE_AVAIL_ACCEL_AUX_RPT_AVAILABLE
#define BRAKE_INTERLOCK_ACTIVE_AVAIL_ACCEL_AUX_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // OPERATOR_INTERACTION shall have the value of 1 if the driver is moving, changing, or otherwise touching the operator control(s) that relates to this signal to an extent that is detectable. Otherwise, the value shall be 0.
  //  0 : "NO_INTERACTION"
  //  1 : "INTERACTION"
  uint8_t OPERATOR_INTERACTION : 1;             //      Bits= 1

  // ACCEL_LIMITING_ACTIVE shall have the value of 1 if a limiting function is reducing an excessive command.  Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t ACCEL_LIMITING_ACTIVE : 1;            //      Bits= 1

  // PARK_BRAKE_INTERLOCK_ACTIVE shall have the value of 1 if an active parking brake prevents or reduces the command. Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t PRK_BRK_INTERLOCK_ACTIVE : 1;         //      Bits= 1

  // BRAKE_INTERLOCK_ACTIVE shall have the value of 1 if an active brake prevents or reduces the command. Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t BRAKE_INTERLOCK_ACTIVE : 1;           //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS : 3;               //      Bits= 3

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OPERATOR_INTERACTION_AVAIL : 1;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ACCEL_LIMITING_ACTIVE_AVAIL : 1;      //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PRK_BRK_INTERLOCK_ACTIVE_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_INTERLOCK_ACTIVE_AVAIL : 1;     //      Bits= 1

#else

  // OPERATOR_INTERACTION shall have the value of 1 if the driver is moving, changing, or otherwise touching the operator control(s) that relates to this signal to an extent that is detectable. Otherwise, the value shall be 0.
  //  0 : "NO_INTERACTION"
  //  1 : "INTERACTION"
  uint8_t OPERATOR_INTERACTION;                 //      Bits= 1

  // ACCEL_LIMITING_ACTIVE shall have the value of 1 if a limiting function is reducing an excessive command.  Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t ACCEL_LIMITING_ACTIVE;                //      Bits= 1

  // PARK_BRAKE_INTERLOCK_ACTIVE shall have the value of 1 if an active parking brake prevents or reduces the command. Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t PRK_BRK_INTERLOCK_ACTIVE;             //      Bits= 1

  // BRAKE_INTERLOCK_ACTIVE shall have the value of 1 if an active brake prevents or reduces the command. Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t BRAKE_INTERLOCK_ACTIVE;               //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS;                   //      Bits= 3

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OPERATOR_INTERACTION_AVAIL;           //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ACCEL_LIMITING_ACTIVE_AVAIL;          //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PRK_BRK_INTERLOCK_ACTIVE_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_INTERLOCK_ACTIVE_AVAIL;         //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ACCEL_AUX_RPT_t;

// def @BRAKE_AUX_RPT CAN Message (772  0x304)
#define BRAKE_AUX_RPT_IDE (0U)
#define BRAKE_AUX_RPT_DLC (8U)
#define BRAKE_AUX_RPT_CANID (0x304)
// signal: @BRAKE_PRESSURE_2_ro
#define PACMOD13_BRAKE_PRESSURE_2_ro_CovFactor (0.0001)
#define PACMOD13_BRAKE_PRESSURE_2_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.0001)) )
#define PACMOD13_BRAKE_PRESSURE_2_ro_fromS(x) ( (((x) * (0.0001)) + (0.0)) )
// signal: @BRAKE_PRESSURE_ro
#define PACMOD13_BRAKE_PRESSURE_ro_CovFactor (0.0001)
#define PACMOD13_BRAKE_PRESSURE_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.0001)) )
#define PACMOD13_BRAKE_PRESSURE_ro_fromS(x) ( (((x) * (0.0001)) + (0.0)) )

// Value tables for @OPERATOR_INTERACTION signal

#ifndef OPERATOR_INTERACTION_BRAKE_AUX_RPT_NO_INTERACTION
#define OPERATOR_INTERACTION_BRAKE_AUX_RPT_NO_INTERACTION (0)
#endif

#ifndef OPERATOR_INTERACTION_BRAKE_AUX_RPT_INTERACTION
#define OPERATOR_INTERACTION_BRAKE_AUX_RPT_INTERACTION (1)
#endif


// Value tables for @BRAKE_ON_OFF signal

#ifndef BRAKE_ON_OFF_BRAKE_AUX_RPT_OFF
#define BRAKE_ON_OFF_BRAKE_AUX_RPT_OFF (0)
#endif

#ifndef BRAKE_ON_OFF_BRAKE_AUX_RPT_ON
#define BRAKE_ON_OFF_BRAKE_AUX_RPT_ON (1)
#endif


// Value tables for @BRAKE_LIMITING_ACTIVE signal

#ifndef BRAKE_LIMITING_ACTIVE_BRAKE_AUX_RPT_NOT_ACTIVE
#define BRAKE_LIMITING_ACTIVE_BRAKE_AUX_RPT_NOT_ACTIVE (0)
#endif

#ifndef BRAKE_LIMITING_ACTIVE_BRAKE_AUX_RPT_ACTIVE
#define BRAKE_LIMITING_ACTIVE_BRAKE_AUX_RPT_ACTIVE (1)
#endif


// Value tables for @BRAKE_REDUCED_ASSIST signal

#ifndef BRAKE_REDUCED_ASSIST_BRAKE_AUX_RPT_NOT_REDUCED
#define BRAKE_REDUCED_ASSIST_BRAKE_AUX_RPT_NOT_REDUCED (0)
#endif

#ifndef BRAKE_REDUCED_ASSIST_BRAKE_AUX_RPT_REDUCED
#define BRAKE_REDUCED_ASSIST_BRAKE_AUX_RPT_REDUCED (1)
#endif


// Value tables for @CALIBRATION_STATUS signal

#ifndef CALIBRATION_STATUS_BRAKE_AUX_RPT_INACTIVE
#define CALIBRATION_STATUS_BRAKE_AUX_RPT_INACTIVE (0)
#endif

#ifndef CALIBRATION_STATUS_BRAKE_AUX_RPT_ACTIVE
#define CALIBRATION_STATUS_BRAKE_AUX_RPT_ACTIVE (1)
#endif

#ifndef CALIBRATION_STATUS_BRAKE_AUX_RPT_COMPLETE
#define CALIBRATION_STATUS_BRAKE_AUX_RPT_COMPLETE (2)
#endif

#ifndef CALIBRATION_STATUS_BRAKE_AUX_RPT_ERROR
#define CALIBRATION_STATUS_BRAKE_AUX_RPT_ERROR (3)
#endif


// Value tables for @BRAKE_PRESSURE_2_AVAIL signal

#ifndef BRAKE_PRESSURE_2_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE
#define BRAKE_PRESSURE_2_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_PRESSURE_2_AVAIL_BRAKE_AUX_RPT_AVAILABLE
#define BRAKE_PRESSURE_2_AVAIL_BRAKE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @BRAKE_PRESSURE_AVAIL signal

#ifndef BRAKE_PRESSURE_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE
#define BRAKE_PRESSURE_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_PRESSURE_AVAIL_BRAKE_AUX_RPT_AVAILABLE
#define BRAKE_PRESSURE_AVAIL_BRAKE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @OPERATOR_INTERACTION_AVAIL signal

#ifndef OPERATOR_INTERACTION_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE
#define OPERATOR_INTERACTION_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef OPERATOR_INTERACTION_AVAIL_BRAKE_AUX_RPT_AVAILABLE
#define OPERATOR_INTERACTION_AVAIL_BRAKE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @BRAKE_ON_OFF_AVAIL signal

#ifndef BRAKE_ON_OFF_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE
#define BRAKE_ON_OFF_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_ON_OFF_AVAIL_BRAKE_AUX_RPT_AVAILABLE
#define BRAKE_ON_OFF_AVAIL_BRAKE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @BRAKE_LIMITING_ACTIVE_AVAIL signal

#ifndef BRAKE_LIMITING_ACTIVE_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE
#define BRAKE_LIMITING_ACTIVE_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_LIMITING_ACTIVE_AVAIL_BRAKE_AUX_RPT_AVAILABLE
#define BRAKE_LIMITING_ACTIVE_AVAIL_BRAKE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @BRAKE_REDUCED_ASSIST_AVAIL signal

#ifndef BRAKE_REDUCED_ASSIST_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE
#define BRAKE_REDUCED_ASSIST_AVAIL_BRAKE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_REDUCED_ASSIST_AVAIL_BRAKE_AUX_RPT_AVAILABLE
#define BRAKE_REDUCED_ASSIST_AVAIL_BRAKE_AUX_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t BRAKE_PRESSURE_2_ro;              //      Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_PRESSURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t BRAKE_PRESSURE_ro;                //      Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // OPERATOR_INTERACTION shall have the value of 1 if the driver is moving, changing, or otherwise touching the operator control(s) that relates to this signal to an extent that is detectable. Otherwise, the value shall be 0.
  //  0 : "NO_INTERACTION"
  //  1 : "INTERACTION"
  uint8_t OPERATOR_INTERACTION : 1;          //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t BRAKE_ON_OFF : 1;                  //      Bits= 1

  // BRAKE_LIMITING_ACTIVE shall have the value of 1 if a limiting function is reducing an excessive command.  Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t BRAKE_LIMITING_ACTIVE : 1;         //      Bits= 1

  // BRAKE_REDUCED_ASSIST shall have the value of 1 if Brake System is in a reduced assist mode. Otherwise, the value shall be 0.
  //  0 : "NOT_REDUCED"
  //  1 : "REDUCED"
  uint8_t BRAKE_REDUCED_ASSIST : 1;          //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS : 3;            //      Bits= 3

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_PRESSURE_2_AVAIL : 1;        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_PRESSURE_AVAIL : 1;          //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OPERATOR_INTERACTION_AVAIL : 1;    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_ON_OFF_AVAIL : 1;            //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_LIMITING_ACTIVE_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_REDUCED_ASSIST_AVAIL : 1;    //      Bits= 1

#else

  uint16_t BRAKE_PRESSURE_2_ro;              //      Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_PRESSURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t BRAKE_PRESSURE_ro;                //      Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // OPERATOR_INTERACTION shall have the value of 1 if the driver is moving, changing, or otherwise touching the operator control(s) that relates to this signal to an extent that is detectable. Otherwise, the value shall be 0.
  //  0 : "NO_INTERACTION"
  //  1 : "INTERACTION"
  uint8_t OPERATOR_INTERACTION;              //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t BRAKE_ON_OFF;                      //      Bits= 1

  // BRAKE_LIMITING_ACTIVE shall have the value of 1 if a limiting function is reducing an excessive command.  Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t BRAKE_LIMITING_ACTIVE;             //      Bits= 1

  // BRAKE_REDUCED_ASSIST shall have the value of 1 if Brake System is in a reduced assist mode. Otherwise, the value shall be 0.
  //  0 : "NOT_REDUCED"
  //  1 : "REDUCED"
  uint8_t BRAKE_REDUCED_ASSIST;              //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS;                //      Bits= 3

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_PRESSURE_2_AVAIL;            //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_PRESSURE_AVAIL;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OPERATOR_INTERACTION_AVAIL;        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_ON_OFF_AVAIL;                //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_LIMITING_ACTIVE_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_REDUCED_ASSIST_AVAIL;        //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_AUX_RPT_t;

// def @BRAKE_AUX_RPT_2 CAN Message (774  0x306)
#define BRAKE_AUX_RPT_2_IDE (0U)
#define BRAKE_AUX_RPT_2_DLC (8U)
#define BRAKE_AUX_RPT_2_CANID (0x306)

// Value tables for @OPERATOR_INTERACTION signal

#ifndef OPERATOR_INTERACTION_BRAKE_AUX_RPT_2_NO_INTERACTION
#define OPERATOR_INTERACTION_BRAKE_AUX_RPT_2_NO_INTERACTION (0)
#endif

#ifndef OPERATOR_INTERACTION_BRAKE_AUX_RPT_2_INTERACTION
#define OPERATOR_INTERACTION_BRAKE_AUX_RPT_2_INTERACTION (1)
#endif


// Value tables for @BRAKE_ON_OFF signal

#ifndef BRAKE_ON_OFF_BRAKE_AUX_RPT_2_OFF
#define BRAKE_ON_OFF_BRAKE_AUX_RPT_2_OFF (0)
#endif

#ifndef BRAKE_ON_OFF_BRAKE_AUX_RPT_2_ON
#define BRAKE_ON_OFF_BRAKE_AUX_RPT_2_ON (1)
#endif


// Value tables for @BRAKE_LIMITING_ACTIVE signal

#ifndef BRAKE_LIMITING_ACTIVE_BRAKE_AUX_RPT_2_NOT_ACTIVE
#define BRAKE_LIMITING_ACTIVE_BRAKE_AUX_RPT_2_NOT_ACTIVE (0)
#endif

#ifndef BRAKE_LIMITING_ACTIVE_BRAKE_AUX_RPT_2_ACTIVE
#define BRAKE_LIMITING_ACTIVE_BRAKE_AUX_RPT_2_ACTIVE (1)
#endif


// Value tables for @BRAKE_REDUCED_ASSIST signal

#ifndef BRAKE_REDUCED_ASSIST_BRAKE_AUX_RPT_2_NOT_REDUCED
#define BRAKE_REDUCED_ASSIST_BRAKE_AUX_RPT_2_NOT_REDUCED (0)
#endif

#ifndef BRAKE_REDUCED_ASSIST_BRAKE_AUX_RPT_2_REDUCED
#define BRAKE_REDUCED_ASSIST_BRAKE_AUX_RPT_2_REDUCED (1)
#endif


// Value tables for @CALIBRATION_STATUS signal

#ifndef CALIBRATION_STATUS_BRAKE_AUX_RPT_2_INACTIVE
#define CALIBRATION_STATUS_BRAKE_AUX_RPT_2_INACTIVE (0)
#endif

#ifndef CALIBRATION_STATUS_BRAKE_AUX_RPT_2_ACTIVE
#define CALIBRATION_STATUS_BRAKE_AUX_RPT_2_ACTIVE (1)
#endif

#ifndef CALIBRATION_STATUS_BRAKE_AUX_RPT_2_COMPLETE
#define CALIBRATION_STATUS_BRAKE_AUX_RPT_2_COMPLETE (2)
#endif

#ifndef CALIBRATION_STATUS_BRAKE_AUX_RPT_2_ERROR
#define CALIBRATION_STATUS_BRAKE_AUX_RPT_2_ERROR (3)
#endif


// Value tables for @BRAKE_PRESSURE_2_AVAIL signal

#ifndef BRAKE_PRESSURE_2_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE
#define BRAKE_PRESSURE_2_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_PRESSURE_2_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE
#define BRAKE_PRESSURE_2_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @BRAKE_PRESSURE_AVAIL signal

#ifndef BRAKE_PRESSURE_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE
#define BRAKE_PRESSURE_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_PRESSURE_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE
#define BRAKE_PRESSURE_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @OPERATOR_INTERACTION_AVAIL signal

#ifndef OPERATOR_INTERACTION_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE
#define OPERATOR_INTERACTION_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef OPERATOR_INTERACTION_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE
#define OPERATOR_INTERACTION_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @BRAKE_ON_OFF_AVAIL signal

#ifndef BRAKE_ON_OFF_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE
#define BRAKE_ON_OFF_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_ON_OFF_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE
#define BRAKE_ON_OFF_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @BRAKE_LIMITING_ACTIVE_AVAIL signal

#ifndef BRAKE_LIMITING_ACTIVE_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE
#define BRAKE_LIMITING_ACTIVE_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_LIMITING_ACTIVE_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE
#define BRAKE_LIMITING_ACTIVE_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @BRAKE_REDUCED_ASSIST_AVAIL signal

#ifndef BRAKE_REDUCED_ASSIST_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE
#define BRAKE_REDUCED_ASSIST_AVAIL_BRAKE_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_REDUCED_ASSIST_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE
#define BRAKE_REDUCED_ASSIST_AVAIL_BRAKE_AUX_RPT_2_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t BRAKE_PRESSURE_2_ro;              //      Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_PRESSURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t BRAKE_PRESSURE_ro;                //      Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // OPERATOR_INTERACTION shall have the value of 1 if the driver is moving, changing, or otherwise touching the operator control(s) that relates to this signal to an extent that is detectable. Otherwise, the value shall be 0.
  //  0 : "NO_INTERACTION"
  //  1 : "INTERACTION"
  uint8_t OPERATOR_INTERACTION : 1;          //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t BRAKE_ON_OFF : 1;                  //      Bits= 1

  // BRAKE_LIMITING_ACTIVE shall have the value of 1 if a limiting function is reducing an excessive command.  Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t BRAKE_LIMITING_ACTIVE : 1;         //      Bits= 1

  // BRAKE_REDUCED_ASSIST shall have the value of 1 if Brake System is in a reduced assist mode. Otherwise, the value shall be 0.
  //  0 : "NOT_REDUCED"
  //  1 : "REDUCED"
  uint8_t BRAKE_REDUCED_ASSIST : 1;          //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS : 3;            //      Bits= 3

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_PRESSURE_2_AVAIL : 1;        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_PRESSURE_AVAIL : 1;          //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OPERATOR_INTERACTION_AVAIL : 1;    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_ON_OFF_AVAIL : 1;            //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_LIMITING_ACTIVE_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_REDUCED_ASSIST_AVAIL : 1;    //      Bits= 1

#else

  uint16_t BRAKE_PRESSURE_2_ro;              //      Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_PRESSURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t BRAKE_PRESSURE_ro;                //      Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BRAKE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // OPERATOR_INTERACTION shall have the value of 1 if the driver is moving, changing, or otherwise touching the operator control(s) that relates to this signal to an extent that is detectable. Otherwise, the value shall be 0.
  //  0 : "NO_INTERACTION"
  //  1 : "INTERACTION"
  uint8_t OPERATOR_INTERACTION;              //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t BRAKE_ON_OFF;                      //      Bits= 1

  // BRAKE_LIMITING_ACTIVE shall have the value of 1 if a limiting function is reducing an excessive command.  Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t BRAKE_LIMITING_ACTIVE;             //      Bits= 1

  // BRAKE_REDUCED_ASSIST shall have the value of 1 if Brake System is in a reduced assist mode. Otherwise, the value shall be 0.
  //  0 : "NOT_REDUCED"
  //  1 : "REDUCED"
  uint8_t BRAKE_REDUCED_ASSIST;              //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS;                //      Bits= 3

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_PRESSURE_2_AVAIL;            //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_PRESSURE_AVAIL;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OPERATOR_INTERACTION_AVAIL;        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_ON_OFF_AVAIL;                //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_LIMITING_ACTIVE_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_REDUCED_ASSIST_AVAIL;        //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_AUX_RPT_2_t;

// def @HEADLIGHT_AUX_RPT CAN Message (792  0x318)
#define HEADLIGHT_AUX_RPT_IDE (0U)
#define HEADLIGHT_AUX_RPT_DLC (3U)
#define HEADLIGHT_AUX_RPT_CANID (0x318)
#define HEADLIGHT_AUX_RPT_CYC (100U)

// Value tables for @HEADLIGHTS_ON signal

#ifndef HEADLIGHTS_ON_HEADLIGHT_AUX_RPT_OFF
#define HEADLIGHTS_ON_HEADLIGHT_AUX_RPT_OFF (0)
#endif

#ifndef HEADLIGHTS_ON_HEADLIGHT_AUX_RPT_ON
#define HEADLIGHTS_ON_HEADLIGHT_AUX_RPT_ON (1)
#endif


// Value tables for @HEADLIGHTS_ON_BRIGHT signal

#ifndef HEADLIGHTS_ON_BRIGHT_HEADLIGHT_AUX_RPT_OFF
#define HEADLIGHTS_ON_BRIGHT_HEADLIGHT_AUX_RPT_OFF (0)
#endif

#ifndef HEADLIGHTS_ON_BRIGHT_HEADLIGHT_AUX_RPT_ON
#define HEADLIGHTS_ON_BRIGHT_HEADLIGHT_AUX_RPT_ON (1)
#endif


// Value tables for @FOG_LIGHTS_ON signal

#ifndef FOG_LIGHTS_ON_HEADLIGHT_AUX_RPT_OFF
#define FOG_LIGHTS_ON_HEADLIGHT_AUX_RPT_OFF (0)
#endif

#ifndef FOG_LIGHTS_ON_HEADLIGHT_AUX_RPT_ON
#define FOG_LIGHTS_ON_HEADLIGHT_AUX_RPT_ON (1)
#endif


// Value tables for @HEADLIGHTS_MODE signal

#ifndef HEADLIGHTS_MODE_HEADLIGHT_AUX_RPT_HEADLIGHTS_ON_AUTO_MODE
#define HEADLIGHTS_MODE_HEADLIGHT_AUX_RPT_HEADLIGHTS_ON_AUTO_MODE (3)
#endif

#ifndef HEADLIGHTS_MODE_HEADLIGHT_AUX_RPT_HEADLIGHTS_ON_MANUAL_MODE
#define HEADLIGHTS_MODE_HEADLIGHT_AUX_RPT_HEADLIGHTS_ON_MANUAL_MODE (2)
#endif

#ifndef HEADLIGHTS_MODE_HEADLIGHT_AUX_RPT_PARKING_LIGHTS_ONLY
#define HEADLIGHTS_MODE_HEADLIGHT_AUX_RPT_PARKING_LIGHTS_ONLY (1)
#endif

#ifndef HEADLIGHTS_MODE_HEADLIGHT_AUX_RPT_HEADLIGHTS_OFF
#define HEADLIGHTS_MODE_HEADLIGHT_AUX_RPT_HEADLIGHTS_OFF (0)
#endif


// Value tables for @HEADLIGHTS_ON_AVAIL signal

#ifndef HEADLIGHTS_ON_AVAIL_HEADLIGHT_AUX_RPT_NOT_AVAILABLE
#define HEADLIGHTS_ON_AVAIL_HEADLIGHT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef HEADLIGHTS_ON_AVAIL_HEADLIGHT_AUX_RPT_AVAILABLE
#define HEADLIGHTS_ON_AVAIL_HEADLIGHT_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @HEADLIGHTS_ON_BRIGHT_AVAIL signal

#ifndef HEADLIGHTS_ON_BRIGHT_AVAIL_HEADLIGHT_AUX_RPT_NOT_AVAILABLE
#define HEADLIGHTS_ON_BRIGHT_AVAIL_HEADLIGHT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef HEADLIGHTS_ON_BRIGHT_AVAIL_HEADLIGHT_AUX_RPT_AVAILABLE
#define HEADLIGHTS_ON_BRIGHT_AVAIL_HEADLIGHT_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @FOG_LIGHTS_ON_AVAIL signal

#ifndef FOG_LIGHTS_ON_AVAIL_HEADLIGHT_AUX_RPT_NOT_AVAILABLE
#define FOG_LIGHTS_ON_AVAIL_HEADLIGHT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef FOG_LIGHTS_ON_AVAIL_HEADLIGHT_AUX_RPT_AVAILABLE
#define FOG_LIGHTS_ON_AVAIL_HEADLIGHT_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @HEADLIGHTS_MODE_AVAIL signal

#ifndef HEADLIGHTS_MODE_AVAIL_HEADLIGHT_AUX_RPT_NOT_AVAILABLE
#define HEADLIGHTS_MODE_AVAIL_HEADLIGHT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef HEADLIGHTS_MODE_AVAIL_HEADLIGHT_AUX_RPT_AVAILABLE
#define HEADLIGHTS_MODE_AVAIL_HEADLIGHT_AUX_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t HEADLIGHTS_ON : 1;                 //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t HEADLIGHTS_ON_BRIGHT : 1;          //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t FOG_LIGHTS_ON : 1;                 //      Bits= 1

  //  3 : "HEADLIGHTS_ON_AUTO_MODE"
  //  2 : "HEADLIGHTS_ON_MANUAL_MODE"
  //  1 : "PARKING_LIGHTS_ONLY"
  //  0 : "HEADLIGHTS_OFF"
  uint8_t HEADLIGHTS_MODE;                   //      Bits= 8

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t HEADLIGHTS_ON_AVAIL : 1;           //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t HEADLIGHTS_ON_BRIGHT_AVAIL : 1;    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FOG_LIGHTS_ON_AVAIL : 1;           //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t HEADLIGHTS_MODE_AVAIL : 1;         //      Bits= 1

#else

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t HEADLIGHTS_ON;                     //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t HEADLIGHTS_ON_BRIGHT;              //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t FOG_LIGHTS_ON;                     //      Bits= 1

  //  3 : "HEADLIGHTS_ON_AUTO_MODE"
  //  2 : "HEADLIGHTS_ON_MANUAL_MODE"
  //  1 : "PARKING_LIGHTS_ONLY"
  //  0 : "HEADLIGHTS_OFF"
  uint8_t HEADLIGHTS_MODE;                   //      Bits= 8

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t HEADLIGHTS_ON_AVAIL;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t HEADLIGHTS_ON_BRIGHT_AVAIL;        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FOG_LIGHTS_ON_AVAIL;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t HEADLIGHTS_MODE_AVAIL;             //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} HEADLIGHT_AUX_RPT_t;

// def @PARKING_BRAKE_AUX_RPT CAN Message (804  0x324)
#define PARKING_BRAKE_AUX_RPT_IDE (0U)
#define PARKING_BRAKE_AUX_RPT_DLC (2U)
#define PARKING_BRAKE_AUX_RPT_CANID (0x324)
#define PARKING_BRAKE_AUX_RPT_CYC (100U)

// Value tables for @PARKING_BRAKE_STATUS signal

#ifndef PARKING_BRAKE_STATUS_PARKING_BRAKE_AUX_RPT_RELEASED
#define PARKING_BRAKE_STATUS_PARKING_BRAKE_AUX_RPT_RELEASED (0)
#endif

#ifndef PARKING_BRAKE_STATUS_PARKING_BRAKE_AUX_RPT_APPLIED
#define PARKING_BRAKE_STATUS_PARKING_BRAKE_AUX_RPT_APPLIED (1)
#endif

#ifndef PARKING_BRAKE_STATUS_PARKING_BRAKE_AUX_RPT_BETWEEN
#define PARKING_BRAKE_STATUS_PARKING_BRAKE_AUX_RPT_BETWEEN (2)
#endif

#ifndef PARKING_BRAKE_STATUS_PARKING_BRAKE_AUX_RPT_ERROR
#define PARKING_BRAKE_STATUS_PARKING_BRAKE_AUX_RPT_ERROR (3)
#endif


// Value tables for @PARKING_BRAKE_STATUS_AVAIL signal

#ifndef PARKING_BRAKE_STATUS_AVAIL_PARKING_BRAKE_AUX_RPT_NOT_AVAILABLE
#define PARKING_BRAKE_STATUS_AVAIL_PARKING_BRAKE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef PARKING_BRAKE_STATUS_AVAIL_PARKING_BRAKE_AUX_RPT_AVAILABLE
#define PARKING_BRAKE_STATUS_AVAIL_PARKING_BRAKE_AUX_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "RELEASED"
  //  1 : "APPLIED"
  //  2 : "BETWEEN"
  //  3 : "ERROR"
  uint8_t PARKING_BRAKE_STATUS : 2;          //      Bits= 2

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PARKING_BRAKE_STATUS_AVAIL : 1;    //      Bits= 1

#else

  //  0 : "RELEASED"
  //  1 : "APPLIED"
  //  2 : "BETWEEN"
  //  3 : "ERROR"
  uint8_t PARKING_BRAKE_STATUS;              //      Bits= 2

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PARKING_BRAKE_STATUS_AVAIL;        //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} PARKING_BRAKE_AUX_RPT_t;

// def @SHIFT_AUX_RPT CAN Message (808  0x328)
#define SHIFT_AUX_RPT_IDE (0U)
#define SHIFT_AUX_RPT_DLC (7U)
#define SHIFT_AUX_RPT_CANID (0x328)

// Value tables for @BETWEEN_GEARS signal

#ifndef BETWEEN_GEARS_SHIFT_AUX_RPT_NOT_BETWEEN_GEARS
#define BETWEEN_GEARS_SHIFT_AUX_RPT_NOT_BETWEEN_GEARS (0)
#endif

#ifndef BETWEEN_GEARS_SHIFT_AUX_RPT_BETWEEN_GEARS
#define BETWEEN_GEARS_SHIFT_AUX_RPT_BETWEEN_GEARS (1)
#endif


// Value tables for @STAY_IN_NEUTRAL_MODE signal

#ifndef STAY_IN_NEUTRAL_MODE_SHIFT_AUX_RPT_OFF
#define STAY_IN_NEUTRAL_MODE_SHIFT_AUX_RPT_OFF (0)
#endif

#ifndef STAY_IN_NEUTRAL_MODE_SHIFT_AUX_RPT_ON
#define STAY_IN_NEUTRAL_MODE_SHIFT_AUX_RPT_ON (1)
#endif


// Value tables for @BRAKE_INTERLOCK_ACTIVE signal

#ifndef BRAKE_INTERLOCK_ACTIVE_SHIFT_AUX_RPT_NOT_ACTIVE
#define BRAKE_INTERLOCK_ACTIVE_SHIFT_AUX_RPT_NOT_ACTIVE (0)
#endif

#ifndef BRAKE_INTERLOCK_ACTIVE_SHIFT_AUX_RPT_ACTIVE
#define BRAKE_INTERLOCK_ACTIVE_SHIFT_AUX_RPT_ACTIVE (1)
#endif


// Value tables for @SPEED_INTERLOCK_ACTIVE signal

#ifndef SPEED_INTERLOCK_ACTIVE_SHIFT_AUX_RPT_NOT_ACTIVE
#define SPEED_INTERLOCK_ACTIVE_SHIFT_AUX_RPT_NOT_ACTIVE (0)
#endif

#ifndef SPEED_INTERLOCK_ACTIVE_SHIFT_AUX_RPT_ACTIVE
#define SPEED_INTERLOCK_ACTIVE_SHIFT_AUX_RPT_ACTIVE (1)
#endif


// Value tables for @WRITE_TO_CONFIG signal

#ifndef WRITE_TO_CONFIG_SHIFT_AUX_RPT_SILENT
#define WRITE_TO_CONFIG_SHIFT_AUX_RPT_SILENT (0)
#endif

#ifndef WRITE_TO_CONFIG_SHIFT_AUX_RPT_BEEP
#define WRITE_TO_CONFIG_SHIFT_AUX_RPT_BEEP (1)
#endif


// Value tables for @CALIBRATION_STATUS signal

#ifndef CALIBRATION_STATUS_SHIFT_AUX_RPT_INACTIVE
#define CALIBRATION_STATUS_SHIFT_AUX_RPT_INACTIVE (0)
#endif

#ifndef CALIBRATION_STATUS_SHIFT_AUX_RPT_ACTIVE
#define CALIBRATION_STATUS_SHIFT_AUX_RPT_ACTIVE (1)
#endif

#ifndef CALIBRATION_STATUS_SHIFT_AUX_RPT_COMPLETE
#define CALIBRATION_STATUS_SHIFT_AUX_RPT_COMPLETE (2)
#endif

#ifndef CALIBRATION_STATUS_SHIFT_AUX_RPT_ERROR
#define CALIBRATION_STATUS_SHIFT_AUX_RPT_ERROR (3)
#endif


// Value tables for @BETWEEN_GEARS_AVAIL signal

#ifndef BETWEEN_GEARS_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE
#define BETWEEN_GEARS_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BETWEEN_GEARS_AVAIL_SHIFT_AUX_RPT_AVAILABLE
#define BETWEEN_GEARS_AVAIL_SHIFT_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @STAY_IN_NEUTRAL_MODE_AVAIL signal

#ifndef STAY_IN_NEUTRAL_MODE_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE
#define STAY_IN_NEUTRAL_MODE_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef STAY_IN_NEUTRAL_MODE_AVAIL_SHIFT_AUX_RPT_AVAILABLE
#define STAY_IN_NEUTRAL_MODE_AVAIL_SHIFT_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @BRAKE_INTERLOCK_ACTIVE_AVAIL signal

#ifndef BRAKE_INTERLOCK_ACTIVE_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE
#define BRAKE_INTERLOCK_ACTIVE_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_INTERLOCK_ACTIVE_AVAIL_SHIFT_AUX_RPT_AVAILABLE
#define BRAKE_INTERLOCK_ACTIVE_AVAIL_SHIFT_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @SPEED_INTERLOCK_ACTIVE_AVAIL signal

#ifndef SPEED_INTERLOCK_ACTIVE_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE
#define SPEED_INTERLOCK_ACTIVE_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef SPEED_INTERLOCK_ACTIVE_AVAIL_SHIFT_AUX_RPT_AVAILABLE
#define SPEED_INTERLOCK_ACTIVE_AVAIL_SHIFT_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @WRITE_TO_CONFIG_IS_VALID signal

#ifndef WRITE_TO_CONFIG_IS_VALID_SHIFT_AUX_RPT_NOT_AVAILABLE
#define WRITE_TO_CONFIG_IS_VALID_SHIFT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef WRITE_TO_CONFIG_IS_VALID_SHIFT_AUX_RPT_AVAILABLE
#define WRITE_TO_CONFIG_IS_VALID_SHIFT_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @GEAR_NUMBER_AVAIL signal

#ifndef GEAR_NUMBER_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE
#define GEAR_NUMBER_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef GEAR_NUMBER_AVAIL_SHIFT_AUX_RPT_AVAILABLE
#define GEAR_NUMBER_AVAIL_SHIFT_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @SHIFT_MODE_AVAIL signal

#ifndef SHIFT_MODE_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE
#define SHIFT_MODE_AVAIL_SHIFT_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef SHIFT_MODE_AVAIL_SHIFT_AUX_RPT_AVAILABLE
#define SHIFT_MODE_AVAIL_SHIFT_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @SHIFT_MODE signal

#ifndef SHIFT_MODE_SHIFT_AUX_RPT_STANDARD
#define SHIFT_MODE_SHIFT_AUX_RPT_STANDARD (0)
#endif

#ifndef SHIFT_MODE_SHIFT_AUX_RPT_SPORT
#define SHIFT_MODE_SHIFT_AUX_RPT_SPORT (1)
#endif


// Value tables for @SHIFT_IN_PROGRESS signal

#ifndef SHIFT_IN_PROGRESS_SHIFT_AUX_RPT_SHIFT_NOT_IN_PROGRESS
#define SHIFT_IN_PROGRESS_SHIFT_AUX_RPT_SHIFT_NOT_IN_PROGRESS (0)
#endif

#ifndef SHIFT_IN_PROGRESS_SHIFT_AUX_RPT_SHIFT_IN_PROGRESS
#define SHIFT_IN_PROGRESS_SHIFT_AUX_RPT_SHIFT_IN_PROGRESS (1)
#endif

#ifndef SHIFT_IN_PROGRESS_SHIFT_AUX_RPT_ERROR
#define SHIFT_IN_PROGRESS_SHIFT_AUX_RPT_ERROR (2)
#endif


// Value tables for @DRIVELINE_ENGAGED signal

#ifndef DRIVELINE_ENGAGED_SHIFT_AUX_RPT_DRIVELINE_DISENGAGED
#define DRIVELINE_ENGAGED_SHIFT_AUX_RPT_DRIVELINE_DISENGAGED (0)
#endif

#ifndef DRIVELINE_ENGAGED_SHIFT_AUX_RPT_DRIVELINE_ENGAGED
#define DRIVELINE_ENGAGED_SHIFT_AUX_RPT_DRIVELINE_ENGAGED (1)
#endif

#ifndef DRIVELINE_ENGAGED_SHIFT_AUX_RPT_ERROR
#define DRIVELINE_ENGAGED_SHIFT_AUX_RPT_ERROR (2)
#endif

// signal: @ACTUAL_GEAR_RATIO_ro
#define PACMOD13_ACTUAL_GEAR_RATIO_ro_CovFactor (0.001)
#define PACMOD13_ACTUAL_GEAR_RATIO_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_ACTUAL_GEAR_RATIO_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // Indicates that the operator control interface is not commanding a specific transmission range.
  //  0 : "NOT_BETWEEN_GEARS"
  //  1 : "BETWEEN_GEARS"
  uint8_t BETWEEN_GEARS : 1;                  //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t STAY_IN_NEUTRAL_MODE : 1;           //      Bits= 1

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t BRAKE_INTERLOCK_ACTIVE : 1;         //      Bits= 1

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t SPEED_INTERLOCK_ACTIVE : 1;         //      Bits= 1

  //  0 : "SILENT"
  //  1 : "BEEP"
  uint8_t WRITE_TO_CONFIG : 1;                //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS : 3;             //      Bits= 3

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BETWEEN_GEARS_AVAIL : 1;            //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STAY_IN_NEUTRAL_MODE_AVAIL : 1;     //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_INTERLOCK_ACTIVE_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t SPEED_INTERLOCK_ACTIVE_AVAIL : 1;   //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t WRITE_TO_CONFIG_IS_VALID : 1;       //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t GEAR_NUMBER_AVAIL : 1;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t SHIFT_MODE_AVAIL : 1;               //      Bits= 1

  uint8_t SHIFT_IN_PROGRESS_AVAIL : 1;        //      Bits= 1

  // Gear number is positive for forward gears.
  int8_t GEAR_NUMBER : 6;                     //  [-] Bits= 6

  //  0 : "STANDARD"
  //  1 : "SPORT"
  uint8_t SHIFT_MODE : 2;                     //      Bits= 2

  // Indicates if the vehicle transmission is in process of shifting from the current gear to the destination gear.
  //  0 : "SHIFT_NOT_IN_PROGRESS"
  //  1 : "SHIFT_IN_PROGRESS"
  //  2 : "ERROR"
  uint8_t SHIFT_IN_PROGRESS : 2;              //      Bits= 2

  // Indicates the transmission is engaged sufficiently to allow a transfer of torque through the transmission.
  //  0 : "DRIVELINE_DISENGAGED"
  //  1 : "DRIVELINE_ENGAGED"
  //  2 : "ERROR"
  uint8_t DRIVELINE_ENGAGED : 2;              //      Bits= 2

  uint16_t ACTUAL_GEAR_RATIO_ro;              //      Bits=16 Factor= 0.001

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ACTUAL_GEAR_RATIO_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t DRIVELINE_ENGAGED_AVAIL : 1;        //      Bits= 1

  uint8_t ACTUAL_GEAR_RATIO_AVAIL : 1;        //      Bits= 1

#else

  // Indicates that the operator control interface is not commanding a specific transmission range.
  //  0 : "NOT_BETWEEN_GEARS"
  //  1 : "BETWEEN_GEARS"
  uint8_t BETWEEN_GEARS;                      //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t STAY_IN_NEUTRAL_MODE;               //      Bits= 1

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t BRAKE_INTERLOCK_ACTIVE;             //      Bits= 1

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t SPEED_INTERLOCK_ACTIVE;             //      Bits= 1

  //  0 : "SILENT"
  //  1 : "BEEP"
  uint8_t WRITE_TO_CONFIG;                    //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS;                 //      Bits= 3

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BETWEEN_GEARS_AVAIL;                //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STAY_IN_NEUTRAL_MODE_AVAIL;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_INTERLOCK_ACTIVE_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t SPEED_INTERLOCK_ACTIVE_AVAIL;       //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t WRITE_TO_CONFIG_IS_VALID;           //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t GEAR_NUMBER_AVAIL;                  //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t SHIFT_MODE_AVAIL;                   //      Bits= 1

  uint8_t SHIFT_IN_PROGRESS_AVAIL;            //      Bits= 1

  // Gear number is positive for forward gears.
  int8_t GEAR_NUMBER;                         //  [-] Bits= 6

  //  0 : "STANDARD"
  //  1 : "SPORT"
  uint8_t SHIFT_MODE;                         //      Bits= 2

  // Indicates if the vehicle transmission is in process of shifting from the current gear to the destination gear.
  //  0 : "SHIFT_NOT_IN_PROGRESS"
  //  1 : "SHIFT_IN_PROGRESS"
  //  2 : "ERROR"
  uint8_t SHIFT_IN_PROGRESS;                  //      Bits= 2

  // Indicates the transmission is engaged sufficiently to allow a transfer of torque through the transmission.
  //  0 : "DRIVELINE_DISENGAGED"
  //  1 : "DRIVELINE_ENGAGED"
  //  2 : "ERROR"
  uint8_t DRIVELINE_ENGAGED;                  //      Bits= 2

  uint16_t ACTUAL_GEAR_RATIO_ro;              //      Bits=16 Factor= 0.001

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ACTUAL_GEAR_RATIO_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t DRIVELINE_ENGAGED_AVAIL;            //      Bits= 1

  uint8_t ACTUAL_GEAR_RATIO_AVAIL;            //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SHIFT_AUX_RPT_t;

// def @STEERING_AUX_RPT CAN Message (812  0x32c)
#define STEERING_AUX_RPT_IDE (0U)
#define STEERING_AUX_RPT_DLC (8U)
#define STEERING_AUX_RPT_CANID (0x32c)
// signal: @STEERING_FLUID_PRESSURE_ro
#define PACMOD13_STEERING_FLUID_PRESSURE_ro_CovFactor (0.5)
#define PACMOD13_STEERING_FLUID_PRESSURE_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.5)) )
#define PACMOD13_STEERING_FLUID_PRESSURE_ro_fromS(x) ( (((x) * (0.5)) + (0.0)) )
// signal: @STEERING_TORQUE_ro
#define PACMOD13_STEERING_TORQUE_ro_CovFactor (0.0001)
#define PACMOD13_STEERING_TORQUE_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.0001)) )
#define PACMOD13_STEERING_TORQUE_ro_fromS(x) ( (((x) * (0.0001)) + (0.0)) )

// Value tables for @OPERATOR_INTERACTION signal

#ifndef OPERATOR_INTERACTION_STEERING_AUX_RPT_NO_INTERACTION
#define OPERATOR_INTERACTION_STEERING_AUX_RPT_NO_INTERACTION (0)
#endif

#ifndef OPERATOR_INTERACTION_STEERING_AUX_RPT_INTERACTION
#define OPERATOR_INTERACTION_STEERING_AUX_RPT_INTERACTION (1)
#endif


// Value tables for @ROTATION_RATE_SIGN signal

#ifndef ROTATION_RATE_SIGN_STEERING_AUX_RPT_POSITIVE
#define ROTATION_RATE_SIGN_STEERING_AUX_RPT_POSITIVE (0)
#endif

#ifndef ROTATION_RATE_SIGN_STEERING_AUX_RPT_NEGATIVE
#define ROTATION_RATE_SIGN_STEERING_AUX_RPT_NEGATIVE (1)
#endif


// Value tables for @VEHICLE_ANGLE_CALIB_STATUS signal

#ifndef VEHICLE_ANGLE_CALIB_STATUS_STEERING_AUX_RPT_NOT_CALIBRATED
#define VEHICLE_ANGLE_CALIB_STATUS_STEERING_AUX_RPT_NOT_CALIBRATED (0)
#endif

#ifndef VEHICLE_ANGLE_CALIB_STATUS_STEERING_AUX_RPT_CALIBRATED
#define VEHICLE_ANGLE_CALIB_STATUS_STEERING_AUX_RPT_CALIBRATED (1)
#endif


// Value tables for @STEERING_LIMITING_ACTIVE signal

#ifndef STEERING_LIMITING_ACTIVE_STEERING_AUX_RPT_NOT_ACTIVE
#define STEERING_LIMITING_ACTIVE_STEERING_AUX_RPT_NOT_ACTIVE (0)
#endif

#ifndef STEERING_LIMITING_ACTIVE_STEERING_AUX_RPT_ACTIVE
#define STEERING_LIMITING_ACTIVE_STEERING_AUX_RPT_ACTIVE (1)
#endif


// Value tables for @CALIBRATION_STATUS signal

#ifndef CALIBRATION_STATUS_STEERING_AUX_RPT_INACTIVE
#define CALIBRATION_STATUS_STEERING_AUX_RPT_INACTIVE (0)
#endif

#ifndef CALIBRATION_STATUS_STEERING_AUX_RPT_ACTIVE
#define CALIBRATION_STATUS_STEERING_AUX_RPT_ACTIVE (1)
#endif

#ifndef CALIBRATION_STATUS_STEERING_AUX_RPT_COMPLETE
#define CALIBRATION_STATUS_STEERING_AUX_RPT_COMPLETE (2)
#endif

#ifndef CALIBRATION_STATUS_STEERING_AUX_RPT_ERROR
#define CALIBRATION_STATUS_STEERING_AUX_RPT_ERROR (3)
#endif


// Value tables for @STEERING_CONTROLLER_TYPE signal

#ifndef STEERING_CONTROLLER_TYPE_STEERING_AUX_RPT_LOW_SPEED
#define STEERING_CONTROLLER_TYPE_STEERING_AUX_RPT_LOW_SPEED (0)
#endif

#ifndef STEERING_CONTROLLER_TYPE_STEERING_AUX_RPT_HIGH_SPEED
#define STEERING_CONTROLLER_TYPE_STEERING_AUX_RPT_HIGH_SPEED (1)
#endif


// Value tables for @STEERING_TORQUE_AVAIL signal

#ifndef STEERING_TORQUE_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE
#define STEERING_TORQUE_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef STEERING_TORQUE_AVAIL_STEERING_AUX_RPT_AVAILABLE
#define STEERING_TORQUE_AVAIL_STEERING_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @ROTATION_RATE_AVAIL signal

#ifndef ROTATION_RATE_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE
#define ROTATION_RATE_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ROTATION_RATE_AVAIL_STEERING_AUX_RPT_AVAILABLE
#define ROTATION_RATE_AVAIL_STEERING_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @OPERATOR_INTERACTION_AVAIL signal

#ifndef OPERATOR_INTERACTION_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE
#define OPERATOR_INTERACTION_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef OPERATOR_INTERACTION_AVAIL_STEERING_AUX_RPT_AVAILABLE
#define OPERATOR_INTERACTION_AVAIL_STEERING_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @ROTATION_RATE_SIGN_AVAIL signal

#ifndef ROTATION_RATE_SIGN_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE
#define ROTATION_RATE_SIGN_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ROTATION_RATE_SIGN_AVAIL_STEERING_AUX_RPT_AVAILABLE
#define ROTATION_RATE_SIGN_AVAIL_STEERING_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @VEHICLE_ANGLE_CALIB_STATUS_AVAIL signal

#ifndef VEHICLE_ANGLE_CALIB_STATUS_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE
#define VEHICLE_ANGLE_CALIB_STATUS_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef VEHICLE_ANGLE_CALIB_STATUS_AVAIL_STEERING_AUX_RPT_AVAILABLE
#define VEHICLE_ANGLE_CALIB_STATUS_AVAIL_STEERING_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @STEERING_LIMITING_ACTIVE_AVAIL signal

#ifndef STEERING_LIMITING_ACTIVE_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE
#define STEERING_LIMITING_ACTIVE_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef STEERING_LIMITING_ACTIVE_AVAIL_STEERING_AUX_RPT_AVAILABLE
#define STEERING_LIMITING_ACTIVE_AVAIL_STEERING_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @STEERING_CONTROLLER_TYPE_AVAIL signal

#ifndef STEERING_CONTROLLER_TYPE_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE
#define STEERING_CONTROLLER_TYPE_AVAIL_STEERING_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef STEERING_CONTROLLER_TYPE_AVAIL_STEERING_AUX_RPT_AVAILABLE
#define STEERING_CONTROLLER_TYPE_AVAIL_STEERING_AUX_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t STEERING_FLUID_PRESSURE_ro;            //      Bits=16 Factor= 0.5             Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t STEERING_FLUID_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t STEERING_TORQUE_ro;                     //  [-] Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t STEERING_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t ROTATION_RATE_ro;                      //      Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROTATION_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // OPERATOR_INTERACTION shall have the value of 1 if the driver is moving, changing, or otherwise touching the operator control(s) that relates to this signal to an extent that is detectable. Otherwise, the value shall be 0.
  //  0 : "NO_INTERACTION"
  //  1 : "INTERACTION"
  uint8_t OPERATOR_INTERACTION : 1;               //      Bits= 1

  // Counterclockwise rotation is positive according to the right-hand rule.
  //  0 : "POSITIVE"
  //  1 : "NEGATIVE"
  uint8_t ROTATION_RATE_SIGN : 1;                 //      Bits= 1

  //  0 : "NOT_CALIBRATED"
  //  1 : "CALIBRATED"
  uint8_t VEHICLE_ANGLE_CALIB_STATUS : 1;         //      Bits= 1

  // STEERING_LIMITING_ACTIVE shall have the value of 1 if a limiting function is reducing an excessive command.  Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t STEERING_LIMITING_ACTIVE : 1;           //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS : 3;                 //      Bits= 3

  // STEERING_CONTROLER_TYPE indicates which steering controller is the PACMod System is using.
  //  0 : "LOW_SPEED"
  //  1 : "HIGH_SPEED"
  uint8_t STEERING_CONTROLLER_TYPE : 1;           //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_TORQUE_AVAIL : 1;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ROTATION_RATE_AVAIL : 1;                //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OPERATOR_INTERACTION_AVAIL : 1;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ROTATION_RATE_SIGN_AVAIL : 1;           //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t VEHICLE_ANGLE_CALIB_STATUS_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_LIMITING_ACTIVE_AVAIL : 1;     //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_CONTROLLER_TYPE_AVAIL : 1;     //      Bits= 1

#else

  uint16_t STEERING_FLUID_PRESSURE_ro;            //      Bits=16 Factor= 0.5             Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t STEERING_FLUID_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t STEERING_TORQUE_ro;                     //  [-] Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t STEERING_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t ROTATION_RATE_ro;                      //      Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROTATION_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // OPERATOR_INTERACTION shall have the value of 1 if the driver is moving, changing, or otherwise touching the operator control(s) that relates to this signal to an extent that is detectable. Otherwise, the value shall be 0.
  //  0 : "NO_INTERACTION"
  //  1 : "INTERACTION"
  uint8_t OPERATOR_INTERACTION;                   //      Bits= 1

  // Counterclockwise rotation is positive according to the right-hand rule.
  //  0 : "POSITIVE"
  //  1 : "NEGATIVE"
  uint8_t ROTATION_RATE_SIGN;                     //      Bits= 1

  //  0 : "NOT_CALIBRATED"
  //  1 : "CALIBRATED"
  uint8_t VEHICLE_ANGLE_CALIB_STATUS;             //      Bits= 1

  // STEERING_LIMITING_ACTIVE shall have the value of 1 if a limiting function is reducing an excessive command.  Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t STEERING_LIMITING_ACTIVE;               //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS;                     //      Bits= 3

  // STEERING_CONTROLER_TYPE indicates which steering controller is the PACMod System is using.
  //  0 : "LOW_SPEED"
  //  1 : "HIGH_SPEED"
  uint8_t STEERING_CONTROLLER_TYPE;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_TORQUE_AVAIL;                  //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ROTATION_RATE_AVAIL;                    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OPERATOR_INTERACTION_AVAIL;             //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ROTATION_RATE_SIGN_AVAIL;               //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t VEHICLE_ANGLE_CALIB_STATUS_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_LIMITING_ACTIVE_AVAIL;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_CONTROLLER_TYPE_AVAIL;         //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} STEERING_AUX_RPT_t;

// def @STEERING_AUX_RPT_2 CAN Message (814  0x32e)
#define STEERING_AUX_RPT_2_IDE (0U)
#define STEERING_AUX_RPT_2_DLC (8U)
#define STEERING_AUX_RPT_2_CANID (0x32e)

// Value tables for @OPERATOR_INTERACTION signal

#ifndef OPERATOR_INTERACTION_STEERING_AUX_RPT_2_NO_INTERACTION
#define OPERATOR_INTERACTION_STEERING_AUX_RPT_2_NO_INTERACTION (0)
#endif

#ifndef OPERATOR_INTERACTION_STEERING_AUX_RPT_2_INTERACTION
#define OPERATOR_INTERACTION_STEERING_AUX_RPT_2_INTERACTION (1)
#endif


// Value tables for @ROTATION_RATE_SIGN signal

#ifndef ROTATION_RATE_SIGN_STEERING_AUX_RPT_2_POSITIVE
#define ROTATION_RATE_SIGN_STEERING_AUX_RPT_2_POSITIVE (0)
#endif

#ifndef ROTATION_RATE_SIGN_STEERING_AUX_RPT_2_NEGATIVE
#define ROTATION_RATE_SIGN_STEERING_AUX_RPT_2_NEGATIVE (1)
#endif


// Value tables for @VEHICLE_ANGLE_CALIB_STATUS signal

#ifndef VEHICLE_ANGLE_CALIB_STATUS_STEERING_AUX_RPT_2_NOT_CALIBRATED
#define VEHICLE_ANGLE_CALIB_STATUS_STEERING_AUX_RPT_2_NOT_CALIBRATED (0)
#endif

#ifndef VEHICLE_ANGLE_CALIB_STATUS_STEERING_AUX_RPT_2_CALIBRATED
#define VEHICLE_ANGLE_CALIB_STATUS_STEERING_AUX_RPT_2_CALIBRATED (1)
#endif


// Value tables for @STEERING_LIMITING_ACTIVE signal

#ifndef STEERING_LIMITING_ACTIVE_STEERING_AUX_RPT_2_NOT_ACTIVE
#define STEERING_LIMITING_ACTIVE_STEERING_AUX_RPT_2_NOT_ACTIVE (0)
#endif

#ifndef STEERING_LIMITING_ACTIVE_STEERING_AUX_RPT_2_ACTIVE
#define STEERING_LIMITING_ACTIVE_STEERING_AUX_RPT_2_ACTIVE (1)
#endif


// Value tables for @CALIBRATION_STATUS signal

#ifndef CALIBRATION_STATUS_STEERING_AUX_RPT_2_INACTIVE
#define CALIBRATION_STATUS_STEERING_AUX_RPT_2_INACTIVE (0)
#endif

#ifndef CALIBRATION_STATUS_STEERING_AUX_RPT_2_ACTIVE
#define CALIBRATION_STATUS_STEERING_AUX_RPT_2_ACTIVE (1)
#endif

#ifndef CALIBRATION_STATUS_STEERING_AUX_RPT_2_COMPLETE
#define CALIBRATION_STATUS_STEERING_AUX_RPT_2_COMPLETE (2)
#endif

#ifndef CALIBRATION_STATUS_STEERING_AUX_RPT_2_ERROR
#define CALIBRATION_STATUS_STEERING_AUX_RPT_2_ERROR (3)
#endif


// Value tables for @STEERING_CONTROLLER_TYPE signal

#ifndef STEERING_CONTROLLER_TYPE_STEERING_AUX_RPT_2_LOW_SPEED
#define STEERING_CONTROLLER_TYPE_STEERING_AUX_RPT_2_LOW_SPEED (0)
#endif

#ifndef STEERING_CONTROLLER_TYPE_STEERING_AUX_RPT_2_HIGH_SPEED
#define STEERING_CONTROLLER_TYPE_STEERING_AUX_RPT_2_HIGH_SPEED (1)
#endif


// Value tables for @STEERING_TORQUE_AVAIL signal

#ifndef STEERING_TORQUE_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE
#define STEERING_TORQUE_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef STEERING_TORQUE_AVAIL_STEERING_AUX_RPT_2_AVAILABLE
#define STEERING_TORQUE_AVAIL_STEERING_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @ROTATION_RATE_AVAIL signal

#ifndef ROTATION_RATE_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE
#define ROTATION_RATE_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef ROTATION_RATE_AVAIL_STEERING_AUX_RPT_2_AVAILABLE
#define ROTATION_RATE_AVAIL_STEERING_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @OPERATOR_INTERACTION_AVAIL signal

#ifndef OPERATOR_INTERACTION_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE
#define OPERATOR_INTERACTION_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef OPERATOR_INTERACTION_AVAIL_STEERING_AUX_RPT_2_AVAILABLE
#define OPERATOR_INTERACTION_AVAIL_STEERING_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @ROTATION_RATE_SIGN_AVAIL signal

#ifndef ROTATION_RATE_SIGN_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE
#define ROTATION_RATE_SIGN_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef ROTATION_RATE_SIGN_AVAIL_STEERING_AUX_RPT_2_AVAILABLE
#define ROTATION_RATE_SIGN_AVAIL_STEERING_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @VEHICLE_ANGLE_CALIB_STATUS_AVAIL signal

#ifndef VEHICLE_ANGLE_CALIB_STATUS_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE
#define VEHICLE_ANGLE_CALIB_STATUS_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef VEHICLE_ANGLE_CALIB_STATUS_AVAIL_STEERING_AUX_RPT_2_AVAILABLE
#define VEHICLE_ANGLE_CALIB_STATUS_AVAIL_STEERING_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @STEERING_LIMITING_ACTIVE_AVAIL signal

#ifndef STEERING_LIMITING_ACTIVE_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE
#define STEERING_LIMITING_ACTIVE_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef STEERING_LIMITING_ACTIVE_AVAIL_STEERING_AUX_RPT_2_AVAILABLE
#define STEERING_LIMITING_ACTIVE_AVAIL_STEERING_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @STEERING_CONTROLLER_TYPE_AVAIL signal

#ifndef STEERING_CONTROLLER_TYPE_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE
#define STEERING_CONTROLLER_TYPE_AVAIL_STEERING_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef STEERING_CONTROLLER_TYPE_AVAIL_STEERING_AUX_RPT_2_AVAILABLE
#define STEERING_CONTROLLER_TYPE_AVAIL_STEERING_AUX_RPT_2_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t STEERING_FLUID_PRESSURE_ro;            //      Bits=16 Factor= 0.5             Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t STEERING_FLUID_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t STEERING_TORQUE_ro;                     //  [-] Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t STEERING_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t ROTATION_RATE_ro;                      //      Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROTATION_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // OPERATOR_INTERACTION shall have the value of 1 if the driver is moving, changing, or otherwise touching the operator control(s) that relates to this signal to an extent that is detectable. Otherwise, the value shall be 0.
  //  0 : "NO_INTERACTION"
  //  1 : "INTERACTION"
  uint8_t OPERATOR_INTERACTION : 1;               //      Bits= 1

  // Counterclockwise rotation is positive according to the right-hand rule.
  //  0 : "POSITIVE"
  //  1 : "NEGATIVE"
  uint8_t ROTATION_RATE_SIGN : 1;                 //      Bits= 1

  //  0 : "NOT_CALIBRATED"
  //  1 : "CALIBRATED"
  uint8_t VEHICLE_ANGLE_CALIB_STATUS : 1;         //      Bits= 1

  // STEERING_LIMITING_ACTIVE shall have the value of 1 if a limiting function is reducing an excessive command.  Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t STEERING_LIMITING_ACTIVE : 1;           //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS : 3;                 //      Bits= 3

  // STEERING_CONTROLER_TYPE indicates which steering controller is the PACMod System is using.
  //  0 : "LOW_SPEED"
  //  1 : "HIGH_SPEED"
  uint8_t STEERING_CONTROLLER_TYPE : 1;           //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_TORQUE_AVAIL : 1;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ROTATION_RATE_AVAIL : 1;                //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OPERATOR_INTERACTION_AVAIL : 1;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ROTATION_RATE_SIGN_AVAIL : 1;           //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t VEHICLE_ANGLE_CALIB_STATUS_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_LIMITING_ACTIVE_AVAIL : 1;     //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_CONTROLLER_TYPE_AVAIL : 1;     //      Bits= 1

#else

  uint16_t STEERING_FLUID_PRESSURE_ro;            //      Bits=16 Factor= 0.5             Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t STEERING_FLUID_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t STEERING_TORQUE_ro;                     //  [-] Bits=16 Factor= 0.0001          Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t STEERING_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t ROTATION_RATE_ro;                      //      Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROTATION_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // OPERATOR_INTERACTION shall have the value of 1 if the driver is moving, changing, or otherwise touching the operator control(s) that relates to this signal to an extent that is detectable. Otherwise, the value shall be 0.
  //  0 : "NO_INTERACTION"
  //  1 : "INTERACTION"
  uint8_t OPERATOR_INTERACTION;                   //      Bits= 1

  // Counterclockwise rotation is positive according to the right-hand rule.
  //  0 : "POSITIVE"
  //  1 : "NEGATIVE"
  uint8_t ROTATION_RATE_SIGN;                     //      Bits= 1

  //  0 : "NOT_CALIBRATED"
  //  1 : "CALIBRATED"
  uint8_t VEHICLE_ANGLE_CALIB_STATUS;             //      Bits= 1

  // STEERING_LIMITING_ACTIVE shall have the value of 1 if a limiting function is reducing an excessive command.  Otherwise, the value shall be 0.
  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t STEERING_LIMITING_ACTIVE;               //      Bits= 1

  // CALIBRATION_STATUS shall indicate the status of a calibration of this system. If this system has more than one calibration, then those calibrations are INACTIVE.
  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "COMPLETE"
  //  3 : "ERROR"
  uint8_t CALIBRATION_STATUS;                     //      Bits= 3

  // STEERING_CONTROLER_TYPE indicates which steering controller is the PACMod System is using.
  //  0 : "LOW_SPEED"
  //  1 : "HIGH_SPEED"
  uint8_t STEERING_CONTROLLER_TYPE;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_TORQUE_AVAIL;                  //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ROTATION_RATE_AVAIL;                    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OPERATOR_INTERACTION_AVAIL;             //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ROTATION_RATE_SIGN_AVAIL;               //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t VEHICLE_ANGLE_CALIB_STATUS_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_LIMITING_ACTIVE_AVAIL;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t STEERING_CONTROLLER_TYPE_AVAIL;         //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} STEERING_AUX_RPT_2_t;

// def @TURN_AUX_RPT CAN Message (816  0x330)
#define TURN_AUX_RPT_IDE (0U)
#define TURN_AUX_RPT_DLC (2U)
#define TURN_AUX_RPT_CANID (0x330)
#define TURN_AUX_RPT_CYC (100U)

// Value tables for @DRIVER_BLINKER_BULB_ON signal

#ifndef DRIVER_BLINKER_BULB_ON_TURN_AUX_RPT_OFF
#define DRIVER_BLINKER_BULB_ON_TURN_AUX_RPT_OFF (0)
#endif

#ifndef DRIVER_BLINKER_BULB_ON_TURN_AUX_RPT_ON
#define DRIVER_BLINKER_BULB_ON_TURN_AUX_RPT_ON (1)
#endif


// Value tables for @PASS_BLINKER_BULB_ON signal

#ifndef PASS_BLINKER_BULB_ON_TURN_AUX_RPT_OFF
#define PASS_BLINKER_BULB_ON_TURN_AUX_RPT_OFF (0)
#endif

#ifndef PASS_BLINKER_BULB_ON_TURN_AUX_RPT_ON
#define PASS_BLINKER_BULB_ON_TURN_AUX_RPT_ON (1)
#endif


// Value tables for @DRIVER_BLINKER_BULB_ON_AVAIL signal

#ifndef DRIVER_BLINKER_BULB_ON_AVAIL_TURN_AUX_RPT_NOT_AVAILABLE
#define DRIVER_BLINKER_BULB_ON_AVAIL_TURN_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef DRIVER_BLINKER_BULB_ON_AVAIL_TURN_AUX_RPT_AVAILABLE
#define DRIVER_BLINKER_BULB_ON_AVAIL_TURN_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @PASS_BLINKER_BULB_ON_AVAIL signal

#ifndef PASS_BLINKER_BULB_ON_AVAIL_TURN_AUX_RPT_NOT_AVAILABLE
#define PASS_BLINKER_BULB_ON_AVAIL_TURN_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef PASS_BLINKER_BULB_ON_AVAIL_TURN_AUX_RPT_AVAILABLE
#define PASS_BLINKER_BULB_ON_AVAIL_TURN_AUX_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t DRIVER_BLINKER_BULB_ON : 1;         //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t PASS_BLINKER_BULB_ON : 1;           //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRIVER_BLINKER_BULB_ON_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PASS_BLINKER_BULB_ON_AVAIL : 1;     //      Bits= 1

#else

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t DRIVER_BLINKER_BULB_ON;             //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t PASS_BLINKER_BULB_ON;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRIVER_BLINKER_BULB_ON_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PASS_BLINKER_BULB_ON_AVAIL;         //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TURN_AUX_RPT_t;

// def @WIPER_AUX_RPT CAN Message (820  0x334)
#define WIPER_AUX_RPT_IDE (0U)
#define WIPER_AUX_RPT_DLC (2U)
#define WIPER_AUX_RPT_CANID (0x334)
#define WIPER_AUX_RPT_CYC (100U)

// Value tables for @FRONT_WIPING signal

#ifndef FRONT_WIPING_WIPER_AUX_RPT_NOT_WIPING
#define FRONT_WIPING_WIPER_AUX_RPT_NOT_WIPING (0)
#endif

#ifndef FRONT_WIPING_WIPER_AUX_RPT_WIPING
#define FRONT_WIPING_WIPER_AUX_RPT_WIPING (1)
#endif


// Value tables for @FRONT_SPRAYING signal

#ifndef FRONT_SPRAYING_WIPER_AUX_RPT_NOT_SPRAYING
#define FRONT_SPRAYING_WIPER_AUX_RPT_NOT_SPRAYING (0)
#endif

#ifndef FRONT_SPRAYING_WIPER_AUX_RPT_SPRAYING
#define FRONT_SPRAYING_WIPER_AUX_RPT_SPRAYING (1)
#endif


// Value tables for @REAR_WIPING signal

#ifndef REAR_WIPING_WIPER_AUX_RPT_NOT_WIPING
#define REAR_WIPING_WIPER_AUX_RPT_NOT_WIPING (0)
#endif

#ifndef REAR_WIPING_WIPER_AUX_RPT_WIPING
#define REAR_WIPING_WIPER_AUX_RPT_WIPING (1)
#endif


// Value tables for @REAR_SPRAYING signal

#ifndef REAR_SPRAYING_WIPER_AUX_RPT_NOT_SPRAYING
#define REAR_SPRAYING_WIPER_AUX_RPT_NOT_SPRAYING (0)
#endif

#ifndef REAR_SPRAYING_WIPER_AUX_RPT_SPRAYING
#define REAR_SPRAYING_WIPER_AUX_RPT_SPRAYING (1)
#endif


// Value tables for @SPRAY_NEAR_EMPTY signal

#ifndef SPRAY_NEAR_EMPTY_WIPER_AUX_RPT_NOT_NEAR_EMPTY
#define SPRAY_NEAR_EMPTY_WIPER_AUX_RPT_NOT_NEAR_EMPTY (0)
#endif

#ifndef SPRAY_NEAR_EMPTY_WIPER_AUX_RPT_NEAR_EMPTY
#define SPRAY_NEAR_EMPTY_WIPER_AUX_RPT_NEAR_EMPTY (1)
#endif


// Value tables for @SPRAY_EMPTY signal

#ifndef SPRAY_EMPTY_WIPER_AUX_RPT_NOT_EMPTY
#define SPRAY_EMPTY_WIPER_AUX_RPT_NOT_EMPTY (0)
#endif

#ifndef SPRAY_EMPTY_WIPER_AUX_RPT_EMPTY
#define SPRAY_EMPTY_WIPER_AUX_RPT_EMPTY (1)
#endif


// Value tables for @FRONT_WIPING_AVAIL signal

#ifndef FRONT_WIPING_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE
#define FRONT_WIPING_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef FRONT_WIPING_AVAIL_WIPER_AUX_RPT_AVAILABLE
#define FRONT_WIPING_AVAIL_WIPER_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @FRONT_SPRAYING_AVAIL signal

#ifndef FRONT_SPRAYING_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE
#define FRONT_SPRAYING_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef FRONT_SPRAYING_AVAIL_WIPER_AUX_RPT_AVAILABLE
#define FRONT_SPRAYING_AVAIL_WIPER_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @REAR_WIPING_AVAIL signal

#ifndef REAR_WIPING_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE
#define REAR_WIPING_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef REAR_WIPING_AVAIL_WIPER_AUX_RPT_AVAILABLE
#define REAR_WIPING_AVAIL_WIPER_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @REAR_SPRAYING_AVAIL signal

#ifndef REAR_SPRAYING_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE
#define REAR_SPRAYING_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef REAR_SPRAYING_AVAIL_WIPER_AUX_RPT_AVAILABLE
#define REAR_SPRAYING_AVAIL_WIPER_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @SPRAY_NEAR_EMPTY_AVAIL signal

#ifndef SPRAY_NEAR_EMPTY_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE
#define SPRAY_NEAR_EMPTY_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef SPRAY_NEAR_EMPTY_AVAIL_WIPER_AUX_RPT_AVAILABLE
#define SPRAY_NEAR_EMPTY_AVAIL_WIPER_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @SPRAY_EMPTY_AVAIL signal

#ifndef SPRAY_EMPTY_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE
#define SPRAY_EMPTY_AVAIL_WIPER_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef SPRAY_EMPTY_AVAIL_WIPER_AUX_RPT_AVAILABLE
#define SPRAY_EMPTY_AVAIL_WIPER_AUX_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NOT_WIPING"
  //  1 : "WIPING"
  uint8_t FRONT_WIPING : 1;                  //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t FRONT_SPRAYING : 1;                //      Bits= 1

  //  0 : "NOT_WIPING"
  //  1 : "WIPING"
  uint8_t REAR_WIPING : 1;                   //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t REAR_SPRAYING : 1;                 //      Bits= 1

  //  0 : "NOT_NEAR_EMPTY"
  //  1 : "NEAR_EMPTY"
  uint8_t SPRAY_NEAR_EMPTY : 1;              //      Bits= 1

  //  0 : "NOT_EMPTY"
  //  1 : "EMPTY"
  uint8_t SPRAY_EMPTY : 1;                   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FRONT_WIPING_AVAIL : 1;            //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FRONT_SPRAYING_AVAIL : 1;          //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_WIPING_AVAIL : 1;             //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_SPRAYING_AVAIL : 1;           //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t SPRAY_NEAR_EMPTY_AVAIL : 1;        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t SPRAY_EMPTY_AVAIL : 1;             //      Bits= 1

#else

  //  0 : "NOT_WIPING"
  //  1 : "WIPING"
  uint8_t FRONT_WIPING;                      //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t FRONT_SPRAYING;                    //      Bits= 1

  //  0 : "NOT_WIPING"
  //  1 : "WIPING"
  uint8_t REAR_WIPING;                       //      Bits= 1

  //  0 : "NOT_SPRAYING"
  //  1 : "SPRAYING"
  uint8_t REAR_SPRAYING;                     //      Bits= 1

  //  0 : "NOT_NEAR_EMPTY"
  //  1 : "NEAR_EMPTY"
  uint8_t SPRAY_NEAR_EMPTY;                  //      Bits= 1

  //  0 : "NOT_EMPTY"
  //  1 : "EMPTY"
  uint8_t SPRAY_EMPTY;                       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FRONT_WIPING_AVAIL;                //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FRONT_SPRAYING_AVAIL;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_WIPING_AVAIL;                 //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_SPRAYING_AVAIL;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t SPRAY_NEAR_EMPTY_AVAIL;            //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t SPRAY_EMPTY_AVAIL;                 //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} WIPER_AUX_RPT_t;

// def @BRAKE_DECEL_AUX_RPT CAN Message (824  0x338)
#define BRAKE_DECEL_AUX_RPT_IDE (0U)
#define BRAKE_DECEL_AUX_RPT_DLC (3U)
#define BRAKE_DECEL_AUX_RPT_CANID (0x338)

// Value tables for @XBR_ACTIVE_CONTROL_MODE signal

#ifndef XBR_ACTIVE_CONTROL_MODE_BRAKE_DECEL_AUX_RPT_NO_BRAKE_DEMAND
#define XBR_ACTIVE_CONTROL_MODE_BRAKE_DECEL_AUX_RPT_NO_BRAKE_DEMAND (0)
#endif

#ifndef XBR_ACTIVE_CONTROL_MODE_BRAKE_DECEL_AUX_RPT_DRIVERS_BRAKE_DEMAND
#define XBR_ACTIVE_CONTROL_MODE_BRAKE_DECEL_AUX_RPT_DRIVERS_BRAKE_DEMAND (1)
#endif

#ifndef XBR_ACTIVE_CONTROL_MODE_BRAKE_DECEL_AUX_RPT_ADDITION_MODE_OF_XBR_ACCEL_CTRL
#define XBR_ACTIVE_CONTROL_MODE_BRAKE_DECEL_AUX_RPT_ADDITION_MODE_OF_XBR_ACCEL_CTRL (2)
#endif

#ifndef XBR_ACTIVE_CONTROL_MODE_BRAKE_DECEL_AUX_RPT_MAXIMUM_MODE_OF_XBR_ACCEL_CTRL
#define XBR_ACTIVE_CONTROL_MODE_BRAKE_DECEL_AUX_RPT_MAXIMUM_MODE_OF_XBR_ACCEL_CTRL (3)
#endif


// Value tables for @XBR_SYSTEM_STATE signal

#ifndef XBR_SYSTEM_STATE_BRAKE_DECEL_AUX_RPT_ANY_EXT_BRK_DEMAND_WILL_BE_ACPTD
#define XBR_SYSTEM_STATE_BRAKE_DECEL_AUX_RPT_ANY_EXT_BRK_DEMAND_WILL_BE_ACPTD (0)
#endif

#ifndef XBR_SYSTEM_STATE_BRAKE_DECEL_AUX_RPT_NO_EXT_BRK_DEMAND_WILL_BE_ACPTD
#define XBR_SYSTEM_STATE_BRAKE_DECEL_AUX_RPT_NO_EXT_BRK_DEMAND_WILL_BE_ACPTD (2)
#endif


// Value tables for @FOUNDATION_BRAKE_USE signal

#ifndef FOUNDATION_BRAKE_USE_BRAKE_DECEL_AUX_RPT_FOUNDATION_BRAKES_NOT_IN_USE
#define FOUNDATION_BRAKE_USE_BRAKE_DECEL_AUX_RPT_FOUNDATION_BRAKES_NOT_IN_USE (0)
#endif

#ifndef FOUNDATION_BRAKE_USE_BRAKE_DECEL_AUX_RPT_FOUNDATION_BRAKES_IN_USE
#define FOUNDATION_BRAKE_USE_BRAKE_DECEL_AUX_RPT_FOUNDATION_BRAKES_IN_USE (1)
#endif


// Value tables for @HILL_HOLDER_MODE signal

#ifndef HILL_HOLDER_MODE_BRAKE_DECEL_AUX_RPT_INACTIVE
#define HILL_HOLDER_MODE_BRAKE_DECEL_AUX_RPT_INACTIVE (0)
#endif

#ifndef HILL_HOLDER_MODE_BRAKE_DECEL_AUX_RPT_ACTIVE
#define HILL_HOLDER_MODE_BRAKE_DECEL_AUX_RPT_ACTIVE (1)
#endif

#ifndef HILL_HOLDER_MODE_BRAKE_DECEL_AUX_RPT_ACTIVE_BUT_INACTIVE_SOON
#define HILL_HOLDER_MODE_BRAKE_DECEL_AUX_RPT_ACTIVE_BUT_INACTIVE_SOON (2)
#endif

#ifndef HILL_HOLDER_MODE_BRAKE_DECEL_AUX_RPT_ERROR
#define HILL_HOLDER_MODE_BRAKE_DECEL_AUX_RPT_ERROR (6)
#endif


// Value tables for @XBR_ACTIVE_CONTROL_MODE_AVAIL signal

#ifndef XBR_ACTIVE_CONTROL_MODE_AVAIL_BRAKE_DECEL_AUX_RPT_NOT_AVAILABLE
#define XBR_ACTIVE_CONTROL_MODE_AVAIL_BRAKE_DECEL_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef XBR_ACTIVE_CONTROL_MODE_AVAIL_BRAKE_DECEL_AUX_RPT_AVAILABLE
#define XBR_ACTIVE_CONTROL_MODE_AVAIL_BRAKE_DECEL_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @XBR_SYSTEM_STATE_AVAIL signal

#ifndef XBR_SYSTEM_STATE_AVAIL_BRAKE_DECEL_AUX_RPT_NOT_AVAILABLE
#define XBR_SYSTEM_STATE_AVAIL_BRAKE_DECEL_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef XBR_SYSTEM_STATE_AVAIL_BRAKE_DECEL_AUX_RPT_AVAILABLE
#define XBR_SYSTEM_STATE_AVAIL_BRAKE_DECEL_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @FOUNDATION_BRAKE_USE_AVAIL signal

#ifndef FOUNDATION_BRAKE_USE_AVAIL_BRAKE_DECEL_AUX_RPT_NOT_AVAILABLE
#define FOUNDATION_BRAKE_USE_AVAIL_BRAKE_DECEL_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef FOUNDATION_BRAKE_USE_AVAIL_BRAKE_DECEL_AUX_RPT_AVAILABLE
#define FOUNDATION_BRAKE_USE_AVAIL_BRAKE_DECEL_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @HILL_HOLDER_MODE_AVAIL signal

#ifndef HILL_HOLDER_MODE_AVAIL_BRAKE_DECEL_AUX_RPT_NOT_AVAILABLE
#define HILL_HOLDER_MODE_AVAIL_BRAKE_DECEL_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef HILL_HOLDER_MODE_AVAIL_BRAKE_DECEL_AUX_RPT_AVAILABLE
#define HILL_HOLDER_MODE_AVAIL_BRAKE_DECEL_AUX_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NO_BRAKE_DEMAND"
  //  1 : "DRIVERS_BRAKE_DEMAND"
  //  2 : "ADDITION_MODE_OF_XBR_ACCEL_CTRL"
  //  3 : "MAXIMUM_MODE_OF_XBR_ACCEL_CTRL"
  uint8_t XBR_ACTIVE_CONTROL_MODE : 4;         //      Bits= 4

  //  0 : "ANY_EXT_BRK_DEMAND_WILL_BE_ACPTD"
  //  2 : "NO_EXT_BRK_DEMAND_WILL_BE_ACPTD"
  uint8_t XBR_SYSTEM_STATE : 2;                //      Bits= 2

  //  0 : "FOUNDATION_BRAKES_NOT_IN_USE"
  //  1 : "FOUNDATION_BRAKES_IN_USE"
  uint8_t FOUNDATION_BRAKE_USE : 2;            //      Bits= 2

  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "ACTIVE_BUT_INACTIVE_SOON"
  //  6 : "ERROR"
  uint8_t HILL_HOLDER_MODE : 3;                //      Bits= 3

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t XBR_ACTIVE_CONTROL_MODE_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t XBR_SYSTEM_STATE_AVAIL : 1;          //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FOUNDATION_BRAKE_USE_AVAIL : 1;      //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t HILL_HOLDER_MODE_AVAIL : 1;          //      Bits= 1

#else

  //  0 : "NO_BRAKE_DEMAND"
  //  1 : "DRIVERS_BRAKE_DEMAND"
  //  2 : "ADDITION_MODE_OF_XBR_ACCEL_CTRL"
  //  3 : "MAXIMUM_MODE_OF_XBR_ACCEL_CTRL"
  uint8_t XBR_ACTIVE_CONTROL_MODE;             //      Bits= 4

  //  0 : "ANY_EXT_BRK_DEMAND_WILL_BE_ACPTD"
  //  2 : "NO_EXT_BRK_DEMAND_WILL_BE_ACPTD"
  uint8_t XBR_SYSTEM_STATE;                    //      Bits= 2

  //  0 : "FOUNDATION_BRAKES_NOT_IN_USE"
  //  1 : "FOUNDATION_BRAKES_IN_USE"
  uint8_t FOUNDATION_BRAKE_USE;                //      Bits= 2

  //  0 : "INACTIVE"
  //  1 : "ACTIVE"
  //  2 : "ACTIVE_BUT_INACTIVE_SOON"
  //  6 : "ERROR"
  uint8_t HILL_HOLDER_MODE;                    //      Bits= 3

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t XBR_ACTIVE_CONTROL_MODE_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t XBR_SYSTEM_STATE_AVAIL;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FOUNDATION_BRAKE_USE_AVAIL;          //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t HILL_HOLDER_MODE_AVAIL;              //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_DECEL_AUX_RPT_t;

// def @ENGINE_BRAKE_AUX_RPT CAN Message (836  0x344)
#define ENGINE_BRAKE_AUX_RPT_IDE (0U)
#define ENGINE_BRAKE_AUX_RPT_DLC (4U)
#define ENGINE_BRAKE_AUX_RPT_CANID (0x344)

// Value tables for @ENGINE_BRAKE_STATUS signal

#ifndef ENGINE_BRAKE_STATUS_ENGINE_BRAKE_AUX_RPT_BRAKING_NOT_ACTIVE
#define ENGINE_BRAKE_STATUS_ENGINE_BRAKE_AUX_RPT_BRAKING_NOT_ACTIVE (0)
#endif

#ifndef ENGINE_BRAKE_STATUS_ENGINE_BRAKE_AUX_RPT_BRAKING_ACTIVE
#define ENGINE_BRAKE_STATUS_ENGINE_BRAKE_AUX_RPT_BRAKING_ACTIVE (1)
#endif

// signal: @ACTUAL_ENGINE_BRK_TORQUE_ro
#define PACMOD13_ACTUAL_ENGINE_BRK_TORQUE_ro_CovFactor (1)
#define PACMOD13_ACTUAL_ENGINE_BRK_TORQUE_ro_toS(x) ( (uint8_t) ((x) - (-125)) )
#define PACMOD13_ACTUAL_ENGINE_BRK_TORQUE_ro_fromS(x) ( ((x) + (-125)) )
// signal: @INTENDED_ENGINE_BRK_TORQUE_ro
#define PACMOD13_INTENDED_ENGINE_BRK_TORQUE_ro_CovFactor (1)
#define PACMOD13_INTENDED_ENGINE_BRK_TORQUE_ro_toS(x) ( (uint8_t) ((x) - (-125)) )
#define PACMOD13_INTENDED_ENGINE_BRK_TORQUE_ro_fromS(x) ( ((x) + (-125)) )

// Value tables for @ENGINE_BRAKE_STATUS_AVAIL signal

#ifndef ENGINE_BRAKE_STATUS_AVAIL_ENGINE_BRAKE_AUX_RPT_NOT_AVAILABLE
#define ENGINE_BRAKE_STATUS_AVAIL_ENGINE_BRAKE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ENGINE_BRAKE_STATUS_AVAIL_ENGINE_BRAKE_AUX_RPT_AVAILABLE
#define ENGINE_BRAKE_STATUS_AVAIL_ENGINE_BRAKE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @ACTUAL_ENGINE_BRK_TORQUE_AVAIL signal

#ifndef ACTUAL_ENGINE_BRK_TORQUE_AVAIL_ENGINE_BRAKE_AUX_RPT_NOT_AVAILABLE
#define ACTUAL_ENGINE_BRK_TORQUE_AVAIL_ENGINE_BRAKE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ACTUAL_ENGINE_BRK_TORQUE_AVAIL_ENGINE_BRAKE_AUX_RPT_AVAILABLE
#define ACTUAL_ENGINE_BRK_TORQUE_AVAIL_ENGINE_BRAKE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @INTENDED_ENGINE_BRK_TORQUE_AVAIL signal

#ifndef INTENDED_ENGINE_BRK_TORQUE_AVAIL_ENGINE_BRAKE_AUX_RPT_NOT_AVAILABLE
#define INTENDED_ENGINE_BRK_TORQUE_AVAIL_ENGINE_BRAKE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef INTENDED_ENGINE_BRK_TORQUE_AVAIL_ENGINE_BRAKE_AUX_RPT_AVAILABLE
#define INTENDED_ENGINE_BRK_TORQUE_AVAIL_ENGINE_BRAKE_AUX_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "BRAKING_NOT_ACTIVE"
  //  1 : "BRAKING_ACTIVE"
  uint8_t ENGINE_BRAKE_STATUS : 2;                //      Bits= 2

  uint8_t ACTUAL_ENGINE_BRK_TORQUE_ro;            //      Bits= 8 Offset= -125               Unit:'%'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t ACTUAL_ENGINE_BRK_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t INTENDED_ENGINE_BRK_TORQUE_ro;          //      Bits= 8 Offset= -125               Unit:'%'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t INTENDED_ENGINE_BRK_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENGINE_BRAKE_STATUS_AVAIL : 1;          //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ACTUAL_ENGINE_BRK_TORQUE_AVAIL : 1;     //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t INTENDED_ENGINE_BRK_TORQUE_AVAIL : 1;   //      Bits= 1

#else

  //  0 : "BRAKING_NOT_ACTIVE"
  //  1 : "BRAKING_ACTIVE"
  uint8_t ENGINE_BRAKE_STATUS;                    //      Bits= 2

  uint8_t ACTUAL_ENGINE_BRK_TORQUE_ro;            //      Bits= 8 Offset= -125               Unit:'%'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t ACTUAL_ENGINE_BRK_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t INTENDED_ENGINE_BRK_TORQUE_ro;          //      Bits= 8 Offset= -125               Unit:'%'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t INTENDED_ENGINE_BRK_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENGINE_BRAKE_STATUS_AVAIL;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ACTUAL_ENGINE_BRK_TORQUE_AVAIL;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t INTENDED_ENGINE_BRK_TORQUE_AVAIL;       //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ENGINE_BRAKE_AUX_RPT_t;

// Trailer number increments from the front most trailer and is indicated by the report index.
// def @TIPPER_BODY_AUX_RPT_00 CAN Message (856  0x358)
#define TIPPER_BODY_AUX_RPT_00_IDE (0U)
#define TIPPER_BODY_AUX_RPT_00_DLC (5U)
#define TIPPER_BODY_AUX_RPT_00_CANID (0x358)
#define TIPPER_BODY_AUX_RPT_00_CYC (250U)
// signal: @ROLL_ANGLE_ro
#define PACMOD13_ROLL_ANGLE_ro_CovFactor (0.001)
#define PACMOD13_ROLL_ANGLE_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_ROLL_ANGLE_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @PITCH_ANGLE_ro
#define PACMOD13_PITCH_ANGLE_ro_CovFactor (0.001)
#define PACMOD13_PITCH_ANGLE_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_PITCH_ANGLE_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

// Value tables for @DOOR_FULLY_OPEN signal

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_00_FALSE
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_00_FALSE (0)
#endif

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_00_TRUE
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_00_TRUE (1)
#endif

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_00_ERROR
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_00_ERROR (2)
#endif

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_00_NOT_AVAIL
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_00_NOT_AVAIL (3)
#endif


// Value tables for @DOOR_FULLY_CLOSED signal

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_00_FALSE
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_00_FALSE (0)
#endif

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_00_TRUE
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_00_TRUE (1)
#endif

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_00_ERROR
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_00_ERROR (2)
#endif

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_00_NOT_AVAIL
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_00_NOT_AVAIL (3)
#endif


// Value tables for @BODY_FULLY_LOWERED signal

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_00_FALSE
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_00_FALSE (0)
#endif

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_00_TRUE
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_00_TRUE (1)
#endif

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_00_ERROR
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_00_ERROR (2)
#endif

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_00_NOT_AVAIL
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_00_NOT_AVAIL (3)
#endif


// Value tables for @BODY_FULLY_RAISED signal

#ifndef BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_00_FALSE
#define BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_00_FALSE (0)
#endif

#ifndef BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_00_TRUE
#define BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_00_TRUE (1)
#endif

#ifndef BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_00_ERROR
#define BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_00_ERROR (2)
#endif

#ifndef BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_00_NOT_AVAIL
#define BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_00_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t ROLL_ANGLE_ro;                     //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROLL_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PITCH_ANGLE_ro;                    //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PITCH_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_OPEN : 2;               //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_CLOSED : 2;             //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BODY_FULLY_LOWERED : 2;            //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BODY_FULLY_RAISED : 2;             //      Bits= 2

#else

  int16_t ROLL_ANGLE_ro;                     //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROLL_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PITCH_ANGLE_ro;                    //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PITCH_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_OPEN;                   //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_CLOSED;                 //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BODY_FULLY_LOWERED;                //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BODY_FULLY_RAISED;                 //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIPPER_BODY_AUX_RPT_00_t;

// Trailer number increments from the front most trailer and is indicated by the report index.
// def @TIPPER_BODY_AUX_RPT_01 CAN Message (876  0x36c)
#define TIPPER_BODY_AUX_RPT_01_IDE (0U)
#define TIPPER_BODY_AUX_RPT_01_DLC (5U)
#define TIPPER_BODY_AUX_RPT_01_CANID (0x36c)
#define TIPPER_BODY_AUX_RPT_01_CYC (250U)

// Value tables for @DOOR_FULLY_OPEN signal

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_01_FALSE
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_01_FALSE (0)
#endif

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_01_TRUE
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_01_TRUE (1)
#endif

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_01_ERROR
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_01_ERROR (2)
#endif

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_01_NOT_AVAIL
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_01_NOT_AVAIL (3)
#endif


// Value tables for @DOOR_FULLY_CLOSED signal

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_01_FALSE
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_01_FALSE (0)
#endif

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_01_TRUE
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_01_TRUE (1)
#endif

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_01_ERROR
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_01_ERROR (2)
#endif

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_01_NOT_AVAIL
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_01_NOT_AVAIL (3)
#endif


// Value tables for @BODY_FULLY_LOWERED signal

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_01_FALSE
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_01_FALSE (0)
#endif

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_01_TRUE
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_01_TRUE (1)
#endif

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_01_ERROR
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_01_ERROR (2)
#endif

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_01_NOT_AVAIL
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_01_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t ROLL_ANGLE_ro;                     //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROLL_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PITCH_ANGLE_ro;                    //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PITCH_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_OPEN : 2;               //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_CLOSED : 2;             //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BODY_FULLY_LOWERED : 2;            //      Bits= 2

  uint8_t BODY_FULLY_RAISED : 2;             //      Bits= 2

#else

  int16_t ROLL_ANGLE_ro;                     //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROLL_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PITCH_ANGLE_ro;                    //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PITCH_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_OPEN;                   //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_CLOSED;                 //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BODY_FULLY_LOWERED;                //      Bits= 2

  uint8_t BODY_FULLY_RAISED;                 //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIPPER_BODY_AUX_RPT_01_t;

// Trailer number increments from the front most trailer and is indicated by the report index.
// def @TIPPER_BODY_AUX_RPT_02 CAN Message (880  0x370)
#define TIPPER_BODY_AUX_RPT_02_IDE (0U)
#define TIPPER_BODY_AUX_RPT_02_DLC (5U)
#define TIPPER_BODY_AUX_RPT_02_CANID (0x370)
#define TIPPER_BODY_AUX_RPT_02_CYC (250U)

// Value tables for @DOOR_FULLY_OPEN signal

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_02_FALSE
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_02_FALSE (0)
#endif

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_02_TRUE
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_02_TRUE (1)
#endif

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_02_ERROR
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_02_ERROR (2)
#endif

#ifndef DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_02_NOT_AVAIL
#define DOOR_FULLY_OPEN_TIPPER_BODY_AUX_RPT_02_NOT_AVAIL (3)
#endif


// Value tables for @DOOR_FULLY_CLOSED signal

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_02_FALSE
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_02_FALSE (0)
#endif

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_02_TRUE
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_02_TRUE (1)
#endif

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_02_ERROR
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_02_ERROR (2)
#endif

#ifndef DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_02_NOT_AVAIL
#define DOOR_FULLY_CLOSED_TIPPER_BODY_AUX_RPT_02_NOT_AVAIL (3)
#endif


// Value tables for @BODY_FULLY_LOWERED signal

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_02_FALSE
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_02_FALSE (0)
#endif

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_02_TRUE
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_02_TRUE (1)
#endif

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_02_ERROR
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_02_ERROR (2)
#endif

#ifndef BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_02_NOT_AVAIL
#define BODY_FULLY_LOWERED_TIPPER_BODY_AUX_RPT_02_NOT_AVAIL (3)
#endif


// Value tables for @BODY_FULLY_RAISED signal

#ifndef BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_02_FALSE
#define BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_02_FALSE (0)
#endif

#ifndef BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_02_TRUE
#define BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_02_TRUE (1)
#endif

#ifndef BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_02_ERROR
#define BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_02_ERROR (2)
#endif

#ifndef BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_02_NOT_AVAIL
#define BODY_FULLY_RAISED_TIPPER_BODY_AUX_RPT_02_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t ROLL_ANGLE_ro;                     //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROLL_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PITCH_ANGLE_ro;                    //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PITCH_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_OPEN : 2;               //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_CLOSED : 2;             //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BODY_FULLY_LOWERED : 2;            //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BODY_FULLY_RAISED : 2;             //      Bits= 2

#else

  int16_t ROLL_ANGLE_ro;                     //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROLL_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PITCH_ANGLE_ro;                    //  [-] Bits=16 Factor= 0.001           Unit:'rad'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PITCH_ANGLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_OPEN;                   //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t DOOR_FULLY_CLOSED;                 //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BODY_FULLY_LOWERED;                //      Bits= 2

  //  0 : "FALSE"
  //  1 : "TRUE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BODY_FULLY_RAISED;                 //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIPPER_BODY_AUX_RPT_02_t;

// def @VEHICLE_SPEED_RPT CAN Message (1024 0x400)
#define VEHICLE_SPEED_RPT_IDE (0U)
#define VEHICLE_SPEED_RPT_DLC (3U)
#define VEHICLE_SPEED_RPT_CANID (0x400)
// signal: @VEHICLE_SPEED_ro
#define PACMOD13_VEHICLE_SPEED_ro_CovFactor (0.01)
#define PACMOD13_VEHICLE_SPEED_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_VEHICLE_SPEED_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )

// Value tables for @VEHICLE_SPEED_VALID signal

#ifndef VEHICLE_SPEED_VALID_VEHICLE_SPEED_RPT_INVALID
#define VEHICLE_SPEED_VALID_VEHICLE_SPEED_RPT_INVALID (0)
#endif

#ifndef VEHICLE_SPEED_VALID_VEHICLE_SPEED_RPT_VALID
#define VEHICLE_SPEED_VALID_VEHICLE_SPEED_RPT_VALID (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t VEHICLE_SPEED_ro;                  //  [-] Bits=16 Factor= 0.01            Unit:'m/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t VEHICLE_SPEED_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "INVALID"
  //  1 : "VALID"
  uint8_t VEHICLE_SPEED_VALID : 1;           //      Bits= 1

#else

  int16_t VEHICLE_SPEED_ro;                  //  [-] Bits=16 Factor= 0.01            Unit:'m/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t VEHICLE_SPEED_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "INVALID"
  //  1 : "VALID"
  uint8_t VEHICLE_SPEED_VALID;               //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} VEHICLE_SPEED_RPT_t;

// def @BRAKE_MOTOR_RPT_1 CAN Message (1025 0x401)
#define BRAKE_MOTOR_RPT_1_IDE (0U)
#define BRAKE_MOTOR_RPT_1_DLC (8U)
#define BRAKE_MOTOR_RPT_1_CANID (0x401)
// signal: @MOTOR_CURRENT_ro
#define PACMOD13_MOTOR_CURRENT_ro_CovFactor (0.001)
#define PACMOD13_MOTOR_CURRENT_ro_toS(x) ( (int32_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_MOTOR_CURRENT_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @SHAFT_POSITION_ro
#define PACMOD13_SHAFT_POSITION_ro_CovFactor (0.001)
#define PACMOD13_SHAFT_POSITION_ro_toS(x) ( (int32_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_SHAFT_POSITION_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int32_t MOTOR_CURRENT_ro;                  //  [-] Bits=32 Factor= 0.001           Unit:'amps'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MOTOR_CURRENT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int32_t SHAFT_POSITION_ro;                 //  [-] Bits=32 Factor= 0.001           Unit:'radians'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t SHAFT_POSITION_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int32_t MOTOR_CURRENT_ro;                  //  [-] Bits=32 Factor= 0.001           Unit:'amps'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MOTOR_CURRENT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int32_t SHAFT_POSITION_ro;                 //  [-] Bits=32 Factor= 0.001           Unit:'radians'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t SHAFT_POSITION_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_MOTOR_RPT_1_t;

// def @BRAKE_MOTOR_RPT_2 CAN Message (1026 0x402)
#define BRAKE_MOTOR_RPT_2_IDE (0U)
#define BRAKE_MOTOR_RPT_2_DLC (8U)
#define BRAKE_MOTOR_RPT_2_CANID (0x402)
// signal: @ANGULAR_SPEED_ro
#define PACMOD13_ANGULAR_SPEED_ro_CovFactor (0.1)
#define PACMOD13_ANGULAR_SPEED_ro_toS(x) ( (int32_t) (((x) - (0.0)) / (0.1)) )
#define PACMOD13_ANGULAR_SPEED_ro_fromS(x) ( (((x) * (0.1)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t ENCODER_TEMPERATURE;               //  [-] Bits=16 Unit:'deg_C'

  int16_t MOTOR_TEMPERATURE;                 //  [-] Bits=16 Unit:'deg_C'

  int32_t ANGULAR_SPEED_ro;                  //  [-] Bits=32 Factor= 0.1             Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ANGULAR_SPEED_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int16_t ENCODER_TEMPERATURE;               //  [-] Bits=16 Unit:'deg_C'

  int16_t MOTOR_TEMPERATURE;                 //  [-] Bits=16 Unit:'deg_C'

  int32_t ANGULAR_SPEED_ro;                  //  [-] Bits=32 Factor= 0.1             Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ANGULAR_SPEED_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_MOTOR_RPT_2_t;

// def @BRAKE_MOTOR_RPT_3 CAN Message (1027 0x403)
#define BRAKE_MOTOR_RPT_3_IDE (0U)
#define BRAKE_MOTOR_RPT_3_DLC (8U)
#define BRAKE_MOTOR_RPT_3_CANID (0x403)
// signal: @TORQUE_OUTPUT_ro
#define PACMOD13_TORQUE_OUTPUT_ro_CovFactor (0.001)
#define PACMOD13_TORQUE_OUTPUT_ro_toS(x) ( (int32_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_TORQUE_OUTPUT_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @TORQUE_INPUT_ro
#define PACMOD13_TORQUE_INPUT_ro_CovFactor (0.001)
#define PACMOD13_TORQUE_INPUT_ro_toS(x) ( (int32_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_TORQUE_INPUT_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int32_t TORQUE_OUTPUT_ro;                  //  [-] Bits=32 Factor= 0.001           Unit:'N-m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t TORQUE_OUTPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int32_t TORQUE_INPUT_ro;                   //  [-] Bits=32 Factor= 0.001           Unit:'N-m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t TORQUE_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int32_t TORQUE_OUTPUT_ro;                  //  [-] Bits=32 Factor= 0.001           Unit:'N-m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t TORQUE_OUTPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int32_t TORQUE_INPUT_ro;                   //  [-] Bits=32 Factor= 0.001           Unit:'N-m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t TORQUE_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_MOTOR_RPT_3_t;

// def @STEERING_MOTOR_RPT_1 CAN Message (1028 0x404)
#define STEERING_MOTOR_RPT_1_IDE (0U)
#define STEERING_MOTOR_RPT_1_DLC (8U)
#define STEERING_MOTOR_RPT_1_CANID (0x404)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int32_t MOTOR_CURRENT_ro;                  //  [-] Bits=32 Factor= 0.001           Unit:'amps'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MOTOR_CURRENT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int32_t SHAFT_POSITION_ro;                 //  [-] Bits=32 Factor= 0.001           Unit:'radians'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t SHAFT_POSITION_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int32_t MOTOR_CURRENT_ro;                  //  [-] Bits=32 Factor= 0.001           Unit:'amps'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t MOTOR_CURRENT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int32_t SHAFT_POSITION_ro;                 //  [-] Bits=32 Factor= 0.001           Unit:'radians'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t SHAFT_POSITION_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} STEERING_MOTOR_RPT_1_t;

// def @STEERING_MOTOR_RPT_2 CAN Message (1029 0x405)
#define STEERING_MOTOR_RPT_2_IDE (0U)
#define STEERING_MOTOR_RPT_2_DLC (8U)
#define STEERING_MOTOR_RPT_2_CANID (0x405)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t ENCODER_TEMPERATURE;               //  [-] Bits=16 Unit:'deg_C'

  int16_t MOTOR_TEMPERATURE;                 //  [-] Bits=16 Unit:'deg_C'

  int32_t ANGULAR_SPEED_ro;                  //  [-] Bits=32 Factor= 0.1             Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ANGULAR_SPEED_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int16_t ENCODER_TEMPERATURE;               //  [-] Bits=16 Unit:'deg_C'

  int16_t MOTOR_TEMPERATURE;                 //  [-] Bits=16 Unit:'deg_C'

  int32_t ANGULAR_SPEED_ro;                  //  [-] Bits=32 Factor= 0.1             Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ANGULAR_SPEED_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} STEERING_MOTOR_RPT_2_t;

// def @STEERING_MOTOR_RPT_3 CAN Message (1030 0x406)
#define STEERING_MOTOR_RPT_3_IDE (0U)
#define STEERING_MOTOR_RPT_3_DLC (8U)
#define STEERING_MOTOR_RPT_3_CANID (0x406)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int32_t TORQUE_OUTPUT_ro;                  //  [-] Bits=32 Factor= 0.001           Unit:'N-m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t TORQUE_OUTPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int32_t TORQUE_INPUT_ro;                   //  [-] Bits=32 Factor= 0.001           Unit:'N-m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t TORQUE_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int32_t TORQUE_OUTPUT_ro;                  //  [-] Bits=32 Factor= 0.001           Unit:'N-m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t TORQUE_OUTPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int32_t TORQUE_INPUT_ro;                   //  [-] Bits=32 Factor= 0.001           Unit:'N-m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t TORQUE_INPUT_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} STEERING_MOTOR_RPT_3_t;

// def @WHEEL_SPEED_RPT CAN Message (1031 0x407)
#define WHEEL_SPEED_RPT_IDE (0U)
#define WHEEL_SPEED_RPT_DLC (8U)
#define WHEEL_SPEED_RPT_CANID (0x407)
// signal: @WHEEL_SPD_AXLE_1_LEFT_ro
#define PACMOD13_WHEEL_SPD_AXLE_1_LEFT_ro_CovFactor (0.01)
#define PACMOD13_WHEEL_SPD_AXLE_1_LEFT_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_WHEEL_SPD_AXLE_1_LEFT_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )
// signal: @WHEEL_SPD_AXLE_1_RIGHT_ro
#define PACMOD13_WHEEL_SPD_AXLE_1_RIGHT_ro_CovFactor (0.01)
#define PACMOD13_WHEEL_SPD_AXLE_1_RIGHT_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_WHEEL_SPD_AXLE_1_RIGHT_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )
// signal: @WHEEL_SPD_AXLE_2_LEFT_ro
#define PACMOD13_WHEEL_SPD_AXLE_2_LEFT_ro_CovFactor (0.01)
#define PACMOD13_WHEEL_SPD_AXLE_2_LEFT_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_WHEEL_SPD_AXLE_2_LEFT_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )
// signal: @WHEEL_SPD_AXLE_2_RIGHT_ro
#define PACMOD13_WHEEL_SPD_AXLE_2_RIGHT_ro_CovFactor (0.01)
#define PACMOD13_WHEEL_SPD_AXLE_2_RIGHT_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_WHEEL_SPD_AXLE_2_RIGHT_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t WHEEL_SPD_AXLE_1_LEFT_ro;          //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_1_RIGHT_ro;         //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_2_LEFT_ro;          //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_2_RIGHT_ro;         //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int16_t WHEEL_SPD_AXLE_1_LEFT_ro;          //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_1_RIGHT_ro;         //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_2_LEFT_ro;          //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_2_RIGHT_ro;         //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} WHEEL_SPEED_RPT_t;

// def @SOFTWARE_VERSION_RPT_00 CAN Message (1032 0x408)
#define SOFTWARE_VERSION_RPT_00_IDE (0U)
#define SOFTWARE_VERSION_RPT_00_DLC (7U)
#define SOFTWARE_VERSION_RPT_00_CANID (0x408)
#define SOFTWARE_VERSION_RPT_00_CYC (1000U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#else

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SOFTWARE_VERSION_RPT_00_t;

// def @SOFTWARE_VERSION_RPT_01 CAN Message (1033 0x409)
#define SOFTWARE_VERSION_RPT_01_IDE (0U)
#define SOFTWARE_VERSION_RPT_01_DLC (7U)
#define SOFTWARE_VERSION_RPT_01_CANID (0x409)
#define SOFTWARE_VERSION_RPT_01_CYC (1000U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#else

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SOFTWARE_VERSION_RPT_01_t;

// def @SOFTWARE_VERSION_RPT_02 CAN Message (1034 0x40a)
#define SOFTWARE_VERSION_RPT_02_IDE (0U)
#define SOFTWARE_VERSION_RPT_02_DLC (7U)
#define SOFTWARE_VERSION_RPT_02_CANID (0x40a)
#define SOFTWARE_VERSION_RPT_02_CYC (1000U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#else

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SOFTWARE_VERSION_RPT_02_t;

// def @SOFTWARE_VERSION_RPT_03 CAN Message (1035 0x40b)
#define SOFTWARE_VERSION_RPT_03_IDE (0U)
#define SOFTWARE_VERSION_RPT_03_DLC (7U)
#define SOFTWARE_VERSION_RPT_03_CANID (0x40b)
#define SOFTWARE_VERSION_RPT_03_CYC (1000U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#else

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SOFTWARE_VERSION_RPT_03_t;

// def @SOFTWARE_VERSION_RPT_04 CAN Message (1036 0x40c)
#define SOFTWARE_VERSION_RPT_04_IDE (0U)
#define SOFTWARE_VERSION_RPT_04_DLC (7U)
#define SOFTWARE_VERSION_RPT_04_CANID (0x40c)
#define SOFTWARE_VERSION_RPT_04_CYC (1000U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#else

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SOFTWARE_VERSION_RPT_04_t;

// Not for new development.
// def @YAW_RATE_RPT CAN Message (1037 0x40d)
#define YAW_RATE_RPT_IDE (0U)
#define YAW_RATE_RPT_DLC (2U)
#define YAW_RATE_RPT_CANID (0x40d)
// signal: @YAW_RATE_ro
#define PACMOD13_YAW_RATE_ro_CovFactor (0.01)
#define PACMOD13_YAW_RATE_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_YAW_RATE_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t YAW_RATE_ro;                       //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t YAW_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int16_t YAW_RATE_ro;                       //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t YAW_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} YAW_RATE_RPT_t;

// def @LAT_LON_HEADING_RPT CAN Message (1038 0x40e)
#define LAT_LON_HEADING_RPT_IDE (0U)
#define LAT_LON_HEADING_RPT_DLC (8U)
#define LAT_LON_HEADING_RPT_CANID (0x40e)
// signal: @HEADING_ro
#define PACMOD13_HEADING_ro_CovFactor (0.01)
#define PACMOD13_HEADING_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_HEADING_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int8_t LATITUDE_DEGREES;                   //  [-] Bits= 8 Unit:'deg'

  int8_t LATITUDE_MINUTES;                   //  [-] Bits= 8 Unit:'min'

  int8_t LATITUDE_SECONDS;                   //  [-] Bits= 8 Unit:'sec'

  int8_t LONGITUDE_DEGREES;                  //  [-] Bits= 8 Unit:'deg'

  int8_t LONGITUDE_MINUTES;                  //  [-] Bits= 8 Unit:'min'

  int8_t LONGITUDE_SECONDS;                  //  [-] Bits= 8 Unit:'sec'

  int16_t HEADING_ro;                        //  [-] Bits=16 Factor= 0.01            Unit:'deg'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t HEADING_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int8_t LATITUDE_DEGREES;                   //  [-] Bits= 8 Unit:'deg'

  int8_t LATITUDE_MINUTES;                   //  [-] Bits= 8 Unit:'min'

  int8_t LATITUDE_SECONDS;                   //  [-] Bits= 8 Unit:'sec'

  int8_t LONGITUDE_DEGREES;                  //  [-] Bits= 8 Unit:'deg'

  int8_t LONGITUDE_MINUTES;                  //  [-] Bits= 8 Unit:'min'

  int8_t LONGITUDE_SECONDS;                  //  [-] Bits= 8 Unit:'sec'

  int16_t HEADING_ro;                        //  [-] Bits=16 Factor= 0.01            Unit:'deg'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t HEADING_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} LAT_LON_HEADING_RPT_t;

// def @DATE_TIME_RPT CAN Message (1039 0x40f)
#define DATE_TIME_RPT_IDE (0U)
#define DATE_TIME_RPT_DLC (6U)
#define DATE_TIME_RPT_CANID (0x40f)
#define DATE_TIME_RPT_CYC (250U)
// signal: @DATE_YEAR_ro
#define PACMOD13_DATE_YEAR_ro_CovFactor (1)
#define PACMOD13_DATE_YEAR_ro_toS(x) ( (uint8_t) ((x) - (2000)) )
#define PACMOD13_DATE_YEAR_ro_fromS(x) ( ((x) + (2000)) )
// signal: @DATE_MONTH_ro
#define PACMOD13_DATE_MONTH_ro_CovFactor (1)
#define PACMOD13_DATE_MONTH_ro_toS(x) ( (uint8_t) ((x) - (1)) )
#define PACMOD13_DATE_MONTH_ro_fromS(x) ( ((x) + (1)) )
// signal: @DATE_DAY_ro
#define PACMOD13_DATE_DAY_ro_CovFactor (1)
#define PACMOD13_DATE_DAY_ro_toS(x) ( (uint8_t) ((x) - (1)) )
#define PACMOD13_DATE_DAY_ro_fromS(x) ( ((x) + (1)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t DATE_YEAR_ro;                      //      Bits= 8 Offset= 2000               Unit:'yr'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t DATE_YEAR_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t DATE_MONTH_ro;                     //      Bits= 8 Offset= 1                  Unit:'mon'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t DATE_MONTH_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t DATE_DAY_ro;                       //      Bits= 8 Offset= 1                  Unit:'dy'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t DATE_DAY_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIME_HOUR;                         //      Bits= 8 Unit:'hr'

  uint8_t TIME_MINUTE;                       //      Bits= 8 Unit:'min'

  uint8_t TIME_SECOND;                       //      Bits= 8 Unit:'sec'

#else

  uint8_t DATE_YEAR_ro;                      //      Bits= 8 Offset= 2000               Unit:'yr'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t DATE_YEAR_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t DATE_MONTH_ro;                     //      Bits= 8 Offset= 1                  Unit:'mon'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t DATE_MONTH_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t DATE_DAY_ro;                       //      Bits= 8 Offset= 1                  Unit:'dy'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t DATE_DAY_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIME_HOUR;                         //      Bits= 8 Unit:'hr'

  uint8_t TIME_MINUTE;                       //      Bits= 8 Unit:'min'

  uint8_t TIME_SECOND;                       //      Bits= 8 Unit:'sec'

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} DATE_TIME_RPT_t;

// def @ENGINE_AUX_RPT CAN Message (1040 0x410)
#define ENGINE_AUX_RPT_IDE (0U)
#define ENGINE_AUX_RPT_DLC (8U)
#define ENGINE_AUX_RPT_CANID (0x410)
// signal: @ENGINE_SPEED_ro
#define PACMOD13_ENGINE_SPEED_ro_CovFactor (0.25)
#define PACMOD13_ENGINE_SPEED_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.25)) )
#define PACMOD13_ENGINE_SPEED_ro_fromS(x) ( (((x) * (0.25)) + (0.0)) )
// signal: @ENGINE_TORQUE_ro
#define PACMOD13_ENGINE_TORQUE_ro_CovFactor (0.0625)
#define PACMOD13_ENGINE_TORQUE_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.0625)) )
#define PACMOD13_ENGINE_TORQUE_ro_fromS(x) ( (((x) * (0.0625)) + (0.0)) )
// signal: @ENGINE_COOLANT_TEMP_ro
#define PACMOD13_ENGINE_COOLANT_TEMP_ro_CovFactor (1)
#define PACMOD13_ENGINE_COOLANT_TEMP_ro_toS(x) ( (uint8_t) ((x) - (-40)) )
#define PACMOD13_ENGINE_COOLANT_TEMP_ro_fromS(x) ( ((x) + (-40)) )

// Value tables for @ENGINE_SPEED_AVAIL signal

#ifndef ENGINE_SPEED_AVAIL_ENGINE_AUX_RPT_NOT_AVAILABLE
#define ENGINE_SPEED_AVAIL_ENGINE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ENGINE_SPEED_AVAIL_ENGINE_AUX_RPT_AVAILABLE
#define ENGINE_SPEED_AVAIL_ENGINE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @ENGINE_TORQUE_AVAIL signal

#ifndef ENGINE_TORQUE_AVAIL_ENGINE_AUX_RPT_NOT_AVAILABLE
#define ENGINE_TORQUE_AVAIL_ENGINE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ENGINE_TORQUE_AVAIL_ENGINE_AUX_RPT_AVAILABLE
#define ENGINE_TORQUE_AVAIL_ENGINE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @ENGINE_COOLANT_TEMP_AVAIL signal

#ifndef ENGINE_COOLANT_TEMP_AVAIL_ENGINE_AUX_RPT_NOT_AVAILABLE
#define ENGINE_COOLANT_TEMP_AVAIL_ENGINE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ENGINE_COOLANT_TEMP_AVAIL_ENGINE_AUX_RPT_AVAILABLE
#define ENGINE_COOLANT_TEMP_AVAIL_ENGINE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @FUEL_LEVEL_AVAIL signal

#ifndef FUEL_LEVEL_AVAIL_ENGINE_AUX_RPT_NOT_AVAILABLE
#define FUEL_LEVEL_AVAIL_ENGINE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef FUEL_LEVEL_AVAIL_ENGINE_AUX_RPT_AVAILABLE
#define FUEL_LEVEL_AVAIL_ENGINE_AUX_RPT_AVAILABLE (1)
#endif


// Value tables for @DIESEL_EXHAUST_FLUID_LEVEL_AVAIL signal

#ifndef DIESEL_EXHAUST_FLUID_LEVEL_AVAIL_ENGINE_AUX_RPT_NOT_AVAILABLE
#define DIESEL_EXHAUST_FLUID_LEVEL_AVAIL_ENGINE_AUX_RPT_NOT_AVAILABLE (0)
#endif

#ifndef DIESEL_EXHAUST_FLUID_LEVEL_AVAIL_ENGINE_AUX_RPT_AVAILABLE
#define DIESEL_EXHAUST_FLUID_LEVEL_AVAIL_ENGINE_AUX_RPT_AVAILABLE (1)
#endif

// signal: @FUEL_LEVEL_ro
#define PACMOD13_FUEL_LEVEL_ro_CovFactor (0.005)
#define PACMOD13_FUEL_LEVEL_ro_toS(x) ( (uint8_t) (((x) - (0.0)) / (0.005)) )
#define PACMOD13_FUEL_LEVEL_ro_fromS(x) ( (((x) * (0.005)) + (0.0)) )
// signal: @DIESEL_EXHAUST_FLUID_LEVEL_ro
#define PACMOD13_DIESEL_EXHAUST_FLUID_LEVEL_ro_CovFactor (0.005)
#define PACMOD13_DIESEL_EXHAUST_FLUID_LEVEL_ro_toS(x) ( (uint8_t) (((x) - (0.0)) / (0.005)) )
#define PACMOD13_DIESEL_EXHAUST_FLUID_LEVEL_ro_fromS(x) ( (((x) * (0.005)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t ENGINE_SPEED_ro;                       //      Bits=16 Factor= 0.25            Unit:'rpm'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ENGINE_SPEED_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t ENGINE_TORQUE_ro;                      //      Bits=16 Factor= 0.0625          Unit:'N-m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ENGINE_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t ENGINE_COOLANT_TEMP_ro;                 //      Bits= 8 Offset= -40                Unit:'deg_C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t ENGINE_COOLANT_TEMP_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENGINE_SPEED_AVAIL : 1;                 //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENGINE_TORQUE_AVAIL : 1;                //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENGINE_COOLANT_TEMP_AVAIL : 1;          //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FUEL_LEVEL_AVAIL : 1;                   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DIESEL_EXHAUST_FLUID_LEVEL_AVAIL : 1;   //      Bits= 1

  uint8_t FUEL_LEVEL_ro;                          //      Bits= 8 Factor= 0.005           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t FUEL_LEVEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t DIESEL_EXHAUST_FLUID_LEVEL_ro;          //      Bits= 8 Factor= 0.005           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t DIESEL_EXHAUST_FLUID_LEVEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint16_t ENGINE_SPEED_ro;                       //      Bits=16 Factor= 0.25            Unit:'rpm'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ENGINE_SPEED_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t ENGINE_TORQUE_ro;                      //      Bits=16 Factor= 0.0625          Unit:'N-m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ENGINE_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t ENGINE_COOLANT_TEMP_ro;                 //      Bits= 8 Offset= -40                Unit:'deg_C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t ENGINE_COOLANT_TEMP_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENGINE_SPEED_AVAIL;                     //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENGINE_TORQUE_AVAIL;                    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENGINE_COOLANT_TEMP_AVAIL;              //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FUEL_LEVEL_AVAIL;                       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DIESEL_EXHAUST_FLUID_LEVEL_AVAIL;       //      Bits= 1

  uint8_t FUEL_LEVEL_ro;                          //      Bits= 8 Factor= 0.005           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t FUEL_LEVEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t DIESEL_EXHAUST_FLUID_LEVEL_ro;          //      Bits= 8 Factor= 0.005           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t DIESEL_EXHAUST_FLUID_LEVEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ENGINE_AUX_RPT_t;

// def @DETECTED_OBJECT_RPT CAN Message (1041 0x411)
#define DETECTED_OBJECT_RPT_IDE (0U)
#define DETECTED_OBJECT_RPT_DLC (6U)
#define DETECTED_OBJECT_RPT_CANID (0x411)
// signal: @FRONT_OBJECT_DISTANCE_LOW_RES_ro
#define PACMOD13_FRONT_OBJECT_DISTANCE_LOW_RES_ro_CovFactor (0.001)
#define PACMOD13_FRONT_OBJECT_DISTANCE_LOW_RES_ro_toS(x) ( (uint32_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_FRONT_OBJECT_DISTANCE_LOW_RES_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @FRONT_OBJECT_DISTANCE_HIGH_RES_ro
#define PACMOD13_FRONT_OBJECT_DISTANCE_HIGH_RES_ro_CovFactor (0.001)
#define PACMOD13_FRONT_OBJECT_DISTANCE_HIGH_RES_ro_toS(x) ( (uint32_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_FRONT_OBJECT_DISTANCE_HIGH_RES_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint32_t FRONT_OBJECT_DISTANCE_LOW_RES_ro;       //      Bits=24 Factor= 0.001           Unit:'m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t FRONT_OBJECT_DISTANCE_LOW_RES_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint32_t FRONT_OBJECT_DISTANCE_HIGH_RES_ro;      //      Bits=24 Factor= 0.001           Unit:'m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t FRONT_OBJECT_DISTANCE_HIGH_RES_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint32_t FRONT_OBJECT_DISTANCE_LOW_RES_ro;       //      Bits=24 Factor= 0.001           Unit:'m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t FRONT_OBJECT_DISTANCE_LOW_RES_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint32_t FRONT_OBJECT_DISTANCE_HIGH_RES_ro;      //      Bits=24 Factor= 0.001           Unit:'m'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t FRONT_OBJECT_DISTANCE_HIGH_RES_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} DETECTED_OBJECT_RPT_t;

// def @FIRE_SUPPRESSION_RPT CAN Message (1042 0x412)
#define FIRE_SUPPRESSION_RPT_IDE (0U)
#define FIRE_SUPPRESSION_RPT_DLC (1U)
#define FIRE_SUPPRESSION_RPT_CANID (0x412)
#define FIRE_SUPPRESSION_RPT_CYC (100U)

// Value tables for @FIRE_SUPPRESSION_ALARM_STATUS signal

#ifndef FIRE_SUPPRESSION_ALARM_STATUS_FIRE_SUPPRESSION_RPT_NOT_ALARMING
#define FIRE_SUPPRESSION_ALARM_STATUS_FIRE_SUPPRESSION_RPT_NOT_ALARMING (0)
#endif

#ifndef FIRE_SUPPRESSION_ALARM_STATUS_FIRE_SUPPRESSION_RPT_ALARMING
#define FIRE_SUPPRESSION_ALARM_STATUS_FIRE_SUPPRESSION_RPT_ALARMING (1)
#endif

#ifndef FIRE_SUPPRESSION_ALARM_STATUS_FIRE_SUPPRESSION_RPT_ERROR
#define FIRE_SUPPRESSION_ALARM_STATUS_FIRE_SUPPRESSION_RPT_ERROR (14)
#endif

#ifndef FIRE_SUPPRESSION_ALARM_STATUS_FIRE_SUPPRESSION_RPT_NOT_AVAIL
#define FIRE_SUPPRESSION_ALARM_STATUS_FIRE_SUPPRESSION_RPT_NOT_AVAIL (15)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NOT_ALARMING"
  //  1 : "ALARMING"
  //  14 : "ERROR"
  //  15 : "NOT_AVAIL"
  uint8_t FIRE_SUPPRESSION_ALARM_STATUS : 4;   //      Bits= 4

#else

  //  0 : "NOT_ALARMING"
  //  1 : "ALARMING"
  //  14 : "ERROR"
  //  15 : "NOT_AVAIL"
  uint8_t FIRE_SUPPRESSION_ALARM_STATUS;       //      Bits= 4

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} FIRE_SUPPRESSION_RPT_t;

// def @VEH_DYNAMICS_RPT CAN Message (1043 0x413)
#define VEH_DYNAMICS_RPT_IDE (0U)
#define VEH_DYNAMICS_RPT_DLC (1U)
#define VEH_DYNAMICS_RPT_CANID (0x413)
// signal: @VEH_G_FORCES_ro
#define PACMOD13_VEH_G_FORCES_ro_CovFactor (0.001)
#define PACMOD13_VEH_G_FORCES_ro_toS(x) ( (uint8_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_VEH_G_FORCES_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t VEH_G_FORCES_ro;                   //      Bits= 8 Factor= 0.001           Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t VEH_G_FORCES_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint8_t VEH_G_FORCES_ro;                   //      Bits= 8 Factor= 0.001           Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t VEH_G_FORCES_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} VEH_DYNAMICS_RPT_t;

// Not for new development.
// def @VIN_RPT CAN Message (1044 0x414)
#define VIN_RPT_IDE (0U)
#define VIN_RPT_DLC (7U)
#define VIN_RPT_CANID (0x414)
#define VIN_RPT_CYC (1000U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint32_t VEH_MFG_CODE;                     //      Bits=24

  uint8_t VEH_MY_CODE;                       //      Bits= 8

  uint32_t VEH_SERIAL;                       //      Bits=24

#else

  uint32_t VEH_MFG_CODE;                     //      Bits=24

  uint8_t VEH_MY_CODE;                       //      Bits= 8

  uint32_t VEH_SERIAL;                       //      Bits=24

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} VIN_RPT_t;

// def @OCCUPANCY_RPT CAN Message (1045 0x415)
#define OCCUPANCY_RPT_IDE (0U)
#define OCCUPANCY_RPT_DLC (2U)
#define OCCUPANCY_RPT_CANID (0x415)
#define OCCUPANCY_RPT_CYC (250U)

// Value tables for @DRIVER_SEAT_OCCUPIED signal

#ifndef DRIVER_SEAT_OCCUPIED_OCCUPANCY_RPT_NOT_OCCUPIED
#define DRIVER_SEAT_OCCUPIED_OCCUPANCY_RPT_NOT_OCCUPIED (0)
#endif

#ifndef DRIVER_SEAT_OCCUPIED_OCCUPANCY_RPT_OCCUPIED
#define DRIVER_SEAT_OCCUPIED_OCCUPANCY_RPT_OCCUPIED (1)
#endif


// Value tables for @PASS_SEAT_OCCUPIED signal

#ifndef PASS_SEAT_OCCUPIED_OCCUPANCY_RPT_NOT_OCCUPIED
#define PASS_SEAT_OCCUPIED_OCCUPANCY_RPT_NOT_OCCUPIED (0)
#endif

#ifndef PASS_SEAT_OCCUPIED_OCCUPANCY_RPT_OCCUPIED
#define PASS_SEAT_OCCUPIED_OCCUPANCY_RPT_OCCUPIED (1)
#endif


// Value tables for @REAR_SEAT_OCCUPIED signal

#ifndef REAR_SEAT_OCCUPIED_OCCUPANCY_RPT_NOT_OCCUPIED
#define REAR_SEAT_OCCUPIED_OCCUPANCY_RPT_NOT_OCCUPIED (0)
#endif

#ifndef REAR_SEAT_OCCUPIED_OCCUPANCY_RPT_OCCUPIED
#define REAR_SEAT_OCCUPIED_OCCUPANCY_RPT_OCCUPIED (1)
#endif


// Value tables for @DRIVER_SEATBELT_BUCKLED signal

#ifndef DRIVER_SEATBELT_BUCKLED_OCCUPANCY_RPT_NOT_BUCKLED
#define DRIVER_SEATBELT_BUCKLED_OCCUPANCY_RPT_NOT_BUCKLED (0)
#endif

#ifndef DRIVER_SEATBELT_BUCKLED_OCCUPANCY_RPT_BUCKLED
#define DRIVER_SEATBELT_BUCKLED_OCCUPANCY_RPT_BUCKLED (1)
#endif


// Value tables for @PASS_SEATBELT_BUCKLED signal

#ifndef PASS_SEATBELT_BUCKLED_OCCUPANCY_RPT_NOT_BUCKLED
#define PASS_SEATBELT_BUCKLED_OCCUPANCY_RPT_NOT_BUCKLED (0)
#endif

#ifndef PASS_SEATBELT_BUCKLED_OCCUPANCY_RPT_BUCKLED
#define PASS_SEATBELT_BUCKLED_OCCUPANCY_RPT_BUCKLED (1)
#endif


// Value tables for @DRVR_REAR_SEATBELT_BUCKLED signal

#ifndef DRVR_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_NOT_BUCKLED
#define DRVR_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_NOT_BUCKLED (0)
#endif

#ifndef DRVR_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_BUCKLED
#define DRVR_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_BUCKLED (1)
#endif


// Value tables for @PASS_REAR_SEATBELT_BUCKLED signal

#ifndef PASS_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_NOT_BUCKLED
#define PASS_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_NOT_BUCKLED (0)
#endif

#ifndef PASS_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_BUCKLED
#define PASS_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_BUCKLED (1)
#endif


// Value tables for @CTR_REAR_SEATBELT_BUCKLED signal

#ifndef CTR_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_NOT_BUCKLED
#define CTR_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_NOT_BUCKLED (0)
#endif

#ifndef CTR_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_BUCKLED
#define CTR_REAR_SEATBELT_BUCKLED_OCCUPANCY_RPT_BUCKLED (1)
#endif


// Value tables for @DRIVER_SEAT_OCCUPIED_AVAIL signal

#ifndef DRIVER_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE
#define DRIVER_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE (0)
#endif

#ifndef DRIVER_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_AVAILABLE
#define DRIVER_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_AVAILABLE (1)
#endif


// Value tables for @PASS_SEAT_OCCUPIED_AVAIL signal

#ifndef PASS_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE
#define PASS_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE (0)
#endif

#ifndef PASS_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_AVAILABLE
#define PASS_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_AVAILABLE (1)
#endif


// Value tables for @REAR_SEAT_OCCUPIED_AVAIL signal

#ifndef REAR_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE
#define REAR_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE (0)
#endif

#ifndef REAR_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_AVAILABLE
#define REAR_SEAT_OCCUPIED_AVAIL_OCCUPANCY_RPT_AVAILABLE (1)
#endif


// Value tables for @DRIVER_SEATBELT_BUCKLED_AVAIL signal

#ifndef DRIVER_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE
#define DRIVER_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE (0)
#endif

#ifndef DRIVER_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_AVAILABLE
#define DRIVER_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_AVAILABLE (1)
#endif


// Value tables for @PASS_SEATBELT_BUCKLED_AVAIL signal

#ifndef PASS_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE
#define PASS_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE (0)
#endif

#ifndef PASS_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_AVAILABLE
#define PASS_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_AVAILABLE (1)
#endif


// Value tables for @DRVR_REAR_SEATBELT_BUCKLED_AVAIL signal

#ifndef DRVR_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE
#define DRVR_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE (0)
#endif

#ifndef DRVR_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_AVAILABLE
#define DRVR_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_AVAILABLE (1)
#endif


// Value tables for @PASS_REAR_SEATBELT_BUCKLED_AVAIL signal

#ifndef PASS_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE
#define PASS_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE (0)
#endif

#ifndef PASS_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_AVAILABLE
#define PASS_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_AVAILABLE (1)
#endif


// Value tables for @CTR_REAR_SEATBELT_BUCKLED_AVAIL signal

#ifndef CTR_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE
#define CTR_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_NOT_AVAILABLE (0)
#endif

#ifndef CTR_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_AVAILABLE
#define CTR_REAR_SEATBELT_BUCKLED_AVAIL_OCCUPANCY_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NOT_OCCUPIED"
  //  1 : "OCCUPIED"
  uint8_t DRIVER_SEAT_OCCUPIED : 1;               //      Bits= 1

  //  0 : "NOT_OCCUPIED"
  //  1 : "OCCUPIED"
  uint8_t PASS_SEAT_OCCUPIED : 1;                 //      Bits= 1

  //  0 : "NOT_OCCUPIED"
  //  1 : "OCCUPIED"
  uint8_t REAR_SEAT_OCCUPIED : 1;                 //      Bits= 1

  //  0 : "NOT_BUCKLED"
  //  1 : "BUCKLED"
  uint8_t DRIVER_SEATBELT_BUCKLED : 1;            //      Bits= 1

  //  0 : "NOT_BUCKLED"
  //  1 : "BUCKLED"
  uint8_t PASS_SEATBELT_BUCKLED : 1;              //      Bits= 1

  //  0 : "NOT_BUCKLED"
  //  1 : "BUCKLED"
  uint8_t DRVR_REAR_SEATBELT_BUCKLED : 1;         //      Bits= 1

  //  0 : "NOT_BUCKLED"
  //  1 : "BUCKLED"
  uint8_t PASS_REAR_SEATBELT_BUCKLED : 1;         //      Bits= 1

  //  0 : "NOT_BUCKLED"
  //  1 : "BUCKLED"
  uint8_t CTR_REAR_SEATBELT_BUCKLED : 1;          //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRIVER_SEAT_OCCUPIED_AVAIL : 1;         //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PASS_SEAT_OCCUPIED_AVAIL : 1;           //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_SEAT_OCCUPIED_AVAIL : 1;           //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRIVER_SEATBELT_BUCKLED_AVAIL : 1;      //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PASS_SEATBELT_BUCKLED_AVAIL : 1;        //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRVR_REAR_SEATBELT_BUCKLED_AVAIL : 1;   //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PASS_REAR_SEATBELT_BUCKLED_AVAIL : 1;   //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t CTR_REAR_SEATBELT_BUCKLED_AVAIL : 1;    //      Bits= 1

#else

  //  0 : "NOT_OCCUPIED"
  //  1 : "OCCUPIED"
  uint8_t DRIVER_SEAT_OCCUPIED;                   //      Bits= 1

  //  0 : "NOT_OCCUPIED"
  //  1 : "OCCUPIED"
  uint8_t PASS_SEAT_OCCUPIED;                     //      Bits= 1

  //  0 : "NOT_OCCUPIED"
  //  1 : "OCCUPIED"
  uint8_t REAR_SEAT_OCCUPIED;                     //      Bits= 1

  //  0 : "NOT_BUCKLED"
  //  1 : "BUCKLED"
  uint8_t DRIVER_SEATBELT_BUCKLED;                //      Bits= 1

  //  0 : "NOT_BUCKLED"
  //  1 : "BUCKLED"
  uint8_t PASS_SEATBELT_BUCKLED;                  //      Bits= 1

  //  0 : "NOT_BUCKLED"
  //  1 : "BUCKLED"
  uint8_t DRVR_REAR_SEATBELT_BUCKLED;             //      Bits= 1

  //  0 : "NOT_BUCKLED"
  //  1 : "BUCKLED"
  uint8_t PASS_REAR_SEATBELT_BUCKLED;             //      Bits= 1

  //  0 : "NOT_BUCKLED"
  //  1 : "BUCKLED"
  uint8_t CTR_REAR_SEATBELT_BUCKLED;              //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRIVER_SEAT_OCCUPIED_AVAIL;             //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PASS_SEAT_OCCUPIED_AVAIL;               //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_SEAT_OCCUPIED_AVAIL;               //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRIVER_SEATBELT_BUCKLED_AVAIL;          //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PASS_SEATBELT_BUCKLED_AVAIL;            //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRVR_REAR_SEATBELT_BUCKLED_AVAIL;       //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PASS_REAR_SEATBELT_BUCKLED_AVAIL;       //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t CTR_REAR_SEATBELT_BUCKLED_AVAIL;        //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} OCCUPANCY_RPT_t;

// def @INTERIOR_LIGHTS_RPT CAN Message (1046 0x416)
#define INTERIOR_LIGHTS_RPT_IDE (0U)
#define INTERIOR_LIGHTS_RPT_DLC (3U)
#define INTERIOR_LIGHTS_RPT_CANID (0x416)
#define INTERIOR_LIGHTS_RPT_CYC (250U)

// Value tables for @FRONT_DOME_LIGHTS_ON signal

#ifndef FRONT_DOME_LIGHTS_ON_INTERIOR_LIGHTS_RPT_OFF
#define FRONT_DOME_LIGHTS_ON_INTERIOR_LIGHTS_RPT_OFF (0)
#endif

#ifndef FRONT_DOME_LIGHTS_ON_INTERIOR_LIGHTS_RPT_ON
#define FRONT_DOME_LIGHTS_ON_INTERIOR_LIGHTS_RPT_ON (1)
#endif


// Value tables for @REAR_DOME_LIGHTS_ON signal

#ifndef REAR_DOME_LIGHTS_ON_INTERIOR_LIGHTS_RPT_OFF
#define REAR_DOME_LIGHTS_ON_INTERIOR_LIGHTS_RPT_OFF (0)
#endif

#ifndef REAR_DOME_LIGHTS_ON_INTERIOR_LIGHTS_RPT_ON
#define REAR_DOME_LIGHTS_ON_INTERIOR_LIGHTS_RPT_ON (1)
#endif


// Value tables for @MOOD_LIGHTS_ON signal

#ifndef MOOD_LIGHTS_ON_INTERIOR_LIGHTS_RPT_OFF
#define MOOD_LIGHTS_ON_INTERIOR_LIGHTS_RPT_OFF (0)
#endif

#ifndef MOOD_LIGHTS_ON_INTERIOR_LIGHTS_RPT_ON
#define MOOD_LIGHTS_ON_INTERIOR_LIGHTS_RPT_ON (1)
#endif


// Value tables for @AMBIENT_LIGHT_SENSOR signal

#ifndef AMBIENT_LIGHT_SENSOR_INTERIOR_LIGHTS_RPT_DARK
#define AMBIENT_LIGHT_SENSOR_INTERIOR_LIGHTS_RPT_DARK (0)
#endif

#ifndef AMBIENT_LIGHT_SENSOR_INTERIOR_LIGHTS_RPT_BRIGHT
#define AMBIENT_LIGHT_SENSOR_INTERIOR_LIGHTS_RPT_BRIGHT (1)
#endif


// Value tables for @DIM_LEVEL signal

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_23
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_23 (24)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_22
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_22 (23)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_21
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_21 (22)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_20
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_20 (21)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_19
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_19 (20)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_18
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_18 (19)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_17
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_17 (18)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_16
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_16 (17)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_15
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_15 (16)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_14
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_14 (15)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_13
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_13 (14)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_12
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_12 (13)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_MAX
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_MAX (12)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_11
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_11 (11)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_10
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_10 (10)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_9
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_9 (9)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_8
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_8 (8)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_7
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_7 (7)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_6
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_6 (6)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_5
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_5 (5)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_4
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_4 (4)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_3
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_3 (3)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_2
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_2 (2)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_1
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_1 (1)
#endif

#ifndef DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_MIN
#define DIM_LEVEL_INTERIOR_LIGHTS_RPT_DIM_LEVEL_MIN (0)
#endif


// Value tables for @FRONT_DOME_LIGHTS_ON_AVAIL signal

#ifndef FRONT_DOME_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_NOT_AVAILABLE
#define FRONT_DOME_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_NOT_AVAILABLE (0)
#endif

#ifndef FRONT_DOME_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_AVAILABLE
#define FRONT_DOME_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_AVAILABLE (1)
#endif


// Value tables for @REAR_DOME_LIGHTS_ON_AVAIL signal

#ifndef REAR_DOME_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_NOT_AVAILABLE
#define REAR_DOME_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_NOT_AVAILABLE (0)
#endif

#ifndef REAR_DOME_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_AVAILABLE
#define REAR_DOME_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_AVAILABLE (1)
#endif


// Value tables for @MOOD_LIGHTS_ON_AVAIL signal

#ifndef MOOD_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_NOT_AVAILABLE
#define MOOD_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_NOT_AVAILABLE (0)
#endif

#ifndef MOOD_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_AVAILABLE
#define MOOD_LIGHTS_ON_AVAIL_INTERIOR_LIGHTS_RPT_AVAILABLE (1)
#endif


// Value tables for @DIM_LEVEL_AVAIL signal

#ifndef DIM_LEVEL_AVAIL_INTERIOR_LIGHTS_RPT_NOT_AVAILABLE
#define DIM_LEVEL_AVAIL_INTERIOR_LIGHTS_RPT_NOT_AVAILABLE (0)
#endif

#ifndef DIM_LEVEL_AVAIL_INTERIOR_LIGHTS_RPT_AVAILABLE
#define DIM_LEVEL_AVAIL_INTERIOR_LIGHTS_RPT_AVAILABLE (1)
#endif


// Value tables for @AMBIENT_LIGHT_SENSOR_AVAIL signal

#ifndef AMBIENT_LIGHT_SENSOR_AVAIL_INTERIOR_LIGHTS_RPT_NOT_AVAILABLE
#define AMBIENT_LIGHT_SENSOR_AVAIL_INTERIOR_LIGHTS_RPT_NOT_AVAILABLE (0)
#endif

#ifndef AMBIENT_LIGHT_SENSOR_AVAIL_INTERIOR_LIGHTS_RPT_AVAILABLE
#define AMBIENT_LIGHT_SENSOR_AVAIL_INTERIOR_LIGHTS_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t FRONT_DOME_LIGHTS_ON : 1;          //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t REAR_DOME_LIGHTS_ON : 1;           //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MOOD_LIGHTS_ON : 1;                //      Bits= 1

  //  0 : "DARK"
  //  1 : "BRIGHT"
  uint8_t AMBIENT_LIGHT_SENSOR : 1;          //      Bits= 1

  // Lowest dim level assigned to DIM_LEVEL_MIN, the dimmest light. Highest dim level assigned to DIM_LEVEL_MAX, the brightest light. Dim levels in between start with DIM_LEVEL_1.
  //  24 : "DIM_LEVEL_23"
  //  23 : "DIM_LEVEL_22"
  //  22 : "DIM_LEVEL_21"
  //  21 : "DIM_LEVEL_20"
  //  20 : "DIM_LEVEL_19"
  //  19 : "DIM_LEVEL_18"
  //  18 : "DIM_LEVEL_17"
  //  17 : "DIM_LEVEL_16"
  //  16 : "DIM_LEVEL_15"
  //  15 : "DIM_LEVEL_14"
  //  14 : "DIM_LEVEL_13"
  //  13 : "DIM_LEVEL_12"
  //  12 : "DIM_LEVEL_MAX"
  //  11 : "DIM_LEVEL_11"
  //  10 : "DIM_LEVEL_10"
  //  9 : "DIM_LEVEL_9"
  //  8 : "DIM_LEVEL_8"
  //  7 : "DIM_LEVEL_7"
  //  6 : "DIM_LEVEL_6"
  //  5 : "DIM_LEVEL_5"
  //  4 : "DIM_LEVEL_4"
  //  3 : "DIM_LEVEL_3"
  //  2 : "DIM_LEVEL_2"
  //  1 : "DIM_LEVEL_1"
  //  0 : "DIM_LEVEL_MIN"
  uint8_t DIM_LEVEL;                         //      Bits= 8

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FRONT_DOME_LIGHTS_ON_AVAIL : 1;    //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_DOME_LIGHTS_ON_AVAIL : 1;     //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t MOOD_LIGHTS_ON_AVAIL : 1;          //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DIM_LEVEL_AVAIL : 1;               //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t AMBIENT_LIGHT_SENSOR_AVAIL : 1;    //      Bits= 1

#else

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t FRONT_DOME_LIGHTS_ON;              //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t REAR_DOME_LIGHTS_ON;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t MOOD_LIGHTS_ON;                    //      Bits= 1

  //  0 : "DARK"
  //  1 : "BRIGHT"
  uint8_t AMBIENT_LIGHT_SENSOR;              //      Bits= 1

  // Lowest dim level assigned to DIM_LEVEL_MIN, the dimmest light. Highest dim level assigned to DIM_LEVEL_MAX, the brightest light. Dim levels in between start with DIM_LEVEL_1.
  //  24 : "DIM_LEVEL_23"
  //  23 : "DIM_LEVEL_22"
  //  22 : "DIM_LEVEL_21"
  //  21 : "DIM_LEVEL_20"
  //  20 : "DIM_LEVEL_19"
  //  19 : "DIM_LEVEL_18"
  //  18 : "DIM_LEVEL_17"
  //  17 : "DIM_LEVEL_16"
  //  16 : "DIM_LEVEL_15"
  //  15 : "DIM_LEVEL_14"
  //  14 : "DIM_LEVEL_13"
  //  13 : "DIM_LEVEL_12"
  //  12 : "DIM_LEVEL_MAX"
  //  11 : "DIM_LEVEL_11"
  //  10 : "DIM_LEVEL_10"
  //  9 : "DIM_LEVEL_9"
  //  8 : "DIM_LEVEL_8"
  //  7 : "DIM_LEVEL_7"
  //  6 : "DIM_LEVEL_6"
  //  5 : "DIM_LEVEL_5"
  //  4 : "DIM_LEVEL_4"
  //  3 : "DIM_LEVEL_3"
  //  2 : "DIM_LEVEL_2"
  //  1 : "DIM_LEVEL_1"
  //  0 : "DIM_LEVEL_MIN"
  uint8_t DIM_LEVEL;                         //      Bits= 8

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FRONT_DOME_LIGHTS_ON_AVAIL;        //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_DOME_LIGHTS_ON_AVAIL;         //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t MOOD_LIGHTS_ON_AVAIL;              //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DIM_LEVEL_AVAIL;                   //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t AMBIENT_LIGHT_SENSOR_AVAIL;        //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} INTERIOR_LIGHTS_RPT_t;

// def @DOOR_RPT CAN Message (1047 0x417)
#define DOOR_RPT_IDE (0U)
#define DOOR_RPT_DLC (2U)
#define DOOR_RPT_CANID (0x417)
#define DOOR_RPT_CYC (250U)

// Value tables for @DRIVER_DOOR_OPEN signal

#ifndef DRIVER_DOOR_OPEN_DOOR_RPT_CLOSED
#define DRIVER_DOOR_OPEN_DOOR_RPT_CLOSED (0)
#endif

#ifndef DRIVER_DOOR_OPEN_DOOR_RPT_OPEN
#define DRIVER_DOOR_OPEN_DOOR_RPT_OPEN (1)
#endif


// Value tables for @PASS_DOOR_OPEN signal

#ifndef PASS_DOOR_OPEN_DOOR_RPT_CLOSED
#define PASS_DOOR_OPEN_DOOR_RPT_CLOSED (0)
#endif

#ifndef PASS_DOOR_OPEN_DOOR_RPT_OPEN
#define PASS_DOOR_OPEN_DOOR_RPT_OPEN (1)
#endif


// Value tables for @REAR_DRIVER_DOOR_OPEN signal

#ifndef REAR_DRIVER_DOOR_OPEN_DOOR_RPT_CLOSED
#define REAR_DRIVER_DOOR_OPEN_DOOR_RPT_CLOSED (0)
#endif

#ifndef REAR_DRIVER_DOOR_OPEN_DOOR_RPT_OPEN
#define REAR_DRIVER_DOOR_OPEN_DOOR_RPT_OPEN (1)
#endif


// Value tables for @REAR_PASS_DOOR_OPEN signal

#ifndef REAR_PASS_DOOR_OPEN_DOOR_RPT_CLOSED
#define REAR_PASS_DOOR_OPEN_DOOR_RPT_CLOSED (0)
#endif

#ifndef REAR_PASS_DOOR_OPEN_DOOR_RPT_OPEN
#define REAR_PASS_DOOR_OPEN_DOOR_RPT_OPEN (1)
#endif


// Value tables for @HOOD_OPEN signal

#ifndef HOOD_OPEN_DOOR_RPT_CLOSED
#define HOOD_OPEN_DOOR_RPT_CLOSED (0)
#endif

#ifndef HOOD_OPEN_DOOR_RPT_OPEN
#define HOOD_OPEN_DOOR_RPT_OPEN (1)
#endif


// Value tables for @TRUNK_OPEN signal

#ifndef TRUNK_OPEN_DOOR_RPT_CLOSED
#define TRUNK_OPEN_DOOR_RPT_CLOSED (0)
#endif

#ifndef TRUNK_OPEN_DOOR_RPT_OPEN
#define TRUNK_OPEN_DOOR_RPT_OPEN (1)
#endif


// Value tables for @FUEL_DOOR_OPEN signal

#ifndef FUEL_DOOR_OPEN_DOOR_RPT_CLOSED
#define FUEL_DOOR_OPEN_DOOR_RPT_CLOSED (0)
#endif

#ifndef FUEL_DOOR_OPEN_DOOR_RPT_OPEN
#define FUEL_DOOR_OPEN_DOOR_RPT_OPEN (1)
#endif


// Value tables for @CARGO_DOOR_OPEN signal

#ifndef CARGO_DOOR_OPEN_DOOR_RPT_CLOSED
#define CARGO_DOOR_OPEN_DOOR_RPT_CLOSED (0)
#endif

#ifndef CARGO_DOOR_OPEN_DOOR_RPT_OPEN
#define CARGO_DOOR_OPEN_DOOR_RPT_OPEN (1)
#endif


// Value tables for @DRIVER_DOOR_OPEN_AVAIL signal

#ifndef DRIVER_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE
#define DRIVER_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef DRIVER_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE
#define DRIVER_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE (1)
#endif


// Value tables for @PASS_DOOR_OPEN_AVAIL signal

#ifndef PASS_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE
#define PASS_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef PASS_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE
#define PASS_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE (1)
#endif


// Value tables for @REAR_DRIVER_DOOR_OPEN_AVAIL signal

#ifndef REAR_DRIVER_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE
#define REAR_DRIVER_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef REAR_DRIVER_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE
#define REAR_DRIVER_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE (1)
#endif


// Value tables for @REAR_PASS_DOOR_OPEN_AVAIL signal

#ifndef REAR_PASS_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE
#define REAR_PASS_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef REAR_PASS_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE
#define REAR_PASS_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE (1)
#endif


// Value tables for @HOOD_OPEN_AVAIL signal

#ifndef HOOD_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE
#define HOOD_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef HOOD_OPEN_AVAIL_DOOR_RPT_AVAILABLE
#define HOOD_OPEN_AVAIL_DOOR_RPT_AVAILABLE (1)
#endif


// Value tables for @TRUNK_OPEN_AVAIL signal

#ifndef TRUNK_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE
#define TRUNK_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef TRUNK_OPEN_AVAIL_DOOR_RPT_AVAILABLE
#define TRUNK_OPEN_AVAIL_DOOR_RPT_AVAILABLE (1)
#endif


// Value tables for @FUEL_DOOR_OPEN_AVAIL signal

#ifndef FUEL_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE
#define FUEL_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef FUEL_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE
#define FUEL_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE (1)
#endif


// Value tables for @CARGO_DOOR_OPEN_AVAIL signal

#ifndef CARGO_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE
#define CARGO_DOOR_OPEN_AVAIL_DOOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef CARGO_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE
#define CARGO_DOOR_OPEN_AVAIL_DOOR_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t DRIVER_DOOR_OPEN : 1;              //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t PASS_DOOR_OPEN : 1;                //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t REAR_DRIVER_DOOR_OPEN : 1;         //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t REAR_PASS_DOOR_OPEN : 1;           //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t HOOD_OPEN : 1;                     //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t TRUNK_OPEN : 1;                    //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t FUEL_DOOR_OPEN : 1;                //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t CARGO_DOOR_OPEN : 1;               //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRIVER_DOOR_OPEN_AVAIL : 1;        //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PASS_DOOR_OPEN_AVAIL : 1;          //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_DRIVER_DOOR_OPEN_AVAIL : 1;   //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_PASS_DOOR_OPEN_AVAIL : 1;     //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t HOOD_OPEN_AVAIL : 1;               //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TRUNK_OPEN_AVAIL : 1;              //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FUEL_DOOR_OPEN_AVAIL : 1;          //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t CARGO_DOOR_OPEN_AVAIL : 1;         //      Bits= 1

#else

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t DRIVER_DOOR_OPEN;                  //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t PASS_DOOR_OPEN;                    //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t REAR_DRIVER_DOOR_OPEN;             //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t REAR_PASS_DOOR_OPEN;               //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t HOOD_OPEN;                         //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t TRUNK_OPEN;                        //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t FUEL_DOOR_OPEN;                    //      Bits= 1

  //  0 : "CLOSED"
  //  1 : "OPEN"
  uint8_t CARGO_DOOR_OPEN;                   //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRIVER_DOOR_OPEN_AVAIL;            //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PASS_DOOR_OPEN_AVAIL;              //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_DRIVER_DOOR_OPEN_AVAIL;       //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REAR_PASS_DOOR_OPEN_AVAIL;         //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t HOOD_OPEN_AVAIL;                   //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TRUNK_OPEN_AVAIL;                  //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FUEL_DOOR_OPEN_AVAIL;              //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t CARGO_DOOR_OPEN_AVAIL;             //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} DOOR_RPT_t;

// def @REAR_LIGHTS_RPT CAN Message (1048 0x418)
#define REAR_LIGHTS_RPT_IDE (0U)
#define REAR_LIGHTS_RPT_DLC (2U)
#define REAR_LIGHTS_RPT_CANID (0x418)
#define REAR_LIGHTS_RPT_CYC (250U)

// Value tables for @BRAKE_LIGHTS_ON signal

#ifndef BRAKE_LIGHTS_ON_REAR_LIGHTS_RPT_OFF
#define BRAKE_LIGHTS_ON_REAR_LIGHTS_RPT_OFF (0)
#endif

#ifndef BRAKE_LIGHTS_ON_REAR_LIGHTS_RPT_ON
#define BRAKE_LIGHTS_ON_REAR_LIGHTS_RPT_ON (1)
#endif


// Value tables for @REVERSE_LIGHTS_ON signal

#ifndef REVERSE_LIGHTS_ON_REAR_LIGHTS_RPT_OFF
#define REVERSE_LIGHTS_ON_REAR_LIGHTS_RPT_OFF (0)
#endif

#ifndef REVERSE_LIGHTS_ON_REAR_LIGHTS_RPT_ON
#define REVERSE_LIGHTS_ON_REAR_LIGHTS_RPT_ON (1)
#endif


// Value tables for @BRAKE_LIGHTS_ON_AVAIL signal

#ifndef BRAKE_LIGHTS_ON_AVAIL_REAR_LIGHTS_RPT_NOT_AVAILABLE
#define BRAKE_LIGHTS_ON_AVAIL_REAR_LIGHTS_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_LIGHTS_ON_AVAIL_REAR_LIGHTS_RPT_AVAILABLE
#define BRAKE_LIGHTS_ON_AVAIL_REAR_LIGHTS_RPT_AVAILABLE (1)
#endif


// Value tables for @REVERSE_LIGHTS_ON_AVAIL signal

#ifndef REVERSE_LIGHTS_ON_AVAIL_REAR_LIGHTS_RPT_NOT_AVAILABLE
#define REVERSE_LIGHTS_ON_AVAIL_REAR_LIGHTS_RPT_NOT_AVAILABLE (0)
#endif

#ifndef REVERSE_LIGHTS_ON_AVAIL_REAR_LIGHTS_RPT_AVAILABLE
#define REVERSE_LIGHTS_ON_AVAIL_REAR_LIGHTS_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t BRAKE_LIGHTS_ON : 1;               //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t REVERSE_LIGHTS_ON : 1;             //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_LIGHTS_ON_AVAIL : 1;         //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REVERSE_LIGHTS_ON_AVAIL : 1;       //      Bits= 1

#else

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t BRAKE_LIGHTS_ON;                   //      Bits= 1

  //  0 : "OFF"
  //  1 : "ON"
  uint8_t REVERSE_LIGHTS_ON;                 //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_LIGHTS_ON_AVAIL;             //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REVERSE_LIGHTS_ON_AVAIL;           //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} REAR_LIGHTS_RPT_t;

// def @LINEAR_ACCEL_RPT CAN Message (1049 0x419)
#define LINEAR_ACCEL_RPT_IDE (0U)
#define LINEAR_ACCEL_RPT_DLC (7U)
#define LINEAR_ACCEL_RPT_CANID (0x419)

// Value tables for @LATERAL_NEW_DATA_RX signal

#ifndef LATERAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_NOT_RX
#define LATERAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_NOT_RX (0)
#endif

#ifndef LATERAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_RX
#define LATERAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_RX (1)
#endif


// Value tables for @LONGITUDINAL_NEW_DATA_RX signal

#ifndef LONGITUDINAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_NOT_RX
#define LONGITUDINAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_NOT_RX (0)
#endif

#ifndef LONGITUDINAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_RX
#define LONGITUDINAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_RX (1)
#endif


// Value tables for @VERTICAL_NEW_DATA_RX signal

#ifndef VERTICAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_NOT_RX
#define VERTICAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_NOT_RX (0)
#endif

#ifndef VERTICAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_RX
#define VERTICAL_NEW_DATA_RX_LINEAR_ACCEL_RPT_NEW_DATA_RX (1)
#endif


// Value tables for @LATERAL_VALID signal

#ifndef LATERAL_VALID_LINEAR_ACCEL_RPT_NOT_VALID
#define LATERAL_VALID_LINEAR_ACCEL_RPT_NOT_VALID (0)
#endif

#ifndef LATERAL_VALID_LINEAR_ACCEL_RPT_VALID
#define LATERAL_VALID_LINEAR_ACCEL_RPT_VALID (1)
#endif


// Value tables for @LONGITUDINAL_VALID signal

#ifndef LONGITUDINAL_VALID_LINEAR_ACCEL_RPT_NOT_VALID
#define LONGITUDINAL_VALID_LINEAR_ACCEL_RPT_NOT_VALID (0)
#endif

#ifndef LONGITUDINAL_VALID_LINEAR_ACCEL_RPT_VALID
#define LONGITUDINAL_VALID_LINEAR_ACCEL_RPT_VALID (1)
#endif


// Value tables for @VERTICAL_VALID signal

#ifndef VERTICAL_VALID_LINEAR_ACCEL_RPT_NOT_VALID
#define VERTICAL_VALID_LINEAR_ACCEL_RPT_NOT_VALID (0)
#endif

#ifndef VERTICAL_VALID_LINEAR_ACCEL_RPT_VALID
#define VERTICAL_VALID_LINEAR_ACCEL_RPT_VALID (1)
#endif

// signal: @LATERAL_ACCEL_ro
#define PACMOD13_LATERAL_ACCEL_ro_CovFactor (0.01)
#define PACMOD13_LATERAL_ACCEL_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_LATERAL_ACCEL_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )
// signal: @LONGITUDINAL_ACCEL_ro
#define PACMOD13_LONGITUDINAL_ACCEL_ro_CovFactor (0.01)
#define PACMOD13_LONGITUDINAL_ACCEL_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_LONGITUDINAL_ACCEL_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )
// signal: @VERTICAL_ACCEL_ro
#define PACMOD13_VERTICAL_ACCEL_ro_CovFactor (0.01)
#define PACMOD13_VERTICAL_ACCEL_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_VERTICAL_ACCEL_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t LATERAL_NEW_DATA_RX : 1;           //      Bits= 1

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t LONGITUDINAL_NEW_DATA_RX : 1;      //      Bits= 1

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t VERTICAL_NEW_DATA_RX : 1;          //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t LATERAL_VALID : 1;                 //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t LONGITUDINAL_VALID : 1;            //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t VERTICAL_VALID : 1;                //      Bits= 1

  int16_t LATERAL_ACCEL_ro;                  //  [-] Bits=16 Factor= 0.01            Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LATERAL_ACCEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t LONGITUDINAL_ACCEL_ro;             //  [-] Bits=16 Factor= 0.01            Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LONGITUDINAL_ACCEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t VERTICAL_ACCEL_ro;                 //  [-] Bits=16 Factor= 0.01            Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t VERTICAL_ACCEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t LATERAL_NEW_DATA_RX;               //      Bits= 1

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t LONGITUDINAL_NEW_DATA_RX;          //      Bits= 1

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t VERTICAL_NEW_DATA_RX;              //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t LATERAL_VALID;                     //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t LONGITUDINAL_VALID;                //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t VERTICAL_VALID;                    //      Bits= 1

  int16_t LATERAL_ACCEL_ro;                  //  [-] Bits=16 Factor= 0.01            Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LATERAL_ACCEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t LONGITUDINAL_ACCEL_ro;             //  [-] Bits=16 Factor= 0.01            Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t LONGITUDINAL_ACCEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t VERTICAL_ACCEL_ro;                 //  [-] Bits=16 Factor= 0.01            Unit:'m/s^2'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t VERTICAL_ACCEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} LINEAR_ACCEL_RPT_t;

// def @ANG_VEL_RPT CAN Message (1050 0x41a)
#define ANG_VEL_RPT_IDE (0U)
#define ANG_VEL_RPT_DLC (7U)
#define ANG_VEL_RPT_CANID (0x41a)

// Value tables for @PITCH_NEW_DATA_RX signal

#ifndef PITCH_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_NOT_RX
#define PITCH_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_NOT_RX (0)
#endif

#ifndef PITCH_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_RX
#define PITCH_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_RX (1)
#endif


// Value tables for @ROLL_NEW_DATA_RX signal

#ifndef ROLL_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_NOT_RX
#define ROLL_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_NOT_RX (0)
#endif

#ifndef ROLL_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_RX
#define ROLL_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_RX (1)
#endif


// Value tables for @YAW_NEW_DATA_RX signal

#ifndef YAW_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_NOT_RX
#define YAW_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_NOT_RX (0)
#endif

#ifndef YAW_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_RX
#define YAW_NEW_DATA_RX_ANG_VEL_RPT_NEW_DATA_RX (1)
#endif


// Value tables for @PITCH_VALID signal

#ifndef PITCH_VALID_ANG_VEL_RPT_NOT_VALID
#define PITCH_VALID_ANG_VEL_RPT_NOT_VALID (0)
#endif

#ifndef PITCH_VALID_ANG_VEL_RPT_VALID
#define PITCH_VALID_ANG_VEL_RPT_VALID (1)
#endif


// Value tables for @ROLL_VALID signal

#ifndef ROLL_VALID_ANG_VEL_RPT_NOT_VALID
#define ROLL_VALID_ANG_VEL_RPT_NOT_VALID (0)
#endif

#ifndef ROLL_VALID_ANG_VEL_RPT_VALID
#define ROLL_VALID_ANG_VEL_RPT_VALID (1)
#endif


// Value tables for @YAW_VALID signal

#ifndef YAW_VALID_ANG_VEL_RPT_NOT_VALID
#define YAW_VALID_ANG_VEL_RPT_NOT_VALID (0)
#endif

#ifndef YAW_VALID_ANG_VEL_RPT_VALID
#define YAW_VALID_ANG_VEL_RPT_VALID (1)
#endif

// signal: @PITCH_VEL_ro
#define PACMOD13_PITCH_VEL_ro_CovFactor (0.001)
#define PACMOD13_PITCH_VEL_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_PITCH_VEL_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @ROLL_VEL_ro
#define PACMOD13_ROLL_VEL_ro_CovFactor (0.001)
#define PACMOD13_ROLL_VEL_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_ROLL_VEL_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @YAW_VEL_ro
#define PACMOD13_YAW_VEL_ro_CovFactor (0.001)
#define PACMOD13_YAW_VEL_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_YAW_VEL_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t PITCH_NEW_DATA_RX : 1;             //      Bits= 1

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t ROLL_NEW_DATA_RX : 1;              //      Bits= 1

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t YAW_NEW_DATA_RX : 1;               //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t PITCH_VALID : 1;                   //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t ROLL_VALID : 1;                    //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t YAW_VALID : 1;                     //      Bits= 1

  int16_t PITCH_VEL_ro;                      //  [-] Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PITCH_VEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t ROLL_VEL_ro;                       //  [-] Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROLL_VEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t YAW_VEL_ro;                        //  [-] Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t YAW_VEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t PITCH_NEW_DATA_RX;                 //      Bits= 1

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t ROLL_NEW_DATA_RX;                  //      Bits= 1

  //  0 : "NEW_DATA_NOT_RX"
  //  1 : "NEW_DATA_RX"
  uint8_t YAW_NEW_DATA_RX;                   //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t PITCH_VALID;                       //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t ROLL_VALID;                        //      Bits= 1

  //  0 : "NOT_VALID"
  //  1 : "VALID"
  uint8_t YAW_VALID;                         //      Bits= 1

  int16_t PITCH_VEL_ro;                      //  [-] Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PITCH_VEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t ROLL_VEL_ro;                       //  [-] Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t ROLL_VEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t YAW_VEL_ro;                        //  [-] Bits=16 Factor= 0.001           Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t YAW_VEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ANG_VEL_RPT_t;

// def @NOTIFICATION_CMD CAN Message (1051 0x41b)
#define NOTIFICATION_CMD_IDE (0U)
#define NOTIFICATION_CMD_DLC (1U)
#define NOTIFICATION_CMD_CANID (0x41b)
#define NOTIFICATION_CMD_CYC (250U)

// Value tables for @BUZZER_MUTE signal

#ifndef BUZZER_MUTE_NOTIFICATION_CMD_NOT_MUTED
#define BUZZER_MUTE_NOTIFICATION_CMD_NOT_MUTED (0)
#endif

#ifndef BUZZER_MUTE_NOTIFICATION_CMD_MUTED
#define BUZZER_MUTE_NOTIFICATION_CMD_MUTED (1)
#endif


// Value tables for @UNDERDASH_LIGHTS_WHITE signal

#ifndef UNDERDASH_LIGHTS_WHITE_NOTIFICATION_CMD_NO_ACTION
#define UNDERDASH_LIGHTS_WHITE_NOTIFICATION_CMD_NO_ACTION (0)
#endif

#ifndef UNDERDASH_LIGHTS_WHITE_NOTIFICATION_CMD_WHITE
#define UNDERDASH_LIGHTS_WHITE_NOTIFICATION_CMD_WHITE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NOT_MUTED"
  //  1 : "MUTED"
  uint8_t BUZZER_MUTE : 1;                   //      Bits= 1

  //  0 : "NO_ACTION"
  //  1 : "WHITE"
  uint8_t UNDERDASH_LIGHTS_WHITE : 1;        //      Bits= 1

#else

  //  0 : "NOT_MUTED"
  //  1 : "MUTED"
  uint8_t BUZZER_MUTE;                       //      Bits= 1

  //  0 : "NO_ACTION"
  //  1 : "WHITE"
  uint8_t UNDERDASH_LIGHTS_WHITE;            //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} NOTIFICATION_CMD_t;

// def @ESTOP_RPT CAN Message (1052 0x41c)
#define ESTOP_RPT_IDE (0U)
#define ESTOP_RPT_DLC (1U)
#define ESTOP_RPT_CANID (0x41c)

// Value tables for @ESTOP signal

#ifndef ESTOP_ESTOP_RPT_RELEASED
#define ESTOP_ESTOP_RPT_RELEASED (0)
#endif

#ifndef ESTOP_ESTOP_RPT_PRESSED
#define ESTOP_ESTOP_RPT_PRESSED (1)
#endif


// Value tables for @ESTOP_FAULT signal

#ifndef ESTOP_FAULT_ESTOP_RPT_NO_FAULT
#define ESTOP_FAULT_ESTOP_RPT_NO_FAULT (0)
#endif

#ifndef ESTOP_FAULT_ESTOP_RPT_FAULT
#define ESTOP_FAULT_ESTOP_RPT_FAULT (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "RELEASED"
  //  1 : "PRESSED"
  uint8_t ESTOP : 1;                         //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t ESTOP_FAULT : 1;                   //      Bits= 1

#else

  //  0 : "RELEASED"
  //  1 : "PRESSED"
  uint8_t ESTOP;                             //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t ESTOP_FAULT;                       //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ESTOP_RPT_t;

// Commands follow the list of priorities listed in user_can_protocol.md.
// def @USER_NOTIFICATION_CMD CAN Message (1053 0x41d)
#define USER_NOTIFICATION_CMD_IDE (0U)
#define USER_NOTIFICATION_CMD_DLC (3U)
#define USER_NOTIFICATION_CMD_CANID (0x41d)
#define USER_NOTIFICATION_CMD_CYC (250U)

// Value tables for @BUZZER_MUTE signal

#ifndef BUZZER_MUTE_USER_NOTIFICATION_CMD_NOT_MUTED
#define BUZZER_MUTE_USER_NOTIFICATION_CMD_NOT_MUTED (0)
#endif

#ifndef BUZZER_MUTE_USER_NOTIFICATION_CMD_MUTED
#define BUZZER_MUTE_USER_NOTIFICATION_CMD_MUTED (1)
#endif


// Value tables for @LIGHT_COMMAND signal

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_NO_ACTION
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_NO_ACTION (0)
#endif

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_WHITE
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_WHITE (1)
#endif

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_RED
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_RED (2)
#endif

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_GREEN
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_GREEN (3)
#endif

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_BLUE
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_BLUE (4)
#endif

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_PURPLE
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_PURPLE (5)
#endif

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_ORANGE
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_ORANGE (6)
#endif

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_YELLOW
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_YELLOW (7)
#endif

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_TEAL
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_TEAL (8)
#endif

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_PINK
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_PINK (9)
#endif

#ifndef LIGHT_COMMAND_USER_NOTIFICATION_CMD_OFF
#define LIGHT_COMMAND_USER_NOTIFICATION_CMD_OFF (10)
#endif


// Value tables for @BUZZER_ON signal

#ifndef BUZZER_ON_USER_NOTIFICATION_CMD_NO_ACTION
#define BUZZER_ON_USER_NOTIFICATION_CMD_NO_ACTION (0)
#endif

#ifndef BUZZER_ON_USER_NOTIFICATION_CMD_BUZZER_ON
#define BUZZER_ON_USER_NOTIFICATION_CMD_BUZZER_ON (1)
#endif


// Value tables for @BUZZER_MUTE_INDICATOR signal

#ifndef BUZZER_MUTE_INDICATOR_USER_NOTIFICATION_CMD_ENABLED
#define BUZZER_MUTE_INDICATOR_USER_NOTIFICATION_CMD_ENABLED (0)
#endif

#ifndef BUZZER_MUTE_INDICATOR_USER_NOTIFICATION_CMD_DISABLED
#define BUZZER_MUTE_INDICATOR_USER_NOTIFICATION_CMD_DISABLED (1)
#endif


// Value tables for @LED_BRIGHTNESS signal

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_NO_ACTION
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_NO_ACTION (0)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_MIN_BRIGHTNESS
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_MIN_BRIGHTNESS (1)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_1
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_1 (2)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_2
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_2 (3)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_3
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_3 (4)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_4
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_4 (5)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_5
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_5 (6)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_6
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_6 (7)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_7
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_7 (8)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_8
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_8 (9)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_9
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_9 (10)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_10
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_10 (11)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_11
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_LEVEL_11 (12)
#endif

#ifndef LED_BRIGHTNESS_USER_NOTIFICATION_CMD_MAX_BRIGHTNESS
#define LED_BRIGHTNESS_USER_NOTIFICATION_CMD_MAX_BRIGHTNESS (13)
#endif


// Value tables for @LIGHT_STATUS_COMMAND signal

#ifndef LIGHT_STATUS_COMMAND_USER_NOTIFICATION_CMD_NO_ACTION
#define LIGHT_STATUS_COMMAND_USER_NOTIFICATION_CMD_NO_ACTION (0)
#endif

#ifndef LIGHT_STATUS_COMMAND_USER_NOTIFICATION_CMD_NO_BLINK
#define LIGHT_STATUS_COMMAND_USER_NOTIFICATION_CMD_NO_BLINK (1)
#endif

#ifndef LIGHT_STATUS_COMMAND_USER_NOTIFICATION_CMD_BLINK
#define LIGHT_STATUS_COMMAND_USER_NOTIFICATION_CMD_BLINK (2)
#endif

#ifndef LIGHT_STATUS_COMMAND_USER_NOTIFICATION_CMD_ALTERNATE
#define LIGHT_STATUS_COMMAND_USER_NOTIFICATION_CMD_ALTERNATE (3)
#endif


// Value tables for @LIGHT_COMMAND_ALTERNATE signal

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_NO_ACTION
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_NO_ACTION (0)
#endif

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_WHITE
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_WHITE (1)
#endif

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_RED
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_RED (2)
#endif

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_GREEN
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_GREEN (3)
#endif

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_BLUE
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_BLUE (4)
#endif

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_PURPLE
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_PURPLE (5)
#endif

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_ORANGE
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_ORANGE (6)
#endif

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_YELLOW
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_YELLOW (7)
#endif

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_TEAL
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_TEAL (8)
#endif

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_PINK
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_PINK (9)
#endif

#ifndef LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_OFF
#define LIGHT_COMMAND_ALTERNATE_USER_NOTIFICATION_CMD_OFF (10)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NOT_MUTED"
  //  1 : "MUTED"
  uint8_t BUZZER_MUTE : 1;                   //      Bits= 1

  //  0 : "NO_ACTION"
  //  1 : "WHITE"
  //  2 : "RED"
  //  3 : "GREEN"
  //  4 : "BLUE"
  //  5 : "PURPLE"
  //  6 : "ORANGE"
  //  7 : "YELLOW"
  //  8 : "TEAL"
  //  9 : "PINK"
  //  10 : "OFF"
  uint8_t LIGHT_COMMAND : 4;                 //      Bits= 4

  //  0 : "NO_ACTION"
  //  1 : "BUZZER_ON"
  uint8_t BUZZER_ON : 1;                     //      Bits= 1

  //  0 : "ENABLED"
  //  1 : "DISABLED"
  uint8_t BUZZER_MUTE_INDICATOR : 2;         //      Bits= 2

  //  0 : "NO_ACTION"
  //  1 : "MIN_BRIGHTNESS"
  //  2 : "LEVEL_1"
  //  3 : "LEVEL_2"
  //  4 : "LEVEL_3"
  //  5 : "LEVEL_4"
  //  6 : "LEVEL_5"
  //  7 : "LEVEL_6"
  //  8 : "LEVEL_7"
  //  9 : "LEVEL_8"
  //  10 : "LEVEL_9"
  //  11 : "LEVEL_10"
  //  12 : "LEVEL_11"
  //  13 : "MAX_BRIGHTNESS"
  uint8_t LED_BRIGHTNESS : 4;                //      Bits= 4

  //  0 : "NO_ACTION"
  //  1 : "NO_BLINK"
  //  2 : "BLINK"
  //  3 : "ALTERNATE"
  uint8_t LIGHT_STATUS_COMMAND : 2;          //      Bits= 2

  //  0 : "NO_ACTION"
  //  1 : "WHITE"
  //  2 : "RED"
  //  3 : "GREEN"
  //  4 : "BLUE"
  //  5 : "PURPLE"
  //  6 : "ORANGE"
  //  7 : "YELLOW"
  //  8 : "TEAL"
  //  9 : "PINK"
  //  10 : "OFF"
  uint8_t LIGHT_COMMAND_ALTERNATE : 4;       //      Bits= 4

#else

  //  0 : "NOT_MUTED"
  //  1 : "MUTED"
  uint8_t BUZZER_MUTE;                       //      Bits= 1

  //  0 : "NO_ACTION"
  //  1 : "WHITE"
  //  2 : "RED"
  //  3 : "GREEN"
  //  4 : "BLUE"
  //  5 : "PURPLE"
  //  6 : "ORANGE"
  //  7 : "YELLOW"
  //  8 : "TEAL"
  //  9 : "PINK"
  //  10 : "OFF"
  uint8_t LIGHT_COMMAND;                     //      Bits= 4

  //  0 : "NO_ACTION"
  //  1 : "BUZZER_ON"
  uint8_t BUZZER_ON;                         //      Bits= 1

  //  0 : "ENABLED"
  //  1 : "DISABLED"
  uint8_t BUZZER_MUTE_INDICATOR;             //      Bits= 2

  //  0 : "NO_ACTION"
  //  1 : "MIN_BRIGHTNESS"
  //  2 : "LEVEL_1"
  //  3 : "LEVEL_2"
  //  4 : "LEVEL_3"
  //  5 : "LEVEL_4"
  //  6 : "LEVEL_5"
  //  7 : "LEVEL_6"
  //  8 : "LEVEL_7"
  //  9 : "LEVEL_8"
  //  10 : "LEVEL_9"
  //  11 : "LEVEL_10"
  //  12 : "LEVEL_11"
  //  13 : "MAX_BRIGHTNESS"
  uint8_t LED_BRIGHTNESS;                    //      Bits= 4

  //  0 : "NO_ACTION"
  //  1 : "NO_BLINK"
  //  2 : "BLINK"
  //  3 : "ALTERNATE"
  uint8_t LIGHT_STATUS_COMMAND;              //      Bits= 2

  //  0 : "NO_ACTION"
  //  1 : "WHITE"
  //  2 : "RED"
  //  3 : "GREEN"
  //  4 : "BLUE"
  //  5 : "PURPLE"
  //  6 : "ORANGE"
  //  7 : "YELLOW"
  //  8 : "TEAL"
  //  9 : "PINK"
  //  10 : "OFF"
  uint8_t LIGHT_COMMAND_ALTERNATE;           //      Bits= 4

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} USER_NOTIFICATION_CMD_t;

// def @TIRE_PRESSURE_RPT CAN Message (1054 0x41e)
#define TIRE_PRESSURE_RPT_IDE (0U)
#define TIRE_PRESSURE_RPT_DLC (4U)
#define TIRE_PRESSURE_RPT_CANID (0x41e)
#define TIRE_PRESSURE_RPT_CYC (100U)
// signal: @FRONT_LEFT_TIRE_PRESSURE_ro
#define PACMOD13_FRONT_LEFT_TIRE_PRESSURE_ro_CovFactor (4)
#define PACMOD13_FRONT_LEFT_TIRE_PRESSURE_ro_toS(x) ( (uint8_t) ((x) / (4)) )
#define PACMOD13_FRONT_LEFT_TIRE_PRESSURE_ro_fromS(x) ( ((x) * (4)) )
// signal: @FRONT_RIGHT_TIRE_PRESSURE_ro
#define PACMOD13_FRONT_RIGHT_TIRE_PRESSURE_ro_CovFactor (4)
#define PACMOD13_FRONT_RIGHT_TIRE_PRESSURE_ro_toS(x) ( (uint8_t) ((x) / (4)) )
#define PACMOD13_FRONT_RIGHT_TIRE_PRESSURE_ro_fromS(x) ( ((x) * (4)) )
// signal: @REAR_LEFT_TIRE_PRESSURE_ro
#define PACMOD13_REAR_LEFT_TIRE_PRESSURE_ro_CovFactor (4)
#define PACMOD13_REAR_LEFT_TIRE_PRESSURE_ro_toS(x) ( (uint8_t) ((x) / (4)) )
#define PACMOD13_REAR_LEFT_TIRE_PRESSURE_ro_fromS(x) ( ((x) * (4)) )
// signal: @REAR_RIGHT_TIRE_PRESSURE_ro
#define PACMOD13_REAR_RIGHT_TIRE_PRESSURE_ro_CovFactor (4)
#define PACMOD13_REAR_RIGHT_TIRE_PRESSURE_ro_toS(x) ( (uint8_t) ((x) / (4)) )
#define PACMOD13_REAR_RIGHT_TIRE_PRESSURE_ro_fromS(x) ( ((x) * (4)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t FRONT_LEFT_TIRE_PRESSURE_ro;        //      Bits= 8 Factor= 4               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t FRONT_LEFT_TIRE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t FRONT_RIGHT_TIRE_PRESSURE_ro;       //      Bits= 8 Factor= 4               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t FRONT_RIGHT_TIRE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t REAR_LEFT_TIRE_PRESSURE_ro;         //      Bits= 8 Factor= 4               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t REAR_LEFT_TIRE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t REAR_RIGHT_TIRE_PRESSURE_ro;        //      Bits= 8 Factor= 4               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t REAR_RIGHT_TIRE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint8_t FRONT_LEFT_TIRE_PRESSURE_ro;        //      Bits= 8 Factor= 4               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t FRONT_LEFT_TIRE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t FRONT_RIGHT_TIRE_PRESSURE_ro;       //      Bits= 8 Factor= 4               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t FRONT_RIGHT_TIRE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t REAR_LEFT_TIRE_PRESSURE_ro;         //      Bits= 8 Factor= 4               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t REAR_LEFT_TIRE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t REAR_RIGHT_TIRE_PRESSURE_ro;        //      Bits= 8 Factor= 4               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t REAR_RIGHT_TIRE_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIRE_PRESSURE_RPT_t;

// def @DRIVE_TRAIN_FEATURE_RPT CAN Message (1055 0x41f)
#define DRIVE_TRAIN_FEATURE_RPT_IDE (0U)
#define DRIVE_TRAIN_FEATURE_RPT_DLC (2U)
#define DRIVE_TRAIN_FEATURE_RPT_CANID (0x41f)
#define DRIVE_TRAIN_FEATURE_RPT_CYC (100U)

// Value tables for @ANTILOCK_BRAKE_ACTIVE signal

#ifndef ANTILOCK_BRAKE_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_NOT_ACTIVE
#define ANTILOCK_BRAKE_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_NOT_ACTIVE (0)
#endif

#ifndef ANTILOCK_BRAKE_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_ACTIVE
#define ANTILOCK_BRAKE_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_ACTIVE (1)
#endif


// Value tables for @TRACTION_CONTROL_ACTIVE signal

#ifndef TRACTION_CONTROL_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_NOT_ACTIVE
#define TRACTION_CONTROL_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_NOT_ACTIVE (0)
#endif

#ifndef TRACTION_CONTROL_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_ACTIVE
#define TRACTION_CONTROL_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_ACTIVE (1)
#endif


// Value tables for @FOUR_WHEEL_DRIVE_ACTIVE signal

#ifndef FOUR_WHEEL_DRIVE_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_NOT_ACTIVE
#define FOUR_WHEEL_DRIVE_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_NOT_ACTIVE (0)
#endif

#ifndef FOUR_WHEEL_DRIVE_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_ACTIVE
#define FOUR_WHEEL_DRIVE_ACTIVE_DRIVE_TRAIN_FEATURE_RPT_ACTIVE (1)
#endif


// Value tables for @ANTILOCK_BRAKE_DISABLED signal

#ifndef ANTILOCK_BRAKE_DISABLED_DRIVE_TRAIN_FEATURE_RPT_NOT_DISABLED
#define ANTILOCK_BRAKE_DISABLED_DRIVE_TRAIN_FEATURE_RPT_NOT_DISABLED (0)
#endif

#ifndef ANTILOCK_BRAKE_DISABLED_DRIVE_TRAIN_FEATURE_RPT_DISABLED
#define ANTILOCK_BRAKE_DISABLED_DRIVE_TRAIN_FEATURE_RPT_DISABLED (1)
#endif


// Value tables for @ANTILOCK_BRAKE_ACTIVE_AVAIL signal

#ifndef ANTILOCK_BRAKE_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE
#define ANTILOCK_BRAKE_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ANTILOCK_BRAKE_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE
#define ANTILOCK_BRAKE_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE (1)
#endif


// Value tables for @TRACTION_CONTROL_ACTIVE_AVAIL signal

#ifndef TRACTION_CONTROL_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE
#define TRACTION_CONTROL_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef TRACTION_CONTROL_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE
#define TRACTION_CONTROL_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE (1)
#endif


// Value tables for @FOUR_WHEEL_DRIVE_ACTIVE_AVAIL signal

#ifndef FOUR_WHEEL_DRIVE_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE
#define FOUR_WHEEL_DRIVE_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef FOUR_WHEEL_DRIVE_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE
#define FOUR_WHEEL_DRIVE_ACTIVE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE (1)
#endif


// Value tables for @ANTILOCK_BRAKE_DISABLED_AVAIL signal

#ifndef ANTILOCK_BRAKE_DISABLED_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE
#define ANTILOCK_BRAKE_DISABLED_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ANTILOCK_BRAKE_DISABLED_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE
#define ANTILOCK_BRAKE_DISABLED_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE (1)
#endif


// Value tables for @DRIVE_MODE signal

#ifndef DRIVE_MODE_DRIVE_TRAIN_FEATURE_RPT_NORMAL
#define DRIVE_MODE_DRIVE_TRAIN_FEATURE_RPT_NORMAL (0)
#endif

#ifndef DRIVE_MODE_DRIVE_TRAIN_FEATURE_RPT_ECO
#define DRIVE_MODE_DRIVE_TRAIN_FEATURE_RPT_ECO (1)
#endif

#ifndef DRIVE_MODE_DRIVE_TRAIN_FEATURE_RPT_SPORT
#define DRIVE_MODE_DRIVE_TRAIN_FEATURE_RPT_SPORT (2)
#endif


// Value tables for @DRIVE_MODE_AVAIL signal

#ifndef DRIVE_MODE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE
#define DRIVE_MODE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef DRIVE_MODE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE
#define DRIVE_MODE_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE (1)
#endif


// Value tables for @TRACTION_CONTROL_DISABLED signal

#ifndef TRACTION_CONTROL_DISABLED_DRIVE_TRAIN_FEATURE_RPT_NOT_DISABLED
#define TRACTION_CONTROL_DISABLED_DRIVE_TRAIN_FEATURE_RPT_NOT_DISABLED (0)
#endif

#ifndef TRACTION_CONTROL_DISABLED_DRIVE_TRAIN_FEATURE_RPT_DISABLED
#define TRACTION_CONTROL_DISABLED_DRIVE_TRAIN_FEATURE_RPT_DISABLED (1)
#endif


// Value tables for @TRACTION_CONTROL_DISABLED_AVAIL signal

#ifndef TRACTION_CONTROL_DISABLED_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE
#define TRACTION_CONTROL_DISABLED_AVAIL_DRIVE_TRAIN_FEATURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef TRACTION_CONTROL_DISABLED_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE
#define TRACTION_CONTROL_DISABLED_AVAIL_DRIVE_TRAIN_FEATURE_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t ANTILOCK_BRAKE_ACTIVE : 1;             //      Bits= 1

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t TRACTION_CONTROL_ACTIVE : 1;           //      Bits= 1

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t FOUR_WHEEL_DRIVE_ACTIVE : 1;           //      Bits= 1

  //  0 : "NOT_DISABLED"
  //  1 : "DISABLED"
  uint8_t ANTILOCK_BRAKE_DISABLED : 1;           //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ANTILOCK_BRAKE_ACTIVE_AVAIL : 1;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TRACTION_CONTROL_ACTIVE_AVAIL : 1;     //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FOUR_WHEEL_DRIVE_ACTIVE_AVAIL : 1;     //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ANTILOCK_BRAKE_DISABLED_AVAIL : 1;     //      Bits= 1

  //  0 : "NORMAL"
  //  1 : "ECO"
  //  2 : "SPORT"
  uint8_t DRIVE_MODE : 4;                        //      Bits= 4

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRIVE_MODE_AVAIL : 1;                  //      Bits= 1

  //  0 : "NOT_DISABLED"
  //  1 : "DISABLED"
  uint8_t TRACTION_CONTROL_DISABLED : 1;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TRACTION_CONTROL_DISABLED_AVAIL : 1;   //      Bits= 1

#else

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t ANTILOCK_BRAKE_ACTIVE;                 //      Bits= 1

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t TRACTION_CONTROL_ACTIVE;               //      Bits= 1

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  uint8_t FOUR_WHEEL_DRIVE_ACTIVE;               //      Bits= 1

  //  0 : "NOT_DISABLED"
  //  1 : "DISABLED"
  uint8_t ANTILOCK_BRAKE_DISABLED;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ANTILOCK_BRAKE_ACTIVE_AVAIL;           //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TRACTION_CONTROL_ACTIVE_AVAIL;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FOUR_WHEEL_DRIVE_ACTIVE_AVAIL;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ANTILOCK_BRAKE_DISABLED_AVAIL;         //      Bits= 1

  //  0 : "NORMAL"
  //  1 : "ECO"
  //  2 : "SPORT"
  uint8_t DRIVE_MODE;                            //      Bits= 4

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRIVE_MODE_AVAIL;                      //      Bits= 1

  //  0 : "NOT_DISABLED"
  //  1 : "DISABLED"
  uint8_t TRACTION_CONTROL_DISABLED;             //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t TRACTION_CONTROL_DISABLED_AVAIL;       //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} DRIVE_TRAIN_FEATURE_RPT_t;

// def @SAFETY_FUNC_CRITICAL_STOP_RPT CAN Message (1056 0x420)
#define SAFETY_FUNC_CRITICAL_STOP_RPT_IDE (0U)
#define SAFETY_FUNC_CRITICAL_STOP_RPT_DLC (3U)
#define SAFETY_FUNC_CRITICAL_STOP_RPT_CANID (0x420)
#define SAFETY_FUNC_CRITICAL_STOP_RPT_CYC (1000U)

// Value tables for @AUTOMS_MAN_OPCTRL_FAULT signal

#ifndef AUTOMS_MAN_OPCTRL_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define AUTOMS_MAN_OPCTRL_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef AUTOMS_MAN_OPCTRL_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define AUTOMS_MAN_OPCTRL_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @REMOTE_STOP_FAULT signal

#ifndef REMOTE_STOP_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define REMOTE_STOP_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef REMOTE_STOP_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define REMOTE_STOP_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @SAFETY_BRAKE_OPCTRL_OFF signal

#ifndef SAFETY_BRAKE_OPCTRL_OFF_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define SAFETY_BRAKE_OPCTRL_OFF_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef SAFETY_BRAKE_OPCTRL_OFF_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define SAFETY_BRAKE_OPCTRL_OFF_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @SAFETY_BRAKE_CMD_TIMEOUT signal

#ifndef SAFETY_BRAKE_CMD_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define SAFETY_BRAKE_CMD_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef SAFETY_BRAKE_CMD_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define SAFETY_BRAKE_CMD_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @SAFETY_FUNC_CMD_TIMEOUT signal

#ifndef SAFETY_FUNC_CMD_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define SAFETY_FUNC_CMD_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef SAFETY_FUNC_CMD_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define SAFETY_FUNC_CMD_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @SAFETY_FUNC_CRITICAL_STOP_1_CMD signal

#ifndef SAFETY_FUNC_CRITICAL_STOP_1_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define SAFETY_FUNC_CRITICAL_STOP_1_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef SAFETY_FUNC_CRITICAL_STOP_1_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define SAFETY_FUNC_CRITICAL_STOP_1_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @SAFETY_FUNC_CRITICAL_STOP_2_CMD signal

#ifndef SAFETY_FUNC_CRITICAL_STOP_2_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define SAFETY_FUNC_CRITICAL_STOP_2_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef SAFETY_FUNC_CRITICAL_STOP_2_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define SAFETY_FUNC_CRITICAL_STOP_2_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @SAFETY_FUNC_NONE_CMD signal

#ifndef SAFETY_FUNC_NONE_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define SAFETY_FUNC_NONE_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef SAFETY_FUNC_NONE_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define SAFETY_FUNC_NONE_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @PACMOD_SYSTEM_TIMEOUT signal

#ifndef PACMOD_SYSTEM_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define PACMOD_SYSTEM_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef PACMOD_SYSTEM_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define PACMOD_SYSTEM_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @PACMOD_SYSTEM_FAULT signal

#ifndef PACMOD_SYSTEM_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define PACMOD_SYSTEM_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef PACMOD_SYSTEM_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define PACMOD_SYSTEM_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @PACMOD_SYSTEM_NOT_ACTIVE signal

#ifndef PACMOD_SYSTEM_NOT_ACTIVE_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define PACMOD_SYSTEM_NOT_ACTIVE_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef PACMOD_SYSTEM_NOT_ACTIVE_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define PACMOD_SYSTEM_NOT_ACTIVE_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @VEHICLE_REPORT_TIMEOUT signal

#ifndef VEHICLE_REPORT_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define VEHICLE_REPORT_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef VEHICLE_REPORT_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define VEHICLE_REPORT_TIMEOUT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @VEHICLE_REPORT_FAULT signal

#ifndef VEHICLE_REPORT_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define VEHICLE_REPORT_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef VEHICLE_REPORT_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define VEHICLE_REPORT_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @LOW_ENGINE_RPM signal

#ifndef LOW_ENGINE_RPM_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define LOW_ENGINE_RPM_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef LOW_ENGINE_RPM_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define LOW_ENGINE_RPM_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @PRI_SAFETY_BRAKE_SIGNAL_1_FAULT signal

#ifndef PRI_SAFETY_BRAKE_SIGNAL_1_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define PRI_SAFETY_BRAKE_SIGNAL_1_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef PRI_SAFETY_BRAKE_SIGNAL_1_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define PRI_SAFETY_BRAKE_SIGNAL_1_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @PRI_SAFETY_BRAKE_SIGNAL_2_FAULT signal

#ifndef PRI_SAFETY_BRAKE_SIGNAL_2_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define PRI_SAFETY_BRAKE_SIGNAL_2_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef PRI_SAFETY_BRAKE_SIGNAL_2_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define PRI_SAFETY_BRAKE_SIGNAL_2_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @SEC_SAFETY_BRAKE_SIGNAL_1_FAULT signal

#ifndef SEC_SAFETY_BRAKE_SIGNAL_1_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define SEC_SAFETY_BRAKE_SIGNAL_1_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef SEC_SAFETY_BRAKE_SIGNAL_1_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define SEC_SAFETY_BRAKE_SIGNAL_1_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @SEC_SAFETY_BRAKE_SIGNAL_2_FAULT signal

#ifndef SEC_SAFETY_BRAKE_SIGNAL_2_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define SEC_SAFETY_BRAKE_SIGNAL_2_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef SEC_SAFETY_BRAKE_SIGNAL_2_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define SEC_SAFETY_BRAKE_SIGNAL_2_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @PRIMARY_PROCESSOR_FAULT signal

#ifndef PRIMARY_PROCESSOR_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define PRIMARY_PROCESSOR_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef PRIMARY_PROCESSOR_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define PRIMARY_PROCESSOR_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @SECONDARY_PROCESSOR_FAULT signal

#ifndef SECONDARY_PROCESSOR_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define SECONDARY_PROCESSOR_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef SECONDARY_PROCESSOR_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define SECONDARY_PROCESSOR_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @REMOTE_STOP_CMD signal

#ifndef REMOTE_STOP_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define REMOTE_STOP_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef REMOTE_STOP_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define REMOTE_STOP_CMD_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


// Value tables for @PRI_SAFETY_BRAKE_PRESSURE_FAULT signal

#ifndef PRI_SAFETY_BRAKE_PRESSURE_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE
#define PRI_SAFETY_BRAKE_PRESSURE_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_FALSE (0)
#endif

#ifndef PRI_SAFETY_BRAKE_PRESSURE_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE
#define PRI_SAFETY_BRAKE_PRESSURE_FAULT_SAFETY_FUNC_CRITICAL_STOP_RPT_TRUE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t AUTOMS_MAN_OPCTRL_FAULT : 1;           //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t REMOTE_STOP_FAULT : 1;                 //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_BRAKE_OPCTRL_OFF : 1;           //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_BRAKE_CMD_TIMEOUT : 1;          //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_FUNC_CMD_TIMEOUT : 1;           //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_FUNC_CRITICAL_STOP_1_CMD : 1;   //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_FUNC_CRITICAL_STOP_2_CMD : 1;   //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_FUNC_NONE_CMD : 1;              //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SYSTEM_TIMEOUT : 1;             //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SYSTEM_FAULT : 1;               //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SYSTEM_NOT_ACTIVE : 1;          //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t VEHICLE_REPORT_TIMEOUT : 1;            //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t VEHICLE_REPORT_FAULT : 1;              //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t LOW_ENGINE_RPM : 1;                    //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state. It shall be TRUE when the primary microprocessor detects a fault on signal 1.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PRI_SAFETY_BRAKE_SIGNAL_1_FAULT : 1;   //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state. It shall be TRUE when the primary microprocessor detects a fault on signal 2.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PRI_SAFETY_BRAKE_SIGNAL_2_FAULT : 1;   //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state. It shall be TRUE when the secondary microprocessor detects a fault on signal 1.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SEC_SAFETY_BRAKE_SIGNAL_1_FAULT : 1;   //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state. It shall be TRUE when the secondary microprocessor detects a fault on signal 2.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SEC_SAFETY_BRAKE_SIGNAL_2_FAULT : 1;   //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PRIMARY_PROCESSOR_FAULT : 1;           //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SECONDARY_PROCESSOR_FAULT : 1;         //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t REMOTE_STOP_CMD : 1;                   //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state. It shall be TRUE when the primary microprocessor detects disagreement between safety brake command and safety brake response.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PRI_SAFETY_BRAKE_PRESSURE_FAULT : 1;   //      Bits= 1

#else

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t AUTOMS_MAN_OPCTRL_FAULT;               //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t REMOTE_STOP_FAULT;                     //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_BRAKE_OPCTRL_OFF;               //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_BRAKE_CMD_TIMEOUT;              //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_FUNC_CMD_TIMEOUT;               //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_FUNC_CRITICAL_STOP_1_CMD;       //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_FUNC_CRITICAL_STOP_2_CMD;       //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SAFETY_FUNC_NONE_CMD;                  //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SYSTEM_TIMEOUT;                 //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SYSTEM_FAULT;                   //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SYSTEM_NOT_ACTIVE;              //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t VEHICLE_REPORT_TIMEOUT;                //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t VEHICLE_REPORT_FAULT;                  //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t LOW_ENGINE_RPM;                        //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state. It shall be TRUE when the primary microprocessor detects a fault on signal 1.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PRI_SAFETY_BRAKE_SIGNAL_1_FAULT;       //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state. It shall be TRUE when the primary microprocessor detects a fault on signal 2.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PRI_SAFETY_BRAKE_SIGNAL_2_FAULT;       //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state. It shall be TRUE when the secondary microprocessor detects a fault on signal 1.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SEC_SAFETY_BRAKE_SIGNAL_1_FAULT;       //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state. It shall be TRUE when the secondary microprocessor detects a fault on signal 2.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SEC_SAFETY_BRAKE_SIGNAL_2_FAULT;       //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PRIMARY_PROCESSOR_FAULT;               //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SECONDARY_PROCESSOR_FAULT;             //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t REMOTE_STOP_CMD;                       //      Bits= 1

  // This value shall latch while the safety function is in the critical stop state. It shall be TRUE when the primary microprocessor detects disagreement between safety brake command and safety brake response.
  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PRI_SAFETY_BRAKE_PRESSURE_FAULT;       //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SAFETY_FUNC_CRITICAL_STOP_RPT_t;

// def @WATCHDOG_RPT_2 CAN Message (1057 0x421)
#define WATCHDOG_RPT_2_IDE (0U)
#define WATCHDOG_RPT_2_DLC (7U)
#define WATCHDOG_RPT_2_CANID (0x421)
#define WATCHDOG_RPT_2_CYC (1000U)

// Value tables for @ACCEL_RPT_TIMEOUT signal

#ifndef ACCEL_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define ACCEL_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef ACCEL_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define ACCEL_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @BRAKE_RPT_TIMEOUT signal

#ifndef BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @BRAKE_DECEL_RPT_TIMEOUT signal

#ifndef BRAKE_DECEL_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define BRAKE_DECEL_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef BRAKE_DECEL_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define BRAKE_DECEL_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @CABIN_CLIMATE_RPT_TIMEOUT signal

#ifndef CABIN_CLIMATE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define CABIN_CLIMATE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef CABIN_CLIMATE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define CABIN_CLIMATE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @CABIN_FAN_SPEED_RPT_TIMEOUT signal

#ifndef CABIN_FAN_SPEED_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define CABIN_FAN_SPEED_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef CABIN_FAN_SPEED_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define CABIN_FAN_SPEED_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @CABIN_TEMP_RPT_TIMEOUT signal

#ifndef CABIN_TEMP_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define CABIN_TEMP_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef CABIN_TEMP_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define CABIN_TEMP_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @CRUISE_CONTROL_RPT_TIMEOUT signal

#ifndef CRUISE_CONTROL_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define CRUISE_CONTROL_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef CRUISE_CONTROL_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define CRUISE_CONTROL_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @DASH_LEFT_RPT_TIMEOUT signal

#ifndef DASH_LEFT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define DASH_LEFT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef DASH_LEFT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define DASH_LEFT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @DASH_RIGHT_RPT_TIMEOUT signal

#ifndef DASH_RIGHT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define DASH_RIGHT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef DASH_RIGHT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define DASH_RIGHT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @ENGINE_BRAKE_RPT_TIMEOUT signal

#ifndef ENGINE_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define ENGINE_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef ENGINE_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define ENGINE_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @HAZARD_LIGHTS_RPT_TIMEOUT signal

#ifndef HAZARD_LIGHTS_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define HAZARD_LIGHTS_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef HAZARD_LIGHTS_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define HAZARD_LIGHTS_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @HEADLIGHT_RPT_TIMEOUT signal

#ifndef HEADLIGHT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define HEADLIGHT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef HEADLIGHT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define HEADLIGHT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @HORN_RPT_TIMEOUT signal

#ifndef HORN_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define HORN_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef HORN_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define HORN_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @MARKER_LAMP_RPT_TIMEOUT signal

#ifndef MARKER_LAMP_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define MARKER_LAMP_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef MARKER_LAMP_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define MARKER_LAMP_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @MEDIA_CONTROLS_RPT_TIMEOUT signal

#ifndef MEDIA_CONTROLS_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define MEDIA_CONTROLS_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef MEDIA_CONTROLS_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define MEDIA_CONTROLS_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PARKING_BRAKE_RPT_TIMEOUT signal

#ifndef PARKING_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define PARKING_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PARKING_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define PARKING_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @REAR_PASS_DOOR_RPT_TIMEOUT signal

#ifndef REAR_PASS_DOOR_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define REAR_PASS_DOOR_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef REAR_PASS_DOOR_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define REAR_PASS_DOOR_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @SHIFT_RPT_TIMEOUT signal

#ifndef SHIFT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define SHIFT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef SHIFT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define SHIFT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @SPRAYER_RPT_TIMEOUT signal

#ifndef SPRAYER_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define SPRAYER_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef SPRAYER_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define SPRAYER_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @STEERING_RPT_TIMEOUT signal

#ifndef STEERING_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define STEERING_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef STEERING_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define STEERING_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @TURN_RPT_TIMEOUT signal

#ifndef TURN_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define TURN_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef TURN_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define TURN_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @WIPER_RPT_TIMEOUT signal

#ifndef WIPER_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define WIPER_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef WIPER_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define WIPER_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMOD1_SANITY_FAULT signal

#ifndef PACMOD1_SANITY_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMOD1_SANITY_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMOD1_SANITY_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMOD1_SANITY_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMOD2_SANITY_FAULT signal

#ifndef PACMOD2_SANITY_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMOD2_SANITY_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMOD2_SANITY_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMOD2_SANITY_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMOD3_SANITY_FAULT signal

#ifndef PACMOD3_SANITY_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMOD3_SANITY_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMOD3_SANITY_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMOD3_SANITY_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMINI1_SANITY_FAULT signal

#ifndef PACMINI1_SANITY_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMINI1_SANITY_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMINI1_SANITY_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMINI1_SANITY_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMINI2_SANITY_FAULT signal

#ifndef PACMINI2_SANITY_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMINI2_SANITY_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMINI2_SANITY_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMINI2_SANITY_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMINI3_SANITY_FAULT signal

#ifndef PACMINI3_SANITY_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMINI3_SANITY_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMINI3_SANITY_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMINI3_SANITY_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMOD1_COMPONENT_RPT_TIMEOUT signal

#ifndef PACMOD1_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define PACMOD1_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMOD1_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define PACMOD1_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMOD2_COMPONENT_RPT_TIMEOUT signal

#ifndef PACMOD2_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define PACMOD2_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMOD2_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define PACMOD2_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMOD3_COMPONENT_RPT_TIMEOUT signal

#ifndef PACMOD3_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define PACMOD3_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMOD3_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define PACMOD3_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMINI1_COMPONENT_RPT_TIMEOUT signal

#ifndef PACMINI1_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define PACMINI1_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMINI1_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define PACMINI1_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMINI2_COMPONENT_RPT_TIMEOUT signal

#ifndef PACMINI2_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define PACMINI2_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMINI2_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define PACMINI2_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMINI3_COMPONENT_RPT_TIMEOUT signal

#ifndef PACMINI3_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define PACMINI3_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMINI3_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define PACMINI3_COMPONENT_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMOD1_SYSTEM_PRESENT_FAULT signal

#ifndef PACMOD1_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMOD1_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMOD1_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMOD1_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMOD2_SYSTEM_PRESENT_FAULT signal

#ifndef PACMOD2_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMOD2_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMOD2_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMOD2_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMOD3_SYSTEM_PRESENT_FAULT signal

#ifndef PACMOD3_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMOD3_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMOD3_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMOD3_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMINI1_SYSTEM_PRESENT_FAULT signal

#ifndef PACMINI1_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMINI1_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMINI1_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMINI1_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMINI2_SYSTEM_PRESENT_FAULT signal

#ifndef PACMINI2_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMINI2_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMINI2_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMINI2_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @PACMINI3_SYSTEM_PRESENT_FAULT signal

#ifndef PACMINI3_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE
#define PACMINI3_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef PACMINI3_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE
#define PACMINI3_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @DRIVE_MODE_INVALID signal

#ifndef DRIVE_MODE_INVALID_WATCHDOG_RPT_2_FALSE
#define DRIVE_MODE_INVALID_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef DRIVE_MODE_INVALID_WATCHDOG_RPT_2_TRUE
#define DRIVE_MODE_INVALID_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @GLOBAL_CMD_SANITY_FAULT signal

#ifndef GLOBAL_CMD_SANITY_FAULT_WATCHDOG_RPT_2_FALSE
#define GLOBAL_CMD_SANITY_FAULT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef GLOBAL_CMD_SANITY_FAULT_WATCHDOG_RPT_2_TRUE
#define GLOBAL_CMD_SANITY_FAULT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @GLOBAL_CMD_TIMEOUT signal

#ifndef GLOBAL_CMD_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define GLOBAL_CMD_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef GLOBAL_CMD_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define GLOBAL_CMD_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @EXHAUST_BRAKE_RPT_TIMEOUT signal

#ifndef EXHAUST_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define EXHAUST_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef EXHAUST_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define EXHAUST_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @POWER_TAKE_OFF_RPT_TIMEOUT signal

#ifndef POWER_TAKE_OFF_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define POWER_TAKE_OFF_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef POWER_TAKE_OFF_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define POWER_TAKE_OFF_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @TIPPER_BODY_00_RPT_TIMEOUT signal

#ifndef TIPPER_BODY_00_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define TIPPER_BODY_00_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef TIPPER_BODY_00_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define TIPPER_BODY_00_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @TRAILER_AIR_SUPPLY_RPT_TIMEOUT signal

#ifndef TRAILER_AIR_SUPPLY_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define TRAILER_AIR_SUPPLY_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef TRAILER_AIR_SUPPLY_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define TRAILER_AIR_SUPPLY_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @TRAILER_BRAKE_RPT_TIMEOUT signal

#ifndef TRAILER_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define TRAILER_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef TRAILER_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define TRAILER_BRAKE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @ENGINE_RPT_TIMEOUT signal

#ifndef ENGINE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define ENGINE_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef ENGINE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define ENGINE_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @TIPPER_BODY_01_RPT_TIMEOUT signal

#ifndef TIPPER_BODY_01_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define TIPPER_BODY_01_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef TIPPER_BODY_01_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define TIPPER_BODY_01_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @TIPPER_BODY_02_RPT_TIMEOUT signal

#ifndef TIPPER_BODY_02_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define TIPPER_BODY_02_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef TIPPER_BODY_02_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define TIPPER_BODY_02_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


// Value tables for @DIFFERENTIAL_LOCKS_RPT_TIMEOUT signal

#ifndef DIFFERENTIAL_LOCKS_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE
#define DIFFERENTIAL_LOCKS_RPT_TIMEOUT_WATCHDOG_RPT_2_FALSE (0)
#endif

#ifndef DIFFERENTIAL_LOCKS_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE
#define DIFFERENTIAL_LOCKS_RPT_TIMEOUT_WATCHDOG_RPT_2_TRUE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_RPT_TIMEOUT : 1;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_RPT_TIMEOUT : 1;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_DECEL_RPT_TIMEOUT : 1;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CABIN_CLIMATE_RPT_TIMEOUT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CABIN_FAN_SPEED_RPT_TIMEOUT : 1;      //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CABIN_TEMP_RPT_TIMEOUT : 1;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CRUISE_CONTROL_RPT_TIMEOUT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DASH_LEFT_RPT_TIMEOUT : 1;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DASH_RIGHT_RPT_TIMEOUT : 1;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENGINE_BRAKE_RPT_TIMEOUT : 1;         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t HAZARD_LIGHTS_RPT_TIMEOUT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t HEADLIGHT_RPT_TIMEOUT : 1;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t HORN_RPT_TIMEOUT : 1;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t MARKER_LAMP_RPT_TIMEOUT : 1;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t MEDIA_CONTROLS_RPT_TIMEOUT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PARKING_BRAKE_RPT_TIMEOUT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t REAR_PASS_DOOR_RPT_TIMEOUT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_RPT_TIMEOUT : 1;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SPRAYER_RPT_TIMEOUT : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEERING_RPT_TIMEOUT : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TURN_RPT_TIMEOUT : 1;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t WIPER_RPT_TIMEOUT : 1;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_SANITY_FAULT : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_SANITY_FAULT : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_SANITY_FAULT : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_SANITY_FAULT : 1;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_SANITY_FAULT : 1;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_SANITY_FAULT : 1;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_COMPONENT_RPT_TIMEOUT : 1;    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_COMPONENT_RPT_TIMEOUT : 1;    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_COMPONENT_RPT_TIMEOUT : 1;    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_COMPONENT_RPT_TIMEOUT : 1;   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_COMPONENT_RPT_TIMEOUT : 1;   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_COMPONENT_RPT_TIMEOUT : 1;   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_SYSTEM_PRESENT_FAULT : 1;     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_SYSTEM_PRESENT_FAULT : 1;     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_SYSTEM_PRESENT_FAULT : 1;     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_SYSTEM_PRESENT_FAULT : 1;    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_SYSTEM_PRESENT_FAULT : 1;    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_SYSTEM_PRESENT_FAULT : 1;    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DRIVE_MODE_INVALID : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_CMD_SANITY_FAULT : 1;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_CMD_TIMEOUT : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t EXHAUST_BRAKE_RPT_TIMEOUT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t POWER_TAKE_OFF_RPT_TIMEOUT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TIPPER_BODY_00_RPT_TIMEOUT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TRAILER_AIR_SUPPLY_RPT_TIMEOUT : 1;   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TRAILER_BRAKE_RPT_TIMEOUT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENGINE_RPT_TIMEOUT : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TIPPER_BODY_01_RPT_TIMEOUT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TIPPER_BODY_02_RPT_TIMEOUT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DIFFERENTIAL_LOCKS_RPT_TIMEOUT : 1;   //      Bits= 1

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_RPT_TIMEOUT;                    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_RPT_TIMEOUT;                    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_DECEL_RPT_TIMEOUT;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CABIN_CLIMATE_RPT_TIMEOUT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CABIN_FAN_SPEED_RPT_TIMEOUT;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CABIN_TEMP_RPT_TIMEOUT;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t CRUISE_CONTROL_RPT_TIMEOUT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DASH_LEFT_RPT_TIMEOUT;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DASH_RIGHT_RPT_TIMEOUT;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENGINE_BRAKE_RPT_TIMEOUT;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t HAZARD_LIGHTS_RPT_TIMEOUT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t HEADLIGHT_RPT_TIMEOUT;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t HORN_RPT_TIMEOUT;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t MARKER_LAMP_RPT_TIMEOUT;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t MEDIA_CONTROLS_RPT_TIMEOUT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PARKING_BRAKE_RPT_TIMEOUT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t REAR_PASS_DOOR_RPT_TIMEOUT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_RPT_TIMEOUT;                    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SPRAYER_RPT_TIMEOUT;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEERING_RPT_TIMEOUT;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TURN_RPT_TIMEOUT;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t WIPER_RPT_TIMEOUT;                    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_SANITY_FAULT;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_SANITY_FAULT;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_SANITY_FAULT;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_SANITY_FAULT;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_SANITY_FAULT;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_SANITY_FAULT;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_COMPONENT_RPT_TIMEOUT;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_COMPONENT_RPT_TIMEOUT;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_COMPONENT_RPT_TIMEOUT;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_COMPONENT_RPT_TIMEOUT;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_COMPONENT_RPT_TIMEOUT;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_COMPONENT_RPT_TIMEOUT;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_SYSTEM_PRESENT_FAULT;         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_SYSTEM_PRESENT_FAULT;         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_SYSTEM_PRESENT_FAULT;         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_SYSTEM_PRESENT_FAULT;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_SYSTEM_PRESENT_FAULT;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_SYSTEM_PRESENT_FAULT;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DRIVE_MODE_INVALID;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_CMD_SANITY_FAULT;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_CMD_TIMEOUT;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t EXHAUST_BRAKE_RPT_TIMEOUT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t POWER_TAKE_OFF_RPT_TIMEOUT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TIPPER_BODY_00_RPT_TIMEOUT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TRAILER_AIR_SUPPLY_RPT_TIMEOUT;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TRAILER_BRAKE_RPT_TIMEOUT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ENGINE_RPT_TIMEOUT;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TIPPER_BODY_01_RPT_TIMEOUT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t TIPPER_BODY_02_RPT_TIMEOUT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t DIFFERENTIAL_LOCKS_RPT_TIMEOUT;       //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} WATCHDOG_RPT_2_t;

// def @VIN_RPT_2 CAN Message (1058 0x422)
#define VIN_RPT_2_IDE (0U)
#define VIN_RPT_2_DLC (8U)
#define VIN_RPT_2_CANID (0x422)
#define VIN_RPT_2_CYC (1000U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t VEHICLE_IDENTIFIER_SECTION_10;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_11;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_12;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_13;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_14;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_15;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_16;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_17;       //      Bits= 8 Unit:'ASCII'

#else

  uint8_t VEHICLE_IDENTIFIER_SECTION_10;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_11;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_12;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_13;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_14;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_15;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_16;       //      Bits= 8 Unit:'ASCII'

  uint8_t VEHICLE_IDENTIFIER_SECTION_17;       //      Bits= 8 Unit:'ASCII'

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} VIN_RPT_2_t;

// def @NOTIFICATION_RPT CAN Message (1059 0x423)
#define NOTIFICATION_RPT_IDE (0U)
#define NOTIFICATION_RPT_DLC (1U)
#define NOTIFICATION_RPT_CANID (0x423)
#define NOTIFICATION_RPT_CYC (250U)

// Value tables for @BUZZER_STATUS signal

#ifndef BUZZER_STATUS_NOTIFICATION_RPT_OFF
#define BUZZER_STATUS_NOTIFICATION_RPT_OFF (0)
#endif

#ifndef BUZZER_STATUS_NOTIFICATION_RPT_ON
#define BUZZER_STATUS_NOTIFICATION_RPT_ON (1)
#endif

#ifndef BUZZER_STATUS_NOTIFICATION_RPT_MUTED
#define BUZZER_STATUS_NOTIFICATION_RPT_MUTED (2)
#endif


// Value tables for @LIGHT_STATUS signal

#ifndef LIGHT_STATUS_NOTIFICATION_RPT_NO_BLINK
#define LIGHT_STATUS_NOTIFICATION_RPT_NO_BLINK (0)
#endif

#ifndef LIGHT_STATUS_NOTIFICATION_RPT_BLINK
#define LIGHT_STATUS_NOTIFICATION_RPT_BLINK (1)
#endif


// Value tables for @LIGHT_COLOR signal

#ifndef LIGHT_COLOR_NOTIFICATION_RPT_WHITE
#define LIGHT_COLOR_NOTIFICATION_RPT_WHITE (1)
#endif

#ifndef LIGHT_COLOR_NOTIFICATION_RPT_RED
#define LIGHT_COLOR_NOTIFICATION_RPT_RED (2)
#endif

#ifndef LIGHT_COLOR_NOTIFICATION_RPT_GREEN
#define LIGHT_COLOR_NOTIFICATION_RPT_GREEN (3)
#endif

#ifndef LIGHT_COLOR_NOTIFICATION_RPT_BLUE
#define LIGHT_COLOR_NOTIFICATION_RPT_BLUE (4)
#endif

#ifndef LIGHT_COLOR_NOTIFICATION_RPT_PURPLE
#define LIGHT_COLOR_NOTIFICATION_RPT_PURPLE (5)
#endif

#ifndef LIGHT_COLOR_NOTIFICATION_RPT_ORANGE
#define LIGHT_COLOR_NOTIFICATION_RPT_ORANGE (6)
#endif

#ifndef LIGHT_COLOR_NOTIFICATION_RPT_YELLOW
#define LIGHT_COLOR_NOTIFICATION_RPT_YELLOW (7)
#endif

#ifndef LIGHT_COLOR_NOTIFICATION_RPT_TEAL
#define LIGHT_COLOR_NOTIFICATION_RPT_TEAL (8)
#endif

#ifndef LIGHT_COLOR_NOTIFICATION_RPT_PINK
#define LIGHT_COLOR_NOTIFICATION_RPT_PINK (9)
#endif

#ifndef LIGHT_COLOR_NOTIFICATION_RPT_OFF
#define LIGHT_COLOR_NOTIFICATION_RPT_OFF (10)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "OFF"
  //  1 : "ON"
  //  2 : "MUTED"
  uint8_t BUZZER_STATUS : 2;                 //      Bits= 2

  //  0 : "NO_BLINK"
  //  1 : "BLINK"
  uint8_t LIGHT_STATUS : 2;                  //      Bits= 2

  //  1 : "WHITE"
  //  2 : "RED"
  //  3 : "GREEN"
  //  4 : "BLUE"
  //  5 : "PURPLE"
  //  6 : "ORANGE"
  //  7 : "YELLOW"
  //  8 : "TEAL"
  //  9 : "PINK"
  //  10 : "OFF"
  uint8_t LIGHT_COLOR : 4;                   //      Bits= 4

#else

  //  0 : "OFF"
  //  1 : "ON"
  //  2 : "MUTED"
  uint8_t BUZZER_STATUS;                     //      Bits= 2

  //  0 : "NO_BLINK"
  //  1 : "BLINK"
  uint8_t LIGHT_STATUS;                      //      Bits= 2

  //  1 : "WHITE"
  //  2 : "RED"
  //  3 : "GREEN"
  //  4 : "BLUE"
  //  5 : "PURPLE"
  //  6 : "ORANGE"
  //  7 : "YELLOW"
  //  8 : "TEAL"
  //  9 : "PINK"
  //  10 : "OFF"
  uint8_t LIGHT_COLOR;                       //      Bits= 4

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} NOTIFICATION_RPT_t;

// def @AIR_PRESSURE_RPT CAN Message (1060 0x424)
#define AIR_PRESSURE_RPT_IDE (0U)
#define AIR_PRESSURE_RPT_DLC (7U)
#define AIR_PRESSURE_RPT_CANID (0x424)
#define AIR_PRESSURE_RPT_CYC (1000U)
// signal: @PNEUMATIC_SUPPLY_PRESSURE_ro
#define PACMOD13_PNEUMATIC_SUPPLY_PRESSURE_ro_CovFactor (8)
#define PACMOD13_PNEUMATIC_SUPPLY_PRESSURE_ro_toS(x) ( (uint8_t) ((x) / (8)) )
#define PACMOD13_PNEUMATIC_SUPPLY_PRESSURE_ro_fromS(x) ( ((x) * (8)) )
// signal: @BRAKE_CIRCUIT_1_PRESSURE_ro
#define PACMOD13_BRAKE_CIRCUIT_1_PRESSURE_ro_CovFactor (8)
#define PACMOD13_BRAKE_CIRCUIT_1_PRESSURE_ro_toS(x) ( (uint8_t) ((x) / (8)) )
#define PACMOD13_BRAKE_CIRCUIT_1_PRESSURE_ro_fromS(x) ( ((x) * (8)) )
// signal: @BRAKE_CIRCUIT_2_PRESSURE_ro
#define PACMOD13_BRAKE_CIRCUIT_2_PRESSURE_ro_CovFactor (8)
#define PACMOD13_BRAKE_CIRCUIT_2_PRESSURE_ro_toS(x) ( (uint8_t) ((x) / (8)) )
#define PACMOD13_BRAKE_CIRCUIT_2_PRESSURE_ro_fromS(x) ( ((x) * (8)) )
// signal: @PARK_TRAILER_AIR_PRESSURE_ro
#define PACMOD13_PARK_TRAILER_AIR_PRESSURE_ro_CovFactor (8)
#define PACMOD13_PARK_TRAILER_AIR_PRESSURE_ro_toS(x) ( (uint8_t) ((x) / (8)) )
#define PACMOD13_PARK_TRAILER_AIR_PRESSURE_ro_fromS(x) ( ((x) * (8)) )
// signal: @POWERTRAIN_AIR_PRESSURE_ro
#define PACMOD13_POWERTRAIN_AIR_PRESSURE_ro_CovFactor (8)
#define PACMOD13_POWERTRAIN_AIR_PRESSURE_ro_toS(x) ( (uint8_t) ((x) / (8)) )
#define PACMOD13_POWERTRAIN_AIR_PRESSURE_ro_fromS(x) ( ((x) * (8)) )

// Value tables for @AIR_COMPRESSOR_STATUS signal

#ifndef AIR_COMPRESSOR_STATUS_AIR_PRESSURE_RPT_NOT_ACTIVE
#define AIR_COMPRESSOR_STATUS_AIR_PRESSURE_RPT_NOT_ACTIVE (0)
#endif

#ifndef AIR_COMPRESSOR_STATUS_AIR_PRESSURE_RPT_ACTIVE
#define AIR_COMPRESSOR_STATUS_AIR_PRESSURE_RPT_ACTIVE (1)
#endif

#ifndef AIR_COMPRESSOR_STATUS_AIR_PRESSURE_RPT_ERROR
#define AIR_COMPRESSOR_STATUS_AIR_PRESSURE_RPT_ERROR (2)
#endif


// Value tables for @PNEUMATIC_SUPPLY_PRESSURE_AVAIL signal

#ifndef PNEUMATIC_SUPPLY_PRESSURE_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE
#define PNEUMATIC_SUPPLY_PRESSURE_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef PNEUMATIC_SUPPLY_PRESSURE_AVAIL_AIR_PRESSURE_RPT_AVAILABLE
#define PNEUMATIC_SUPPLY_PRESSURE_AVAIL_AIR_PRESSURE_RPT_AVAILABLE (1)
#endif


// Value tables for @BRAKE_CIRCUIT_1_PRESSURE_AVAIL signal

#ifndef BRAKE_CIRCUIT_1_PRESSURE_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE
#define BRAKE_CIRCUIT_1_PRESSURE_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_CIRCUIT_1_PRESSURE_AVAIL_AIR_PRESSURE_RPT_AVAILABLE
#define BRAKE_CIRCUIT_1_PRESSURE_AVAIL_AIR_PRESSURE_RPT_AVAILABLE (1)
#endif


// Value tables for @BRAKE_CIRCUIT_2_PRESSURE_AVAIL signal

#ifndef BRAKE_CIRCUIT_2_PRESSURE_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE
#define BRAKE_CIRCUIT_2_PRESSURE_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef BRAKE_CIRCUIT_2_PRESSURE_AVAIL_AIR_PRESSURE_RPT_AVAILABLE
#define BRAKE_CIRCUIT_2_PRESSURE_AVAIL_AIR_PRESSURE_RPT_AVAILABLE (1)
#endif


// Value tables for @PARK_TRAILER_AIR_PRESSURE_AVAIL signal

#ifndef PARK_TRAILER_AIR_PRESSURE_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE
#define PARK_TRAILER_AIR_PRESSURE_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef PARK_TRAILER_AIR_PRESSURE_AVAIL_AIR_PRESSURE_RPT_AVAILABLE
#define PARK_TRAILER_AIR_PRESSURE_AVAIL_AIR_PRESSURE_RPT_AVAILABLE (1)
#endif


// Value tables for @POWERTRAIN_AIR_PRESSURE_AVAIL signal

#ifndef POWERTRAIN_AIR_PRESSURE_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE
#define POWERTRAIN_AIR_PRESSURE_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef POWERTRAIN_AIR_PRESSURE_AVAIL_AIR_PRESSURE_RPT_AVAILABLE
#define POWERTRAIN_AIR_PRESSURE_AVAIL_AIR_PRESSURE_RPT_AVAILABLE (1)
#endif


// Value tables for @AIR_COMPRESSOR_STATUS_AVAIL signal

#ifndef AIR_COMPRESSOR_STATUS_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE
#define AIR_COMPRESSOR_STATUS_AVAIL_AIR_PRESSURE_RPT_NOT_AVAILABLE (0)
#endif

#ifndef AIR_COMPRESSOR_STATUS_AVAIL_AIR_PRESSURE_RPT_AVAILABLE
#define AIR_COMPRESSOR_STATUS_AVAIL_AIR_PRESSURE_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;          //      Bits= 8 Factor= 8               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_CIRCUIT_1_PRESSURE_ro;           //      Bits= 8 Factor= 8               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_CIRCUIT_1_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_CIRCUIT_2_PRESSURE_ro;           //      Bits= 8 Factor= 8               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_CIRCUIT_2_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PARK_TRAILER_AIR_PRESSURE_ro;          //      Bits= 8 Factor= 8               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PARK_TRAILER_AIR_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t POWERTRAIN_AIR_PRESSURE_ro;            //      Bits= 8 Factor= 8               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t POWERTRAIN_AIR_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  uint8_t AIR_COMPRESSOR_STATUS : 2;             //      Bits= 2

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PNEUMATIC_SUPPLY_PRESSURE_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_CIRCUIT_1_PRESSURE_AVAIL : 1;    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_CIRCUIT_2_PRESSURE_AVAIL : 1;    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PARK_TRAILER_AIR_PRESSURE_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t POWERTRAIN_AIR_PRESSURE_AVAIL : 1;     //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t AIR_COMPRESSOR_STATUS_AVAIL : 1;       //      Bits= 1

#else

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;          //      Bits= 8 Factor= 8               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_CIRCUIT_1_PRESSURE_ro;           //      Bits= 8 Factor= 8               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_CIRCUIT_1_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_CIRCUIT_2_PRESSURE_ro;           //      Bits= 8 Factor= 8               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_CIRCUIT_2_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PARK_TRAILER_AIR_PRESSURE_ro;          //      Bits= 8 Factor= 8               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PARK_TRAILER_AIR_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t POWERTRAIN_AIR_PRESSURE_ro;            //      Bits= 8 Factor= 8               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t POWERTRAIN_AIR_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  //  0 : "NOT_ACTIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  uint8_t AIR_COMPRESSOR_STATUS;                 //      Bits= 2

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PNEUMATIC_SUPPLY_PRESSURE_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_CIRCUIT_1_PRESSURE_AVAIL;        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t BRAKE_CIRCUIT_2_PRESSURE_AVAIL;        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t PARK_TRAILER_AIR_PRESSURE_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t POWERTRAIN_AIR_PRESSURE_AVAIL;         //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t AIR_COMPRESSOR_STATUS_AVAIL;           //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} AIR_PRESSURE_RPT_t;

// def @ENGINE_AUX_RPT_2 CAN Message (1061 0x425)
#define ENGINE_AUX_RPT_2_IDE (0U)
#define ENGINE_AUX_RPT_2_DLC (5U)
#define ENGINE_AUX_RPT_2_CANID (0x425)
// signal: @FUEL_RATE_ro
#define PACMOD13_FUEL_RATE_ro_CovFactor (0.05)
#define PACMOD13_FUEL_RATE_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.05)) )
#define PACMOD13_FUEL_RATE_ro_fromS(x) ( (((x) * (0.05)) + (0.0)) )

// Value tables for @FUEL_RATE_AVAIL signal

#ifndef FUEL_RATE_AVAIL_ENGINE_AUX_RPT_2_NOT_AVAILABLE
#define FUEL_RATE_AVAIL_ENGINE_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef FUEL_RATE_AVAIL_ENGINE_AUX_RPT_2_AVAILABLE
#define FUEL_RATE_AVAIL_ENGINE_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @OIL_LEVEL_AVAIL signal

#ifndef OIL_LEVEL_AVAIL_ENGINE_AUX_RPT_2_NOT_AVAILABLE
#define OIL_LEVEL_AVAIL_ENGINE_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef OIL_LEVEL_AVAIL_ENGINE_AUX_RPT_2_AVAILABLE
#define OIL_LEVEL_AVAIL_ENGINE_AUX_RPT_2_AVAILABLE (1)
#endif


// Value tables for @OIL_PRESSURE_AVAIL signal

#ifndef OIL_PRESSURE_AVAIL_ENGINE_AUX_RPT_2_NOT_AVAILABLE
#define OIL_PRESSURE_AVAIL_ENGINE_AUX_RPT_2_NOT_AVAILABLE (0)
#endif

#ifndef OIL_PRESSURE_AVAIL_ENGINE_AUX_RPT_2_AVAILABLE
#define OIL_PRESSURE_AVAIL_ENGINE_AUX_RPT_2_AVAILABLE (1)
#endif

// signal: @OIL_LEVEL_ro
#define PACMOD13_OIL_LEVEL_ro_CovFactor (0.004)
#define PACMOD13_OIL_LEVEL_ro_toS(x) ( (uint8_t) (((x) - (0.0)) / (0.004)) )
#define PACMOD13_OIL_LEVEL_ro_fromS(x) ( (((x) * (0.004)) + (0.0)) )
// signal: @OIL_PRESSURE_ro
#define PACMOD13_OIL_PRESSURE_ro_CovFactor (4)
#define PACMOD13_OIL_PRESSURE_ro_toS(x) ( (uint8_t) ((x) / (4)) )
#define PACMOD13_OIL_PRESSURE_ro_fromS(x) ( ((x) * (4)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t FUEL_RATE_ro;                     //      Bits=16 Factor= 0.05            Unit:'L/h'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t FUEL_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FUEL_RATE_AVAIL : 1;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OIL_LEVEL_AVAIL : 1;               //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OIL_PRESSURE_AVAIL : 1;            //      Bits= 1

  uint8_t OIL_LEVEL_ro;                      //      Bits= 8 Factor= 0.004           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OIL_LEVEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t OIL_PRESSURE_ro;                   //      Bits= 8 Factor= 4               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t OIL_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint16_t FUEL_RATE_ro;                     //      Bits=16 Factor= 0.05            Unit:'L/h'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t FUEL_RATE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t FUEL_RATE_AVAIL;                   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OIL_LEVEL_AVAIL;                   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t OIL_PRESSURE_AVAIL;                //      Bits= 1

  uint8_t OIL_LEVEL_ro;                      //      Bits= 8 Factor= 0.004           Unit:'ratio'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t OIL_LEVEL_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t OIL_PRESSURE_ro;                   //      Bits= 8 Factor= 4               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t OIL_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ENGINE_AUX_RPT_2_t;

// def @WHEEL_SPEED_RPT_2 CAN Message (1062 0x426)
#define WHEEL_SPEED_RPT_2_IDE (0U)
#define WHEEL_SPEED_RPT_2_DLC (8U)
#define WHEEL_SPEED_RPT_2_CANID (0x426)
// signal: @WHEEL_SPD_AXLE_3_LEFT_ro
#define PACMOD13_WHEEL_SPD_AXLE_3_LEFT_ro_CovFactor (0.01)
#define PACMOD13_WHEEL_SPD_AXLE_3_LEFT_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_WHEEL_SPD_AXLE_3_LEFT_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )
// signal: @WHEEL_SPD_AXLE_3_RIGHT_ro
#define PACMOD13_WHEEL_SPD_AXLE_3_RIGHT_ro_CovFactor (0.01)
#define PACMOD13_WHEEL_SPD_AXLE_3_RIGHT_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_WHEEL_SPD_AXLE_3_RIGHT_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )
// signal: @WHEEL_SPD_AXLE_4_LEFT_ro
#define PACMOD13_WHEEL_SPD_AXLE_4_LEFT_ro_CovFactor (0.01)
#define PACMOD13_WHEEL_SPD_AXLE_4_LEFT_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_WHEEL_SPD_AXLE_4_LEFT_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )
// signal: @WHEEL_SPD_AXLE_4_RIGHT_ro
#define PACMOD13_WHEEL_SPD_AXLE_4_RIGHT_ro_CovFactor (0.01)
#define PACMOD13_WHEEL_SPD_AXLE_4_RIGHT_ro_toS(x) ( (int16_t) (((x) - (0.0)) / (0.01)) )
#define PACMOD13_WHEEL_SPD_AXLE_4_RIGHT_ro_fromS(x) ( (((x) * (0.01)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t WHEEL_SPD_AXLE_3_LEFT_ro;          //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_3_RIGHT_ro;         //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_4_LEFT_ro;          //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_4_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_4_RIGHT_ro;         //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_4_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int16_t WHEEL_SPD_AXLE_3_LEFT_ro;          //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_3_RIGHT_ro;         //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_4_LEFT_ro;          //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_4_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t WHEEL_SPD_AXLE_4_RIGHT_ro;         //  [-] Bits=16 Factor= 0.01            Unit:'rad/s'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPD_AXLE_4_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} WHEEL_SPEED_RPT_2_t;

// def @ENGINE_LOAD_FACTOR_RPT CAN Message (1063 0x427)
#define ENGINE_LOAD_FACTOR_RPT_IDE (0U)
#define ENGINE_LOAD_FACTOR_RPT_DLC (6U)
#define ENGINE_LOAD_FACTOR_RPT_CANID (0x427)
// signal: @DRVR_DEMANDED_ENG_TORQUE_ro
#define PACMOD13_DRVR_DEMANDED_ENG_TORQUE_ro_CovFactor (1)
#define PACMOD13_DRVR_DEMANDED_ENG_TORQUE_ro_toS(x) ( (uint8_t) ((x) - (-125)) )
#define PACMOD13_DRVR_DEMANDED_ENG_TORQUE_ro_fromS(x) ( ((x) + (-125)) )
// signal: @ACTUAL_ENGINE_TORQUE_ro
#define PACMOD13_ACTUAL_ENGINE_TORQUE_ro_CovFactor (1)
#define PACMOD13_ACTUAL_ENGINE_TORQUE_ro_toS(x) ( (uint8_t) ((x) - (-125)) )
#define PACMOD13_ACTUAL_ENGINE_TORQUE_ro_fromS(x) ( ((x) + (-125)) )

// Value tables for @DRVR_DEMANDED_ENG_TORQUE_AVAIL signal

#ifndef DRVR_DEMANDED_ENG_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_NOT_AVAILABLE
#define DRVR_DEMANDED_ENG_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef DRVR_DEMANDED_ENG_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_AVAILABLE
#define DRVR_DEMANDED_ENG_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_AVAILABLE (1)
#endif


// Value tables for @ACTUAL_ENGINE_TORQUE_AVAIL signal

#ifndef ACTUAL_ENGINE_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_NOT_AVAILABLE
#define ACTUAL_ENGINE_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ACTUAL_ENGINE_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_AVAILABLE
#define ACTUAL_ENGINE_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_AVAILABLE (1)
#endif


// Value tables for @ENG_LOAD_AT_CURRENT_SPEED_AVAIL signal

#ifndef ENG_LOAD_AT_CURRENT_SPEED_AVAIL_ENGINE_LOAD_FACTOR_RPT_NOT_AVAILABLE
#define ENG_LOAD_AT_CURRENT_SPEED_AVAIL_ENGINE_LOAD_FACTOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef ENG_LOAD_AT_CURRENT_SPEED_AVAIL_ENGINE_LOAD_FACTOR_RPT_AVAILABLE
#define ENG_LOAD_AT_CURRENT_SPEED_AVAIL_ENGINE_LOAD_FACTOR_RPT_AVAILABLE (1)
#endif


// Value tables for @REFERENCE_ENGINE_TORQUE_AVAIL signal

#ifndef REFERENCE_ENGINE_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_NOT_AVAILABLE
#define REFERENCE_ENGINE_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_NOT_AVAILABLE (0)
#endif

#ifndef REFERENCE_ENGINE_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_AVAILABLE
#define REFERENCE_ENGINE_TORQUE_AVAIL_ENGINE_LOAD_FACTOR_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t DRVR_DEMANDED_ENG_TORQUE_ro;           //      Bits= 8 Offset= -125               Unit:'%'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t DRVR_DEMANDED_ENG_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t ACTUAL_ENGINE_TORQUE_ro;               //      Bits= 8 Offset= -125               Unit:'%'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t ACTUAL_ENGINE_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // The ratio of actual engine torque to maximum torque available at the current engine speed, clipped to zero torque during engine braking.
  uint8_t ENG_LOAD_AT_CURRENT_SPEED;             //      Bits= 8 Unit:'%'

  // 100% reference value for engine torque parameters in the ENGINE_LOAD_FACTOR_RPT.
  uint16_t REFERENCE_ENGINE_TORQUE;              //      Bits=16 Unit:'Nm'

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRVR_DEMANDED_ENG_TORQUE_AVAIL : 1;    //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ACTUAL_ENGINE_TORQUE_AVAIL : 1;        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENG_LOAD_AT_CURRENT_SPEED_AVAIL : 1;   //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REFERENCE_ENGINE_TORQUE_AVAIL : 1;     //      Bits= 1

#else

  uint8_t DRVR_DEMANDED_ENG_TORQUE_ro;           //      Bits= 8 Offset= -125               Unit:'%'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t DRVR_DEMANDED_ENG_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t ACTUAL_ENGINE_TORQUE_ro;               //      Bits= 8 Offset= -125               Unit:'%'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t ACTUAL_ENGINE_TORQUE_phys;
#endif // PACMOD13_USE_SIGFLOAT

  // The ratio of actual engine torque to maximum torque available at the current engine speed, clipped to zero torque during engine braking.
  uint8_t ENG_LOAD_AT_CURRENT_SPEED;             //      Bits= 8 Unit:'%'

  // 100% reference value for engine torque parameters in the ENGINE_LOAD_FACTOR_RPT.
  uint16_t REFERENCE_ENGINE_TORQUE;              //      Bits=16 Unit:'Nm'

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t DRVR_DEMANDED_ENG_TORQUE_AVAIL;        //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ACTUAL_ENGINE_TORQUE_AVAIL;            //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t ENG_LOAD_AT_CURRENT_SPEED_AVAIL;       //      Bits= 1

  // PACMod sets this value as a function of which vehicle platform is under test and, therefore, this value does not change during operation.
  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t REFERENCE_ENGINE_TORQUE_AVAIL;         //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ENGINE_LOAD_FACTOR_RPT_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_BRAKE_PRESSURE_RPT_00 CAN Message (1064 0x428)
#define TRAILER_BRAKE_PRESSURE_RPT_00_IDE (0U)
#define TRAILER_BRAKE_PRESSURE_RPT_00_DLC (7U)
#define TRAILER_BRAKE_PRESSURE_RPT_00_CANID (0x428)
#define TRAILER_BRAKE_PRESSURE_RPT_00_CYC (100U)
// signal: @BRAKE_PRESSURE_AXLE_1_LEFT_ro
#define PACMOD13_BRAKE_PRESSURE_AXLE_1_LEFT_ro_CovFactor (5)
#define PACMOD13_BRAKE_PRESSURE_AXLE_1_LEFT_ro_toS(x) ( (uint8_t) ((x) / (5)) )
#define PACMOD13_BRAKE_PRESSURE_AXLE_1_LEFT_ro_fromS(x) ( ((x) * (5)) )
// signal: @BRAKE_PRESSURE_AXLE_1_RIGHT_ro
#define PACMOD13_BRAKE_PRESSURE_AXLE_1_RIGHT_ro_CovFactor (5)
#define PACMOD13_BRAKE_PRESSURE_AXLE_1_RIGHT_ro_toS(x) ( (uint8_t) ((x) / (5)) )
#define PACMOD13_BRAKE_PRESSURE_AXLE_1_RIGHT_ro_fromS(x) ( ((x) * (5)) )
// signal: @BRAKE_PRESSURE_AXLE_2_LEFT_ro
#define PACMOD13_BRAKE_PRESSURE_AXLE_2_LEFT_ro_CovFactor (5)
#define PACMOD13_BRAKE_PRESSURE_AXLE_2_LEFT_ro_toS(x) ( (uint8_t) ((x) / (5)) )
#define PACMOD13_BRAKE_PRESSURE_AXLE_2_LEFT_ro_fromS(x) ( ((x) * (5)) )
// signal: @BRAKE_PRESSURE_AXLE_2_RIGHT_ro
#define PACMOD13_BRAKE_PRESSURE_AXLE_2_RIGHT_ro_CovFactor (5)
#define PACMOD13_BRAKE_PRESSURE_AXLE_2_RIGHT_ro_toS(x) ( (uint8_t) ((x) / (5)) )
#define PACMOD13_BRAKE_PRESSURE_AXLE_2_RIGHT_ro_fromS(x) ( ((x) * (5)) )
// signal: @BRAKE_PRESSURE_AXLE_3_LEFT_ro
#define PACMOD13_BRAKE_PRESSURE_AXLE_3_LEFT_ro_CovFactor (5)
#define PACMOD13_BRAKE_PRESSURE_AXLE_3_LEFT_ro_toS(x) ( (uint8_t) ((x) / (5)) )
#define PACMOD13_BRAKE_PRESSURE_AXLE_3_LEFT_ro_fromS(x) ( ((x) * (5)) )
// signal: @BRAKE_PRESSURE_AXLE_3_RIGHT_ro
#define PACMOD13_BRAKE_PRESSURE_AXLE_3_RIGHT_ro_CovFactor (5)
#define PACMOD13_BRAKE_PRESSURE_AXLE_3_RIGHT_ro_toS(x) ( (uint8_t) ((x) / (5)) )
#define PACMOD13_BRAKE_PRESSURE_AXLE_3_RIGHT_ro_fromS(x) ( ((x) * (5)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t BRAKE_PRESSURE_AXLE_1_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_1_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;         //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint8_t BRAKE_PRESSURE_AXLE_1_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_1_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;         //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_BRAKE_PRESSURE_RPT_00_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_BRAKE_PRESSURE_RPT_01 CAN Message (1065 0x429)
#define TRAILER_BRAKE_PRESSURE_RPT_01_IDE (0U)
#define TRAILER_BRAKE_PRESSURE_RPT_01_DLC (7U)
#define TRAILER_BRAKE_PRESSURE_RPT_01_CANID (0x429)
#define TRAILER_BRAKE_PRESSURE_RPT_01_CYC (100U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t BRAKE_PRESSURE_AXLE_1_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_1_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;         //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint8_t BRAKE_PRESSURE_AXLE_1_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_1_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;         //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_BRAKE_PRESSURE_RPT_01_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_BRAKE_PRESSURE_RPT_02 CAN Message (1066 0x42a)
#define TRAILER_BRAKE_PRESSURE_RPT_02_IDE (0U)
#define TRAILER_BRAKE_PRESSURE_RPT_02_DLC (7U)
#define TRAILER_BRAKE_PRESSURE_RPT_02_CANID (0x42a)
#define TRAILER_BRAKE_PRESSURE_RPT_02_CYC (100U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t BRAKE_PRESSURE_AXLE_1_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_1_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;         //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint8_t BRAKE_PRESSURE_AXLE_1_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_1_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;         //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_BRAKE_PRESSURE_RPT_02_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_BRAKE_PRESSURE_RPT_03 CAN Message (1067 0x42b)
#define TRAILER_BRAKE_PRESSURE_RPT_03_IDE (0U)
#define TRAILER_BRAKE_PRESSURE_RPT_03_DLC (7U)
#define TRAILER_BRAKE_PRESSURE_RPT_03_CANID (0x42b)
#define TRAILER_BRAKE_PRESSURE_RPT_03_CYC (100U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t BRAKE_PRESSURE_AXLE_1_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_1_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;         //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint8_t BRAKE_PRESSURE_AXLE_1_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_1_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;         //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_BRAKE_PRESSURE_RPT_03_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_BRAKE_PRESSURE_RPT_04 CAN Message (1068 0x42c)
#define TRAILER_BRAKE_PRESSURE_RPT_04_IDE (0U)
#define TRAILER_BRAKE_PRESSURE_RPT_04_DLC (7U)
#define TRAILER_BRAKE_PRESSURE_RPT_04_CANID (0x42c)
#define TRAILER_BRAKE_PRESSURE_RPT_04_CYC (100U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t BRAKE_PRESSURE_AXLE_1_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_1_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;         //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint8_t BRAKE_PRESSURE_AXLE_1_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_1_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_1_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_2_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_2_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_LEFT_ro;        //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_LEFT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BRAKE_PRESSURE_AXLE_3_RIGHT_ro;       //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t BRAKE_PRESSURE_AXLE_3_RIGHT_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t PNEUMATIC_SUPPLY_PRESSURE_ro;         //      Bits= 8 Factor= 5               Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t PNEUMATIC_SUPPLY_PRESSURE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_BRAKE_PRESSURE_RPT_04_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_WHEEL_SPEED_RPT_00 CAN Message (1069 0x42d)
#define TRAILER_WHEEL_SPEED_RPT_00_IDE (0U)
#define TRAILER_WHEEL_SPEED_RPT_00_DLC (4U)
#define TRAILER_WHEEL_SPEED_RPT_00_CANID (0x42d)
// signal: @WHEEL_BASED_VEHICLE_SPEED_ro
#define PACMOD13_WHEEL_BASED_VEHICLE_SPEED_ro_CovFactor (0.00390625)
#define PACMOD13_WHEEL_BASED_VEHICLE_SPEED_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.00390625)) )
#define PACMOD13_WHEEL_BASED_VEHICLE_SPEED_ro_fromS(x) ( (((x) * (0.00390625)) + (0.0)) )
// signal: @WHEEL_SPEED_DIFFERENCE_MAIN_AXLE_ro
#define PACMOD13_WHEEL_SPEED_DIFFERENCE_MAIN_AXLE_ro_CovFactor (0.00390625)
#define PACMOD13_WHEEL_SPEED_DIFFERENCE_MAIN_AXLE_ro_toS(x) ( (uint16_t) (((x) - (-125.0)) / (0.00390625)) )
#define PACMOD13_WHEEL_SPEED_DIFFERENCE_MAIN_AXLE_ro_fromS(x) ( (((x) * (0.00390625)) + (-125.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t WHEEL_BASED_VEHICLE_SPEED_ro;             //      Bits=16 Factor= 0.00390625      Unit:'km/h'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_BASED_VEHICLE_SPEED_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t WHEEL_SPEED_DIFFERENCE_MAIN_AXLE_ro;      //      Bits=16 Offset= -125.0             Factor= 0.00390625      Unit:'km/h'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPEED_DIFFERENCE_MAIN_AXLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint16_t WHEEL_BASED_VEHICLE_SPEED_ro;             //      Bits=16 Factor= 0.00390625      Unit:'km/h'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_BASED_VEHICLE_SPEED_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t WHEEL_SPEED_DIFFERENCE_MAIN_AXLE_ro;      //      Bits=16 Offset= -125.0             Factor= 0.00390625      Unit:'km/h'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t WHEEL_SPEED_DIFFERENCE_MAIN_AXLE_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_WHEEL_SPEED_RPT_00_t;

// def @BATTERY_VOLTAGE_LEVEL_RPT_1 CAN Message (1070 0x42e)
#define BATTERY_VOLTAGE_LEVEL_RPT_1_IDE (0U)
#define BATTERY_VOLTAGE_LEVEL_RPT_1_DLC (2U)
#define BATTERY_VOLTAGE_LEVEL_RPT_1_CANID (0x42e)
#define BATTERY_VOLTAGE_LEVEL_RPT_1_CYC (250U)
// signal: @BATTERY_VOLTAGE_1_ro
#define PACMOD13_BATTERY_VOLTAGE_1_ro_CovFactor (0.2)
#define PACMOD13_BATTERY_VOLTAGE_1_ro_toS(x) ( (uint8_t) (((x) - (0.0)) / (0.2)) )
#define PACMOD13_BATTERY_VOLTAGE_1_ro_fromS(x) ( (((x) * (0.2)) + (0.0)) )
// signal: @BATTERY_VOLTAGE_2_ro
#define PACMOD13_BATTERY_VOLTAGE_2_ro_CovFactor (0.2)
#define PACMOD13_BATTERY_VOLTAGE_2_ro_toS(x) ( (uint8_t) (((x) - (0.0)) / (0.2)) )
#define PACMOD13_BATTERY_VOLTAGE_2_ro_fromS(x) ( (((x) * (0.2)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t BATTERY_VOLTAGE_1_ro;              //      Bits= 8 Factor= 0.2             Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BATTERY_VOLTAGE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BATTERY_VOLTAGE_2_ro;              //      Bits= 8 Factor= 0.2             Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BATTERY_VOLTAGE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint8_t BATTERY_VOLTAGE_1_ro;              //      Bits= 8 Factor= 0.2             Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BATTERY_VOLTAGE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BATTERY_VOLTAGE_2_ro;              //      Bits= 8 Factor= 0.2             Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BATTERY_VOLTAGE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BATTERY_VOLTAGE_LEVEL_RPT_1_t;

// def @TIRE_PRESSURE_EXTENDED_RPT CAN Message (1072 0x430)
#define TIRE_PRESSURE_EXTENDED_RPT_IDE (0U)
#define TIRE_PRESSURE_EXTENDED_RPT_DLC (8U)
#define TIRE_PRESSURE_EXTENDED_RPT_CANID (0x430)
#define TIRE_PRESSURE_EXTENDED_RPT_CYC (500U)
// signal: @TIRE_PRESSURE_1_ro
#define PACMOD13_TIRE_PRESSURE_1_ro_CovFactor (10)
#define PACMOD13_TIRE_PRESSURE_1_ro_toS(x) ( (uint8_t) ((x) / (10)) )
#define PACMOD13_TIRE_PRESSURE_1_ro_fromS(x) ( ((x) * (10)) )
// signal: @TIRE_PRESSURE_2_ro
#define PACMOD13_TIRE_PRESSURE_2_ro_CovFactor (10)
#define PACMOD13_TIRE_PRESSURE_2_ro_toS(x) ( (uint8_t) ((x) / (10)) )
#define PACMOD13_TIRE_PRESSURE_2_ro_fromS(x) ( ((x) * (10)) )
// signal: @TIRE_PRESSURE_3_ro
#define PACMOD13_TIRE_PRESSURE_3_ro_CovFactor (10)
#define PACMOD13_TIRE_PRESSURE_3_ro_toS(x) ( (uint8_t) ((x) / (10)) )
#define PACMOD13_TIRE_PRESSURE_3_ro_fromS(x) ( ((x) * (10)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_1 : 4;          //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_2 : 4;          //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_3 : 4;          //      Bits= 4

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_1 : 3;                   //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_2 : 3;                   //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_3 : 3;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_1 : 3;               //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_2 : 3;               //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_3 : 3;               //      Bits= 3

  uint8_t TIRE_PRESSURE_1_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_PRESSURE_2_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_PRESSURE_3_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_3_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_1;              //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_2;              //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_3;              //      Bits= 4

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_1;                       //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_2;                       //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_3;                       //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_1;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_2;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_3;                   //      Bits= 3

  uint8_t TIRE_PRESSURE_1_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_PRESSURE_2_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_PRESSURE_3_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_3_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIRE_PRESSURE_EXTENDED_RPT_t;

// def @TIRE_PRESSURE_EXTENDED_RPT_2 CAN Message (1073 0x431)
#define TIRE_PRESSURE_EXTENDED_RPT_2_IDE (0U)
#define TIRE_PRESSURE_EXTENDED_RPT_2_DLC (8U)
#define TIRE_PRESSURE_EXTENDED_RPT_2_CANID (0x431)
#define TIRE_PRESSURE_EXTENDED_RPT_2_CYC (500U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_1 : 4;          //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_2 : 4;          //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_3 : 4;          //      Bits= 4

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_1 : 3;                   //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_2 : 3;                   //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_3 : 3;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_1 : 3;               //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_2 : 3;               //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_3 : 3;               //      Bits= 3

  uint8_t TIRE_PRESSURE_1_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_PRESSURE_2_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_PRESSURE_3_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_3_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_1;              //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_2;              //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_3;              //      Bits= 4

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_1;                       //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_2;                       //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_3;                       //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_1;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_2;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_3;                   //      Bits= 3

  uint8_t TIRE_PRESSURE_1_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_PRESSURE_2_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_PRESSURE_3_ro;                //      Bits= 8 Factor= 10              Unit:'kPa'

#ifdef PACMOD13_USE_SIGFLOAT
  uint16_t TIRE_PRESSURE_3_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIRE_PRESSURE_EXTENDED_RPT_2_t;

// def @TIRE_TEMPERATURE_EXTENDED_RPT CAN Message (1074 0x432)
#define TIRE_TEMPERATURE_EXTENDED_RPT_IDE (0U)
#define TIRE_TEMPERATURE_EXTENDED_RPT_DLC (8U)
#define TIRE_TEMPERATURE_EXTENDED_RPT_CANID (0x432)
#define TIRE_TEMPERATURE_EXTENDED_RPT_CYC (500U)
// signal: @TIRE_TEMPERATURE_1_ro
#define PACMOD13_TIRE_TEMPERATURE_1_ro_CovFactor (1)
#define PACMOD13_TIRE_TEMPERATURE_1_ro_toS(x) ( (uint8_t) ((x) - (-50)) )
#define PACMOD13_TIRE_TEMPERATURE_1_ro_fromS(x) ( ((x) + (-50)) )
// signal: @TIRE_TEMPERATURE_2_ro
#define PACMOD13_TIRE_TEMPERATURE_2_ro_CovFactor (1)
#define PACMOD13_TIRE_TEMPERATURE_2_ro_toS(x) ( (uint8_t) ((x) - (-50)) )
#define PACMOD13_TIRE_TEMPERATURE_2_ro_fromS(x) ( ((x) + (-50)) )
// signal: @TIRE_TEMPERATURE_3_ro
#define PACMOD13_TIRE_TEMPERATURE_3_ro_CovFactor (1)
#define PACMOD13_TIRE_TEMPERATURE_3_ro_toS(x) ( (uint8_t) ((x) - (-50)) )
#define PACMOD13_TIRE_TEMPERATURE_3_ro_fromS(x) ( ((x) + (-50)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_1 : 4;          //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_2 : 4;          //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_3 : 4;          //      Bits= 4

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_1 : 3;                   //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_2 : 3;                   //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_3 : 3;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_1 : 3;               //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_2 : 3;               //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_3 : 3;               //      Bits= 3

  uint8_t TIRE_TEMPERATURE_1_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_TEMPERATURE_2_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_TEMPERATURE_3_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_3_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_1;              //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_2;              //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_3;              //      Bits= 4

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_1;                       //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_2;                       //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_3;                       //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_1;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_2;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_3;                   //      Bits= 3

  uint8_t TIRE_TEMPERATURE_1_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_TEMPERATURE_2_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_TEMPERATURE_3_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_3_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIRE_TEMPERATURE_EXTENDED_RPT_t;

// def @TIRE_TEMPERATURE_EXTENDED_RPT_2 CAN Message (1075 0x433)
#define TIRE_TEMPERATURE_EXTENDED_RPT_2_IDE (0U)
#define TIRE_TEMPERATURE_EXTENDED_RPT_2_DLC (8U)
#define TIRE_TEMPERATURE_EXTENDED_RPT_2_CANID (0x433)
#define TIRE_TEMPERATURE_EXTENDED_RPT_2_CYC (500U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_1 : 4;          //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_2 : 4;          //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_3 : 4;          //      Bits= 4

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_1 : 3;                   //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_2 : 3;                   //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_3 : 3;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_1 : 3;               //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_2 : 3;               //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_3 : 3;               //      Bits= 3

  uint8_t TIRE_TEMPERATURE_1_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_TEMPERATURE_2_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_TEMPERATURE_3_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_3_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_1;              //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_2;              //      Bits= 4

  // The value 0 represents the towing vehicle and all subsequent numbers represent their location behind the towing vehicle.
  uint8_t TIRE_CHASSIS_INDEX_3;              //      Bits= 4

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_1;                       //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_2;                       //      Bits= 3

  // Axle number starting from the front of the respective chassis number (a).
  uint8_t TIRE_AXLE_3;                       //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_1;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_2;                   //      Bits= 3

  // Tire location starting from the left and moving sequentially to the right.
  uint8_t TIRE_POSITION_3;                   //      Bits= 3

  uint8_t TIRE_TEMPERATURE_1_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_TEMPERATURE_2_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t TIRE_TEMPERATURE_3_ro;             //      Bits= 8 Offset= -50                Unit:'C'

#ifdef PACMOD13_USE_SIGFLOAT
  int16_t TIRE_TEMPERATURE_3_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TIRE_TEMPERATURE_EXTENDED_RPT_2_t;

// def @REMOTE_STOP_RPT CAN Message (1076 0x434)
#define REMOTE_STOP_RPT_IDE (0U)
#define REMOTE_STOP_RPT_DLC (4U)
#define REMOTE_STOP_RPT_CANID (0x434)

// Value tables for @REMOTE_STOP_COMMAND signal

#ifndef REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_GO
#define REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_GO (0)
#endif

#ifndef REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_STOP
#define REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_STOP (1)
#endif

#ifndef REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_TEST
#define REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_TEST (2)
#endif

#ifndef REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_RESERVED
#define REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_RESERVED (251)
#endif

#ifndef REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_RESERVED
#define REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_RESERVED (252)
#endif

#ifndef REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_RESERVED
#define REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_RESERVED (253)
#endif

#ifndef REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_ERROR
#define REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_ERROR (254)
#endif

#ifndef REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_NOT_AVAIL
#define REMOTE_STOP_COMMAND_REMOTE_STOP_RPT_NOT_AVAIL (255)
#endif


// Value tables for @REMOTE_STOP_TIMEOUT signal

#ifndef REMOTE_STOP_TIMEOUT_REMOTE_STOP_RPT_NO_FAULT
#define REMOTE_STOP_TIMEOUT_REMOTE_STOP_RPT_NO_FAULT (0)
#endif

#ifndef REMOTE_STOP_TIMEOUT_REMOTE_STOP_RPT_FAULT
#define REMOTE_STOP_TIMEOUT_REMOTE_STOP_RPT_FAULT (1)
#endif


// Value tables for @REMOTE_STOP_FAULT signal

#ifndef REMOTE_STOP_FAULT_REMOTE_STOP_RPT_NO_FAULT
#define REMOTE_STOP_FAULT_REMOTE_STOP_RPT_NO_FAULT (0)
#endif

#ifndef REMOTE_STOP_FAULT_REMOTE_STOP_RPT_FAULT
#define REMOTE_STOP_FAULT_REMOTE_STOP_RPT_FAULT (1)
#endif


// Value tables for @REMOTE_STOP_MODE_CHANGE_ALLOWED signal

#ifndef REMOTE_STOP_MODE_CHANGE_ALLOWED_REMOTE_STOP_RPT_NOT_ALLOWED
#define REMOTE_STOP_MODE_CHANGE_ALLOWED_REMOTE_STOP_RPT_NOT_ALLOWED (0)
#endif

#ifndef REMOTE_STOP_MODE_CHANGE_ALLOWED_REMOTE_STOP_RPT_ALLOWED
#define REMOTE_STOP_MODE_CHANGE_ALLOWED_REMOTE_STOP_RPT_ALLOWED (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "GO"
  //  1 : "STOP"
  //  2 : "TEST"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t REMOTE_STOP_COMMAND;                   //      Bits= 8

  uint16_t REMOTE_STOP_SENDER_ID;                //      Bits=16

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t REMOTE_STOP_TIMEOUT : 1;               //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t REMOTE_STOP_FAULT : 1;                 //      Bits= 1

  //  0 : "NOT_ALLOWED"
  //  1 : "ALLOWED"
  uint8_t REMOTE_STOP_MODE_CHANGE_ALLOWED : 1;   //      Bits= 1

#else

  //  0 : "GO"
  //  1 : "STOP"
  //  2 : "TEST"
  //  251 : "RESERVED"
  //  252 : "RESERVED"
  //  253 : "RESERVED"
  //  254 : "ERROR"
  //  255 : "NOT_AVAIL"
  uint8_t REMOTE_STOP_COMMAND;                   //      Bits= 8

  uint16_t REMOTE_STOP_SENDER_ID;                //      Bits=16

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t REMOTE_STOP_TIMEOUT;                   //      Bits= 1

  //  0 : "NO_FAULT"
  //  1 : "FAULT"
  uint8_t REMOTE_STOP_FAULT;                     //      Bits= 1

  //  0 : "NOT_ALLOWED"
  //  1 : "ALLOWED"
  uint8_t REMOTE_STOP_MODE_CHANGE_ALLOWED;       //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} REMOTE_STOP_RPT_t;

// def @AUTOMS_MAN_SWITCH_RPT CAN Message (1077 0x435)
#define AUTOMS_MAN_SWITCH_RPT_IDE (0U)
#define AUTOMS_MAN_SWITCH_RPT_DLC (1U)
#define AUTOMS_MAN_SWITCH_RPT_CANID (0x435)
#define AUTOMS_MAN_SWITCH_RPT_CYC (500U)

// Value tables for @AUTOMS_MAN_OPCTRL signal

#ifndef AUTOMS_MAN_OPCTRL_AUTOMS_MAN_SWITCH_RPT_INVALID
#define AUTOMS_MAN_OPCTRL_AUTOMS_MAN_SWITCH_RPT_INVALID (0)
#endif

#ifndef AUTOMS_MAN_OPCTRL_AUTOMS_MAN_SWITCH_RPT_MANUAL
#define AUTOMS_MAN_OPCTRL_AUTOMS_MAN_SWITCH_RPT_MANUAL (1)
#endif

#ifndef AUTOMS_MAN_OPCTRL_AUTOMS_MAN_SWITCH_RPT_AUTOMS
#define AUTOMS_MAN_OPCTRL_AUTOMS_MAN_SWITCH_RPT_AUTOMS (2)
#endif


// Value tables for @AUTOMS_MAN_EXTCTRL signal

#ifndef AUTOMS_MAN_EXTCTRL_AUTOMS_MAN_SWITCH_RPT_INVALID
#define AUTOMS_MAN_EXTCTRL_AUTOMS_MAN_SWITCH_RPT_INVALID (0)
#endif

#ifndef AUTOMS_MAN_EXTCTRL_AUTOMS_MAN_SWITCH_RPT_MANUAL
#define AUTOMS_MAN_EXTCTRL_AUTOMS_MAN_SWITCH_RPT_MANUAL (1)
#endif

#ifndef AUTOMS_MAN_EXTCTRL_AUTOMS_MAN_SWITCH_RPT_AUTOMS
#define AUTOMS_MAN_EXTCTRL_AUTOMS_MAN_SWITCH_RPT_AUTOMS (2)
#endif


// Value tables for @AUTOMS_MAN_OPCTRL_AVAIL signal

#ifndef AUTOMS_MAN_OPCTRL_AVAIL_AUTOMS_MAN_SWITCH_RPT_NOT_AVAILABLE
#define AUTOMS_MAN_OPCTRL_AVAIL_AUTOMS_MAN_SWITCH_RPT_NOT_AVAILABLE (0)
#endif

#ifndef AUTOMS_MAN_OPCTRL_AVAIL_AUTOMS_MAN_SWITCH_RPT_AVAILABLE
#define AUTOMS_MAN_OPCTRL_AVAIL_AUTOMS_MAN_SWITCH_RPT_AVAILABLE (1)
#endif


// Value tables for @AUTOMS_MAN_EXTCTRL_AVAIL signal

#ifndef AUTOMS_MAN_EXTCTRL_AVAIL_AUTOMS_MAN_SWITCH_RPT_NOT_AVAILABLE
#define AUTOMS_MAN_EXTCTRL_AVAIL_AUTOMS_MAN_SWITCH_RPT_NOT_AVAILABLE (0)
#endif

#ifndef AUTOMS_MAN_EXTCTRL_AVAIL_AUTOMS_MAN_SWITCH_RPT_AVAILABLE
#define AUTOMS_MAN_EXTCTRL_AVAIL_AUTOMS_MAN_SWITCH_RPT_AVAILABLE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "INVALID"
  //  1 : "MANUAL"
  //  2 : "AUTOMS"
  uint8_t AUTOMS_MAN_OPCTRL : 2;             //      Bits= 2

  //  0 : "INVALID"
  //  1 : "MANUAL"
  //  2 : "AUTOMS"
  uint8_t AUTOMS_MAN_EXTCTRL : 2;            //      Bits= 2

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t AUTOMS_MAN_OPCTRL_AVAIL : 1;       //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t AUTOMS_MAN_EXTCTRL_AVAIL : 1;      //      Bits= 1

#else

  //  0 : "INVALID"
  //  1 : "MANUAL"
  //  2 : "AUTOMS"
  uint8_t AUTOMS_MAN_OPCTRL;                 //      Bits= 2

  //  0 : "INVALID"
  //  1 : "MANUAL"
  //  2 : "AUTOMS"
  uint8_t AUTOMS_MAN_EXTCTRL;                //      Bits= 2

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t AUTOMS_MAN_OPCTRL_AVAIL;           //      Bits= 1

  //  0 : "NOT_AVAILABLE"
  //  1 : "AVAILABLE"
  uint8_t AUTOMS_MAN_EXTCTRL_AVAIL;          //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} AUTOMS_MAN_SWITCH_RPT_t;

// Tipper body number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_PAYLOAD_RPT_00 CAN Message (1078 0x436)
#define TRAILER_PAYLOAD_RPT_00_IDE (0U)
#define TRAILER_PAYLOAD_RPT_00_DLC (8U)
#define TRAILER_PAYLOAD_RPT_00_CANID (0x436)
#define TRAILER_PAYLOAD_RPT_00_CYC (250U)
// signal: @PAYLOAD_00_ro
#define PACMOD13_PAYLOAD_00_ro_CovFactor (10)
#define PACMOD13_PAYLOAD_00_ro_toS(x) ( (int16_t) ((x) / (10)) )
#define PACMOD13_PAYLOAD_00_ro_fromS(x) ( ((x) * (10)) )
// signal: @TARE_00_ro
#define PACMOD13_TARE_00_ro_CovFactor (10)
#define PACMOD13_TARE_00_ro_toS(x) ( (uint16_t) ((x) / (10)) )
#define PACMOD13_TARE_00_ro_fromS(x) ( ((x) * (10)) )
// signal: @PAYLOAD_01_ro
#define PACMOD13_PAYLOAD_01_ro_CovFactor (10)
#define PACMOD13_PAYLOAD_01_ro_toS(x) ( (int16_t) ((x) / (10)) )
#define PACMOD13_PAYLOAD_01_ro_fromS(x) ( ((x) * (10)) )
// signal: @TARE_01_ro
#define PACMOD13_TARE_01_ro_CovFactor (10)
#define PACMOD13_TARE_01_ro_toS(x) ( (uint16_t) ((x) / (10)) )
#define PACMOD13_TARE_01_ro_fromS(x) ( ((x) * (10)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t PAYLOAD_00_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_00_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PAYLOAD_01_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_01_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int16_t PAYLOAD_00_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_00_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PAYLOAD_01_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_01_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_PAYLOAD_RPT_00_t;

// Tipper body number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_PAYLOAD_RPT_01 CAN Message (1079 0x437)
#define TRAILER_PAYLOAD_RPT_01_IDE (0U)
#define TRAILER_PAYLOAD_RPT_01_DLC (8U)
#define TRAILER_PAYLOAD_RPT_01_CANID (0x437)
#define TRAILER_PAYLOAD_RPT_01_CYC (250U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t PAYLOAD_00_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_00_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PAYLOAD_01_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_01_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int16_t PAYLOAD_00_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_00_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PAYLOAD_01_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_01_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_PAYLOAD_RPT_01_t;

// Tipper body number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_PAYLOAD_RPT_02 CAN Message (1080 0x438)
#define TRAILER_PAYLOAD_RPT_02_IDE (0U)
#define TRAILER_PAYLOAD_RPT_02_DLC (8U)
#define TRAILER_PAYLOAD_RPT_02_CANID (0x438)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  int16_t PAYLOAD_00_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_00_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PAYLOAD_01_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_01_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  int16_t PAYLOAD_00_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_00_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_00_phys;
#endif // PACMOD13_USE_SIGFLOAT

  int16_t PAYLOAD_01_ro;                     //  [-] Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  int32_t PAYLOAD_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t TARE_01_ro;                       //      Bits=16 Factor= 10              Unit:'Kg'

#ifdef PACMOD13_USE_SIGFLOAT
  uint32_t TARE_01_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_PAYLOAD_RPT_02_t;

// def @BATTERY_VOLTAGE_LEVEL_RPT_2 CAN Message (1081 0x439)
#define BATTERY_VOLTAGE_LEVEL_RPT_2_IDE (0U)
#define BATTERY_VOLTAGE_LEVEL_RPT_2_DLC (2U)
#define BATTERY_VOLTAGE_LEVEL_RPT_2_CANID (0x439)
#define BATTERY_VOLTAGE_LEVEL_RPT_2_CYC (250U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint8_t BATTERY_VOLTAGE_1_ro;              //      Bits= 8 Factor= 0.2             Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BATTERY_VOLTAGE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BATTERY_VOLTAGE_2_ro;              //      Bits= 8 Factor= 0.2             Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BATTERY_VOLTAGE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint8_t BATTERY_VOLTAGE_1_ro;              //      Bits= 8 Factor= 0.2             Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BATTERY_VOLTAGE_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint8_t BATTERY_VOLTAGE_2_ro;              //      Bits= 8 Factor= 0.2             Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t BATTERY_VOLTAGE_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BATTERY_VOLTAGE_LEVEL_RPT_2_t;

// def @GNSS_TIME CAN Message (1082 0x43a)
#define GNSS_TIME_IDE (0U)
#define GNSS_TIME_DLC (6U)
#define GNSS_TIME_CANID (0x43a)
#define GNSS_TIME_CYC (1000U)

// Value tables for @GNSS_TIMESTAMP signal

#ifndef GNSS_TIMESTAMP_GNSS_TIME_RESERVED
#define GNSS_TIMESTAMP_GNSS_TIME_RESERVED (-5)
#endif

#ifndef GNSS_TIMESTAMP_GNSS_TIME_RESERVED
#define GNSS_TIMESTAMP_GNSS_TIME_RESERVED (-4)
#endif

#ifndef GNSS_TIMESTAMP_GNSS_TIME_RESERVED
#define GNSS_TIMESTAMP_GNSS_TIME_RESERVED (-3)
#endif

#ifndef GNSS_TIMESTAMP_GNSS_TIME_ERROR
#define GNSS_TIMESTAMP_GNSS_TIME_ERROR (-2)
#endif

#ifndef GNSS_TIMESTAMP_GNSS_TIME_NOT_AVAIL
#define GNSS_TIMESTAMP_GNSS_TIME_NOT_AVAIL (-1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  281474976710651 : "RESERVED"
  //  281474976710652 : "RESERVED"
  //  281474976710653 : "RESERVED"
  //  281474976710654 : "ERROR"
  //  281474976710655 : "NOT_AVAIL"
  uint64_t GNSS_TIMESTAMP;                   //      Bits=48 Unit:'ms'

#else

  //  281474976710651 : "RESERVED"
  //  281474976710652 : "RESERVED"
  //  281474976710653 : "RESERVED"
  //  281474976710654 : "ERROR"
  //  281474976710655 : "NOT_AVAIL"
  uint64_t GNSS_TIMESTAMP;                   //      Bits=48 Unit:'ms'

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} GNSS_TIME_t;

// def @VEHICLE_FAULT_RPT_2 CAN Message (1083 0x43b)
#define VEHICLE_FAULT_RPT_2_IDE (0U)
#define VEHICLE_FAULT_RPT_2_DLC (5U)
#define VEHICLE_FAULT_RPT_2_CANID (0x43b)
#define VEHICLE_FAULT_RPT_2_CYC (100U)

// Value tables for @BRAKES_AMBER_LAMP signal

#ifndef BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @BRAKES_RED_LAMP signal

#ifndef BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @CHASSIS_AMBER_LAMP signal

#ifndef CHASSIS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define CHASSIS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef CHASSIS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define CHASSIS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef CHASSIS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define CHASSIS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef CHASSIS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define CHASSIS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @CHASSIS_RED_LAMP signal

#ifndef CHASSIS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define CHASSIS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef CHASSIS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define CHASSIS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef CHASSIS_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define CHASSIS_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef CHASSIS_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define CHASSIS_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @ELECTRONIC_BRAKES_AMBER_LAMP signal

#ifndef ELECTRONIC_BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define ELECTRONIC_BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef ELECTRONIC_BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define ELECTRONIC_BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef ELECTRONIC_BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define ELECTRONIC_BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef ELECTRONIC_BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define ELECTRONIC_BRAKES_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @ELECTRONIC_BRAKES_RED_LAMP signal

#ifndef ELECTRONIC_BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define ELECTRONIC_BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef ELECTRONIC_BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define ELECTRONIC_BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef ELECTRONIC_BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define ELECTRONIC_BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef ELECTRONIC_BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define ELECTRONIC_BRAKES_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @ENGINE_AMBER_LAMP signal

#ifndef ENGINE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define ENGINE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef ENGINE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define ENGINE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef ENGINE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define ENGINE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef ENGINE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define ENGINE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @ENGINE_RED_LAMP signal

#ifndef ENGINE_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define ENGINE_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef ENGINE_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define ENGINE_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef ENGINE_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define ENGINE_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef ENGINE_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define ENGINE_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @ENGINE_BRAKE_AMBER_LAMP signal

#ifndef ENGINE_BRAKE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define ENGINE_BRAKE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef ENGINE_BRAKE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define ENGINE_BRAKE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef ENGINE_BRAKE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define ENGINE_BRAKE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef ENGINE_BRAKE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define ENGINE_BRAKE_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @ENGINE_BRAKE_RED_LAMP signal

#ifndef ENGINE_BRAKE_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define ENGINE_BRAKE_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef ENGINE_BRAKE_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define ENGINE_BRAKE_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef ENGINE_BRAKE_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define ENGINE_BRAKE_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef ENGINE_BRAKE_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define ENGINE_BRAKE_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @MANAGEMENT_ECU_AMBER_LAMP signal

#ifndef MANAGEMENT_ECU_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define MANAGEMENT_ECU_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef MANAGEMENT_ECU_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define MANAGEMENT_ECU_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef MANAGEMENT_ECU_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define MANAGEMENT_ECU_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef MANAGEMENT_ECU_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define MANAGEMENT_ECU_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @MANAGEMENT_ECU_RED_LAMP signal

#ifndef MANAGEMENT_ECU_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define MANAGEMENT_ECU_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef MANAGEMENT_ECU_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define MANAGEMENT_ECU_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef MANAGEMENT_ECU_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define MANAGEMENT_ECU_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef MANAGEMENT_ECU_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define MANAGEMENT_ECU_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @PNEUMATIC_AMBER_LAMP signal

#ifndef PNEUMATIC_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define PNEUMATIC_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef PNEUMATIC_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define PNEUMATIC_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef PNEUMATIC_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define PNEUMATIC_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef PNEUMATIC_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define PNEUMATIC_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @PNEUMATIC_RED_LAMP signal

#ifndef PNEUMATIC_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define PNEUMATIC_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef PNEUMATIC_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define PNEUMATIC_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef PNEUMATIC_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define PNEUMATIC_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef PNEUMATIC_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define PNEUMATIC_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @RESTRAINTS_AMBER_LAMP signal

#ifndef RESTRAINTS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define RESTRAINTS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef RESTRAINTS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define RESTRAINTS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef RESTRAINTS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define RESTRAINTS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef RESTRAINTS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define RESTRAINTS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @RESTRAINTS_RED_LAMP signal

#ifndef RESTRAINTS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define RESTRAINTS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef RESTRAINTS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define RESTRAINTS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef RESTRAINTS_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define RESTRAINTS_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef RESTRAINTS_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define RESTRAINTS_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @TRAILER_ABS_AMBER_LAMP signal

#ifndef TRAILER_ABS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define TRAILER_ABS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef TRAILER_ABS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define TRAILER_ABS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef TRAILER_ABS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define TRAILER_ABS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef TRAILER_ABS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define TRAILER_ABS_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @TRAILER_ABS_RED_LAMP signal

#ifndef TRAILER_ABS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define TRAILER_ABS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef TRAILER_ABS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define TRAILER_ABS_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef TRAILER_ABS_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define TRAILER_ABS_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef TRAILER_ABS_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define TRAILER_ABS_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @TRANSMISSION_AMBER_LAMP signal

#ifndef TRANSMISSION_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define TRANSMISSION_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef TRANSMISSION_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define TRANSMISSION_AMBER_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef TRANSMISSION_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define TRANSMISSION_AMBER_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef TRANSMISSION_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define TRANSMISSION_AMBER_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


// Value tables for @TRANSMISSION_RED_LAMP signal

#ifndef TRANSMISSION_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF
#define TRANSMISSION_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_OFF (0)
#endif

#ifndef TRANSMISSION_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON
#define TRANSMISSION_RED_LAMP_VEHICLE_FAULT_RPT_2_LAMP_ON (1)
#endif

#ifndef TRANSMISSION_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR
#define TRANSMISSION_RED_LAMP_VEHICLE_FAULT_RPT_2_ERROR (2)
#endif

#ifndef TRANSMISSION_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL
#define TRANSMISSION_RED_LAMP_VEHICLE_FAULT_RPT_2_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BRAKES_AMBER_LAMP : 2;              //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BRAKES_RED_LAMP : 2;                //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CHASSIS_AMBER_LAMP : 2;             //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CHASSIS_RED_LAMP : 2;               //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRONIC_BRAKES_AMBER_LAMP : 2;   //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRONIC_BRAKES_RED_LAMP : 2;     //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ENGINE_AMBER_LAMP : 2;              //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ENGINE_RED_LAMP : 2;                //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ENGINE_BRAKE_AMBER_LAMP : 2;        //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ENGINE_BRAKE_RED_LAMP : 2;          //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t MANAGEMENT_ECU_AMBER_LAMP : 2;      //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t MANAGEMENT_ECU_RED_LAMP : 2;        //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_AMBER_LAMP : 2;           //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_RED_LAMP : 2;             //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RESTRAINTS_AMBER_LAMP : 2;          //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RESTRAINTS_RED_LAMP : 2;            //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t TRAILER_ABS_AMBER_LAMP : 2;         //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t TRAILER_ABS_RED_LAMP : 2;           //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t TRANSMISSION_AMBER_LAMP : 2;        //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t TRANSMISSION_RED_LAMP : 2;          //      Bits= 2

#else

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BRAKES_AMBER_LAMP;                  //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t BRAKES_RED_LAMP;                    //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CHASSIS_AMBER_LAMP;                 //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t CHASSIS_RED_LAMP;                   //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRONIC_BRAKES_AMBER_LAMP;       //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRONIC_BRAKES_RED_LAMP;         //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ENGINE_AMBER_LAMP;                  //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ENGINE_RED_LAMP;                    //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ENGINE_BRAKE_AMBER_LAMP;            //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ENGINE_BRAKE_RED_LAMP;              //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t MANAGEMENT_ECU_AMBER_LAMP;          //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t MANAGEMENT_ECU_RED_LAMP;            //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_AMBER_LAMP;               //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_RED_LAMP;                 //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RESTRAINTS_AMBER_LAMP;              //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RESTRAINTS_RED_LAMP;                //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t TRAILER_ABS_AMBER_LAMP;             //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t TRAILER_ABS_RED_LAMP;               //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t TRANSMISSION_AMBER_LAMP;            //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t TRANSMISSION_RED_LAMP;              //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} VEHICLE_FAULT_RPT_2_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_FAULT_RPT_00 CAN Message (1084 0x43c)
#define TRAILER_FAULT_RPT_00_IDE (0U)
#define TRAILER_FAULT_RPT_00_DLC (2U)
#define TRAILER_FAULT_RPT_00_CANID (0x43c)
#define TRAILER_FAULT_RPT_00_CYC (100U)

// Value tables for @SERVICE_BRAKE_STATUS signal

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_00_PASSIVE
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_00_PASSIVE (0)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_00_ACTIVE
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_00_ACTIVE (1)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_00_ERROR
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_00_ERROR (2)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_00_NOT_AVAIL
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_00_NOT_AVAIL (3)
#endif


// Value tables for @ABS_STATUS signal

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_00_PASSIVE
#define ABS_STATUS_TRAILER_FAULT_RPT_00_PASSIVE (0)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_00_ACTIVE
#define ABS_STATUS_TRAILER_FAULT_RPT_00_ACTIVE (1)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_00_ERROR
#define ABS_STATUS_TRAILER_FAULT_RPT_00_ERROR (2)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_00_NOT_AVAIL
#define ABS_STATUS_TRAILER_FAULT_RPT_00_NOT_AVAIL (3)
#endif


// Value tables for @ELECTRICAL_SUPPLY_STATUS signal

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_INSUFFICIENT
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_INSUFFICIENT (0)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_SUFFICIENT
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_SUFFICIENT (1)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_ERROR
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_ERROR (2)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_NOT_AVAIL
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_NOT_AVAIL (3)
#endif


// Value tables for @PNEUMATIC_SUPPLY_STATUS signal

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_INSUFFICIENT
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_INSUFFICIENT (0)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_SUFFICIENT
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_SUFFICIENT (1)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_ERROR
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_ERROR (2)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_NOT_AVAIL
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_00_NOT_AVAIL (3)
#endif


// Value tables for @AMBER_WARNING_LAMP_REQUEST signal

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_LAMP_OFF
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_LAMP_OFF (0)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_LAMP_ON
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_LAMP_ON (1)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_ERROR
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_ERROR (2)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_NOT_AVAIL
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_NOT_AVAIL (3)
#endif


// Value tables for @RED_WARNING_LAMP_REQUEST signal

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_LAMP_OFF
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_LAMP_OFF (0)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_LAMP_ON
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_LAMP_ON (1)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_ERROR
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_ERROR (2)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_NOT_AVAIL
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_00_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t SERVICE_BRAKE_STATUS : 2;          //      Bits= 2

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ABS_STATUS : 2;                    //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRICAL_SUPPLY_STATUS : 2;      //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_SUPPLY_STATUS : 2;       //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t AMBER_WARNING_LAMP_REQUEST : 2;    //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RED_WARNING_LAMP_REQUEST : 2;      //      Bits= 2

#else

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t SERVICE_BRAKE_STATUS;              //      Bits= 2

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ABS_STATUS;                        //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRICAL_SUPPLY_STATUS;          //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_SUPPLY_STATUS;           //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t AMBER_WARNING_LAMP_REQUEST;        //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RED_WARNING_LAMP_REQUEST;          //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_FAULT_RPT_00_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_FAULT_RPT_01 CAN Message (1085 0x43d)
#define TRAILER_FAULT_RPT_01_IDE (0U)
#define TRAILER_FAULT_RPT_01_DLC (2U)
#define TRAILER_FAULT_RPT_01_CANID (0x43d)
#define TRAILER_FAULT_RPT_01_CYC (100U)

// Value tables for @SERVICE_BRAKE_STATUS signal

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_01_PASSIVE
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_01_PASSIVE (0)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_01_ACTIVE
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_01_ACTIVE (1)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_01_ERROR
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_01_ERROR (2)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_01_NOT_AVAIL
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_01_NOT_AVAIL (3)
#endif


// Value tables for @ABS_STATUS signal

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_01_PASSIVE
#define ABS_STATUS_TRAILER_FAULT_RPT_01_PASSIVE (0)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_01_ACTIVE
#define ABS_STATUS_TRAILER_FAULT_RPT_01_ACTIVE (1)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_01_ERROR
#define ABS_STATUS_TRAILER_FAULT_RPT_01_ERROR (2)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_01_NOT_AVAIL
#define ABS_STATUS_TRAILER_FAULT_RPT_01_NOT_AVAIL (3)
#endif


// Value tables for @ELECTRICAL_SUPPLY_STATUS signal

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_INSUFFICIENT
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_INSUFFICIENT (0)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_SUFFICIENT
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_SUFFICIENT (1)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_ERROR
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_ERROR (2)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_NOT_AVAIL
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_NOT_AVAIL (3)
#endif


// Value tables for @PNEUMATIC_SUPPLY_STATUS signal

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_INSUFFICIENT
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_INSUFFICIENT (0)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_SUFFICIENT
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_SUFFICIENT (1)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_ERROR
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_ERROR (2)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_NOT_AVAIL
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_01_NOT_AVAIL (3)
#endif


// Value tables for @AMBER_WARNING_LAMP_REQUEST signal

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_LAMP_OFF
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_LAMP_OFF (0)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_LAMP_ON
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_LAMP_ON (1)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_ERROR
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_ERROR (2)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_NOT_AVAIL
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_NOT_AVAIL (3)
#endif


// Value tables for @RED_WARNING_LAMP_REQUEST signal

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_LAMP_OFF
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_LAMP_OFF (0)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_LAMP_ON
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_LAMP_ON (1)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_ERROR
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_ERROR (2)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_NOT_AVAIL
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_01_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t SERVICE_BRAKE_STATUS : 2;          //      Bits= 2

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ABS_STATUS : 2;                    //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRICAL_SUPPLY_STATUS : 2;      //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_SUPPLY_STATUS : 2;       //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t AMBER_WARNING_LAMP_REQUEST : 2;    //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RED_WARNING_LAMP_REQUEST : 2;      //      Bits= 2

#else

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t SERVICE_BRAKE_STATUS;              //      Bits= 2

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ABS_STATUS;                        //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRICAL_SUPPLY_STATUS;          //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_SUPPLY_STATUS;           //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t AMBER_WARNING_LAMP_REQUEST;        //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RED_WARNING_LAMP_REQUEST;          //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_FAULT_RPT_01_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_FAULT_RPT_02 CAN Message (1086 0x43e)
#define TRAILER_FAULT_RPT_02_IDE (0U)
#define TRAILER_FAULT_RPT_02_DLC (2U)
#define TRAILER_FAULT_RPT_02_CANID (0x43e)
#define TRAILER_FAULT_RPT_02_CYC (100U)

// Value tables for @SERVICE_BRAKE_STATUS signal

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_02_PASSIVE
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_02_PASSIVE (0)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_02_ACTIVE
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_02_ACTIVE (1)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_02_ERROR
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_02_ERROR (2)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_02_NOT_AVAIL
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_02_NOT_AVAIL (3)
#endif


// Value tables for @ABS_STATUS signal

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_02_PASSIVE
#define ABS_STATUS_TRAILER_FAULT_RPT_02_PASSIVE (0)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_02_ACTIVE
#define ABS_STATUS_TRAILER_FAULT_RPT_02_ACTIVE (1)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_02_ERROR
#define ABS_STATUS_TRAILER_FAULT_RPT_02_ERROR (2)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_02_NOT_AVAIL
#define ABS_STATUS_TRAILER_FAULT_RPT_02_NOT_AVAIL (3)
#endif


// Value tables for @ELECTRICAL_SUPPLY_STATUS signal

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_INSUFFICIENT
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_INSUFFICIENT (0)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_SUFFICIENT
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_SUFFICIENT (1)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_ERROR
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_ERROR (2)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_NOT_AVAIL
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_NOT_AVAIL (3)
#endif


// Value tables for @PNEUMATIC_SUPPLY_STATUS signal

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_INSUFFICIENT
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_INSUFFICIENT (0)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_SUFFICIENT
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_SUFFICIENT (1)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_ERROR
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_ERROR (2)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_NOT_AVAIL
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_02_NOT_AVAIL (3)
#endif


// Value tables for @AMBER_WARNING_LAMP_REQUEST signal

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_LAMP_OFF
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_LAMP_OFF (0)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_LAMP_ON
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_LAMP_ON (1)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_ERROR
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_ERROR (2)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_NOT_AVAIL
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_NOT_AVAIL (3)
#endif


// Value tables for @RED_WARNING_LAMP_REQUEST signal

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_LAMP_OFF
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_LAMP_OFF (0)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_LAMP_ON
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_LAMP_ON (1)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_ERROR
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_ERROR (2)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_NOT_AVAIL
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_02_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t SERVICE_BRAKE_STATUS : 2;          //      Bits= 2

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ABS_STATUS : 2;                    //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRICAL_SUPPLY_STATUS : 2;      //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_SUPPLY_STATUS : 2;       //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t AMBER_WARNING_LAMP_REQUEST : 2;    //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RED_WARNING_LAMP_REQUEST : 2;      //      Bits= 2

#else

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t SERVICE_BRAKE_STATUS;              //      Bits= 2

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ABS_STATUS;                        //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRICAL_SUPPLY_STATUS;          //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_SUPPLY_STATUS;           //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t AMBER_WARNING_LAMP_REQUEST;        //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RED_WARNING_LAMP_REQUEST;          //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_FAULT_RPT_02_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_FAULT_RPT_03 CAN Message (1087 0x43f)
#define TRAILER_FAULT_RPT_03_IDE (0U)
#define TRAILER_FAULT_RPT_03_DLC (2U)
#define TRAILER_FAULT_RPT_03_CANID (0x43f)
#define TRAILER_FAULT_RPT_03_CYC (100U)

// Value tables for @SERVICE_BRAKE_STATUS signal

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_03_PASSIVE
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_03_PASSIVE (0)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_03_ACTIVE
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_03_ACTIVE (1)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_03_ERROR
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_03_ERROR (2)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_03_NOT_AVAIL
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_03_NOT_AVAIL (3)
#endif


// Value tables for @ABS_STATUS signal

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_03_PASSIVE
#define ABS_STATUS_TRAILER_FAULT_RPT_03_PASSIVE (0)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_03_ACTIVE
#define ABS_STATUS_TRAILER_FAULT_RPT_03_ACTIVE (1)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_03_ERROR
#define ABS_STATUS_TRAILER_FAULT_RPT_03_ERROR (2)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_03_NOT_AVAIL
#define ABS_STATUS_TRAILER_FAULT_RPT_03_NOT_AVAIL (3)
#endif


// Value tables for @ELECTRICAL_SUPPLY_STATUS signal

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_INSUFFICIENT
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_INSUFFICIENT (0)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_SUFFICIENT
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_SUFFICIENT (1)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_ERROR
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_ERROR (2)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_NOT_AVAIL
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_NOT_AVAIL (3)
#endif


// Value tables for @PNEUMATIC_SUPPLY_STATUS signal

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_INSUFFICIENT
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_INSUFFICIENT (0)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_SUFFICIENT
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_SUFFICIENT (1)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_ERROR
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_ERROR (2)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_NOT_AVAIL
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_03_NOT_AVAIL (3)
#endif


// Value tables for @AMBER_WARNING_LAMP_REQUEST signal

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_LAMP_OFF
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_LAMP_OFF (0)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_LAMP_ON
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_LAMP_ON (1)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_ERROR
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_ERROR (2)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_NOT_AVAIL
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_NOT_AVAIL (3)
#endif


// Value tables for @RED_WARNING_LAMP_REQUEST signal

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_LAMP_OFF
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_LAMP_OFF (0)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_LAMP_ON
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_LAMP_ON (1)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_ERROR
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_ERROR (2)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_NOT_AVAIL
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_03_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t SERVICE_BRAKE_STATUS : 2;          //      Bits= 2

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ABS_STATUS : 2;                    //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRICAL_SUPPLY_STATUS : 2;      //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_SUPPLY_STATUS : 2;       //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t AMBER_WARNING_LAMP_REQUEST : 2;    //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RED_WARNING_LAMP_REQUEST : 2;      //      Bits= 2

#else

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t SERVICE_BRAKE_STATUS;              //      Bits= 2

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ABS_STATUS;                        //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRICAL_SUPPLY_STATUS;          //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_SUPPLY_STATUS;           //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t AMBER_WARNING_LAMP_REQUEST;        //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RED_WARNING_LAMP_REQUEST;          //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_FAULT_RPT_03_t;

// Chassis number increments from the front most trailer and is indicated by the report index.
// def @TRAILER_FAULT_RPT_04 CAN Message (1088 0x440)
#define TRAILER_FAULT_RPT_04_IDE (0U)
#define TRAILER_FAULT_RPT_04_DLC (2U)
#define TRAILER_FAULT_RPT_04_CANID (0x440)
#define TRAILER_FAULT_RPT_04_CYC (100U)

// Value tables for @SERVICE_BRAKE_STATUS signal

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_04_PASSIVE
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_04_PASSIVE (0)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_04_ACTIVE
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_04_ACTIVE (1)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_04_ERROR
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_04_ERROR (2)
#endif

#ifndef SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_04_NOT_AVAIL
#define SERVICE_BRAKE_STATUS_TRAILER_FAULT_RPT_04_NOT_AVAIL (3)
#endif


// Value tables for @ABS_STATUS signal

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_04_PASSIVE
#define ABS_STATUS_TRAILER_FAULT_RPT_04_PASSIVE (0)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_04_ACTIVE
#define ABS_STATUS_TRAILER_FAULT_RPT_04_ACTIVE (1)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_04_ERROR
#define ABS_STATUS_TRAILER_FAULT_RPT_04_ERROR (2)
#endif

#ifndef ABS_STATUS_TRAILER_FAULT_RPT_04_NOT_AVAIL
#define ABS_STATUS_TRAILER_FAULT_RPT_04_NOT_AVAIL (3)
#endif


// Value tables for @ELECTRICAL_SUPPLY_STATUS signal

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_INSUFFICIENT
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_INSUFFICIENT (0)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_SUFFICIENT
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_SUFFICIENT (1)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_ERROR
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_ERROR (2)
#endif

#ifndef ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_NOT_AVAIL
#define ELECTRICAL_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_NOT_AVAIL (3)
#endif


// Value tables for @PNEUMATIC_SUPPLY_STATUS signal

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_INSUFFICIENT
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_INSUFFICIENT (0)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_SUFFICIENT
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_SUFFICIENT (1)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_ERROR
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_ERROR (2)
#endif

#ifndef PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_NOT_AVAIL
#define PNEUMATIC_SUPPLY_STATUS_TRAILER_FAULT_RPT_04_NOT_AVAIL (3)
#endif


// Value tables for @AMBER_WARNING_LAMP_REQUEST signal

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_LAMP_OFF
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_LAMP_OFF (0)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_LAMP_ON
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_LAMP_ON (1)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_ERROR
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_ERROR (2)
#endif

#ifndef AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_NOT_AVAIL
#define AMBER_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_NOT_AVAIL (3)
#endif


// Value tables for @RED_WARNING_LAMP_REQUEST signal

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_LAMP_OFF
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_LAMP_OFF (0)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_LAMP_ON
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_LAMP_ON (1)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_ERROR
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_ERROR (2)
#endif

#ifndef RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_NOT_AVAIL
#define RED_WARNING_LAMP_REQUEST_TRAILER_FAULT_RPT_04_NOT_AVAIL (3)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t SERVICE_BRAKE_STATUS : 2;          //      Bits= 2

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ABS_STATUS : 2;                    //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRICAL_SUPPLY_STATUS : 2;      //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_SUPPLY_STATUS : 2;       //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t AMBER_WARNING_LAMP_REQUEST : 2;    //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RED_WARNING_LAMP_REQUEST : 2;      //      Bits= 2

#else

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t SERVICE_BRAKE_STATUS;              //      Bits= 2

  //  0 : "PASSIVE"
  //  1 : "ACTIVE"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ABS_STATUS;                        //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t ELECTRICAL_SUPPLY_STATUS;          //      Bits= 2

  //  0 : "INSUFFICIENT"
  //  1 : "SUFFICIENT"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t PNEUMATIC_SUPPLY_STATUS;           //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t AMBER_WARNING_LAMP_REQUEST;        //      Bits= 2

  //  0 : "LAMP_OFF"
  //  1 : "LAMP_ON"
  //  2 : "ERROR"
  //  3 : "NOT_AVAIL"
  uint8_t RED_WARNING_LAMP_REQUEST;          //      Bits= 2

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} TRAILER_FAULT_RPT_04_t;

// def @SOFTWARE_VERSION_RPT_05 CAN Message (1089 0x441)
#define SOFTWARE_VERSION_RPT_05_IDE (0U)
#define SOFTWARE_VERSION_RPT_05_DLC (7U)
#define SOFTWARE_VERSION_RPT_05_CANID (0x441)
#define SOFTWARE_VERSION_RPT_05_CYC (1000U)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#else

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MAJOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t MINOR;                             //      Bits= 8

  // MAJOR, MINOR, and PATCH shall be the software version number and shall be defined by Sematic Versioning 2.0.  For build numbers other than 0000, it shall be the most recent software release.
  uint8_t PATCH;                             //      Bits= 8

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD0;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD1;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD2;                            //      Bits= 8 Unit:'ASCII'

  // BUILD0-BUILD3 shall represent the software build number and shall be constrained to characters A-Z and 0-9.
  uint8_t BUILD3;                            //      Bits= 8 Unit:'ASCII'

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} SOFTWARE_VERSION_RPT_05_t;

// def @ACCEL_PEDAL_POSITION_VOLTAGE_RPT CAN Message (1090 0x442)
#define ACCEL_PEDAL_POSITION_VOLTAGE_RPT_IDE (0U)
#define ACCEL_PEDAL_POSITION_VOLTAGE_RPT_DLC (8U)
#define ACCEL_PEDAL_POSITION_VOLTAGE_RPT_CANID (0x442)
// signal: @PACMOD_VOLTAGE_IN_1_ro
#define PACMOD13_PACMOD_VOLTAGE_IN_1_ro_CovFactor (0.001)
#define PACMOD13_PACMOD_VOLTAGE_IN_1_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_PACMOD_VOLTAGE_IN_1_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @PACMOD_VOLTAGE_IN_2_ro
#define PACMOD13_PACMOD_VOLTAGE_IN_2_ro_CovFactor (0.001)
#define PACMOD13_PACMOD_VOLTAGE_IN_2_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_PACMOD_VOLTAGE_IN_2_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @PACMOD_VOLTAGE_OUT_1_ro
#define PACMOD13_PACMOD_VOLTAGE_OUT_1_ro_CovFactor (0.001)
#define PACMOD13_PACMOD_VOLTAGE_OUT_1_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_PACMOD_VOLTAGE_OUT_1_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )
// signal: @PACMOD_VOLTAGE_OUT_2_ro
#define PACMOD13_PACMOD_VOLTAGE_OUT_2_ro_CovFactor (0.001)
#define PACMOD13_PACMOD_VOLTAGE_OUT_2_ro_toS(x) ( (uint16_t) (((x) - (0.0)) / (0.001)) )
#define PACMOD13_PACMOD_VOLTAGE_OUT_2_ro_fromS(x) ( (((x) * (0.001)) + (0.0)) )

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t PACMOD_VOLTAGE_IN_1_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_IN_2_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_1_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_2_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint16_t PACMOD_VOLTAGE_IN_1_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_IN_2_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_1_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_2_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} ACCEL_PEDAL_POSITION_VOLTAGE_RPT_t;

// def @BRAKE_MC_VOLTAGE_RPT CAN Message (1091 0x443)
#define BRAKE_MC_VOLTAGE_RPT_IDE (0U)
#define BRAKE_MC_VOLTAGE_RPT_DLC (8U)
#define BRAKE_MC_VOLTAGE_RPT_CANID (0x443)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t PACMOD_VOLTAGE_IN_1_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_IN_2_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_1_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_2_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint16_t PACMOD_VOLTAGE_IN_1_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_IN_2_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_1_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_2_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_MC_VOLTAGE_RPT_t;

// def @BRAKE_PEDAL_POSITION_VOLTAGE_RPT CAN Message (1092 0x444)
#define BRAKE_PEDAL_POSITION_VOLTAGE_RPT_IDE (0U)
#define BRAKE_PEDAL_POSITION_VOLTAGE_RPT_DLC (8U)
#define BRAKE_PEDAL_POSITION_VOLTAGE_RPT_CANID (0x444)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t PACMOD_VOLTAGE_IN_1_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_IN_2_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_1_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_2_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint16_t PACMOD_VOLTAGE_IN_1_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_IN_2_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_1_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_2_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} BRAKE_PEDAL_POSITION_VOLTAGE_RPT_t;

// def @STEERING_TRQ_SENSOR_VOLTAGE_RPT CAN Message (1093 0x445)
#define STEERING_TRQ_SENSOR_VOLTAGE_RPT_IDE (0U)
#define STEERING_TRQ_SENSOR_VOLTAGE_RPT_DLC (8U)
#define STEERING_TRQ_SENSOR_VOLTAGE_RPT_CANID (0x445)

typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  uint16_t PACMOD_VOLTAGE_IN_1_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_IN_2_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_1_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_2_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#else

  uint16_t PACMOD_VOLTAGE_IN_1_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_IN_2_ro;           //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_IN_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_1_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_1_phys;
#endif // PACMOD13_USE_SIGFLOAT

  uint16_t PACMOD_VOLTAGE_OUT_2_ro;          //      Bits=16 Factor= 0.001           Unit:'V'

#ifdef PACMOD13_USE_SIGFLOAT
  sigfloat_t PACMOD_VOLTAGE_OUT_2_phys;
#endif // PACMOD13_USE_SIGFLOAT

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} STEERING_TRQ_SENSOR_VOLTAGE_RPT_t;

// Not for new development.
// def @WATCHDOG_RPT CAN Message (1536 0x600)
#define WATCHDOG_RPT_IDE (0U)
#define WATCHDOG_RPT_DLC (8U)
#define WATCHDOG_RPT_CANID (0x600)
#define WATCHDOG_RPT_CYC (100U)

// Value tables for @GLOBAL_ENABLE_FLAG signal

#ifndef GLOBAL_ENABLE_FLAG_WATCHDOG_RPT_FALSE
#define GLOBAL_ENABLE_FLAG_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef GLOBAL_ENABLE_FLAG_WATCHDOG_RPT_TRUE
#define GLOBAL_ENABLE_FLAG_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @GLOBAL_OVERRIDE_ACTIVE signal

#ifndef GLOBAL_OVERRIDE_ACTIVE_WATCHDOG_RPT_FALSE
#define GLOBAL_OVERRIDE_ACTIVE_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef GLOBAL_OVERRIDE_ACTIVE_WATCHDOG_RPT_TRUE
#define GLOBAL_OVERRIDE_ACTIVE_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @GLOBAL_COMMAND_TIMEOUT_ERROR signal

#ifndef GLOBAL_COMMAND_TIMEOUT_ERROR_WATCHDOG_RPT_FALSE
#define GLOBAL_COMMAND_TIMEOUT_ERROR_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef GLOBAL_COMMAND_TIMEOUT_ERROR_WATCHDOG_RPT_TRUE
#define GLOBAL_COMMAND_TIMEOUT_ERROR_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @GLOBAL_PACMOD_SUBSYSTEM_TIMEOUT signal

#ifndef GLOBAL_PACMOD_SUBSYSTEM_TIMEOUT_WATCHDOG_RPT_FALSE
#define GLOBAL_PACMOD_SUBSYSTEM_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef GLOBAL_PACMOD_SUBSYSTEM_TIMEOUT_WATCHDOG_RPT_TRUE
#define GLOBAL_PACMOD_SUBSYSTEM_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @GLOBAL_VEHICLE_CAN_TIMEOUT signal

#ifndef GLOBAL_VEHICLE_CAN_TIMEOUT_WATCHDOG_RPT_FALSE
#define GLOBAL_VEHICLE_CAN_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef GLOBAL_VEHICLE_CAN_TIMEOUT_WATCHDOG_RPT_TRUE
#define GLOBAL_VEHICLE_CAN_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @GLOBAL_PACMOD_SYS_FAULT_ACTIVE signal

#ifndef GLOBAL_PACMOD_SYS_FAULT_ACTIVE_WATCHDOG_RPT_FALSE
#define GLOBAL_PACMOD_SYS_FAULT_ACTIVE_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef GLOBAL_PACMOD_SYS_FAULT_ACTIVE_WATCHDOG_RPT_TRUE
#define GLOBAL_PACMOD_SYS_FAULT_ACTIVE_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @GLOBAL_CONFIG_FAULT_ACTIVE signal

#ifndef GLOBAL_CONFIG_FAULT_ACTIVE_WATCHDOG_RPT_FALSE
#define GLOBAL_CONFIG_FAULT_ACTIVE_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef GLOBAL_CONFIG_FAULT_ACTIVE_WATCHDOG_RPT_TRUE
#define GLOBAL_CONFIG_FAULT_ACTIVE_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @GLOBAL_TIMEOUT signal

#ifndef GLOBAL_TIMEOUT_WATCHDOG_RPT_FALSE
#define GLOBAL_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef GLOBAL_TIMEOUT_WATCHDOG_RPT_TRUE
#define GLOBAL_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @ACCEL_ENABLED signal

#ifndef ACCEL_ENABLED_WATCHDOG_RPT_FALSE
#define ACCEL_ENABLED_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef ACCEL_ENABLED_WATCHDOG_RPT_TRUE
#define ACCEL_ENABLED_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @ACCEL_OVERRIDE_ACTIVE signal

#ifndef ACCEL_OVERRIDE_ACTIVE_WATCHDOG_RPT_FALSE
#define ACCEL_OVERRIDE_ACTIVE_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef ACCEL_OVERRIDE_ACTIVE_WATCHDOG_RPT_TRUE
#define ACCEL_OVERRIDE_ACTIVE_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @ACCEL_COMMAND_OUTPUT_FAULT signal

#ifndef ACCEL_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_FALSE
#define ACCEL_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef ACCEL_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_TRUE
#define ACCEL_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @ACCEL_INPUT_OUTPUT_FAULT signal

#ifndef ACCEL_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_FALSE
#define ACCEL_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef ACCEL_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_TRUE
#define ACCEL_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @ACCEL_OUTPUT_REPORTED_FAULT signal

#ifndef ACCEL_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_FALSE
#define ACCEL_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef ACCEL_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_TRUE
#define ACCEL_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @ACCEL_PACMOD_FAULT signal

#ifndef ACCEL_PACMOD_FAULT_WATCHDOG_RPT_FALSE
#define ACCEL_PACMOD_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef ACCEL_PACMOD_FAULT_WATCHDOG_RPT_TRUE
#define ACCEL_PACMOD_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @ACCEL_VEHICLE_FAULT signal

#ifndef ACCEL_VEHICLE_FAULT_WATCHDOG_RPT_FALSE
#define ACCEL_VEHICLE_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef ACCEL_VEHICLE_FAULT_WATCHDOG_RPT_TRUE
#define ACCEL_VEHICLE_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @ACCEL_TIMEOUT signal

#ifndef ACCEL_TIMEOUT_WATCHDOG_RPT_FALSE
#define ACCEL_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef ACCEL_TIMEOUT_WATCHDOG_RPT_TRUE
#define ACCEL_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @BRAKE_ENABLED signal

#ifndef BRAKE_ENABLED_WATCHDOG_RPT_FALSE
#define BRAKE_ENABLED_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef BRAKE_ENABLED_WATCHDOG_RPT_TRUE
#define BRAKE_ENABLED_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @BRAKE_OVERRIDE_ACTIVE signal

#ifndef BRAKE_OVERRIDE_ACTIVE_WATCHDOG_RPT_FALSE
#define BRAKE_OVERRIDE_ACTIVE_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef BRAKE_OVERRIDE_ACTIVE_WATCHDOG_RPT_TRUE
#define BRAKE_OVERRIDE_ACTIVE_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @BRAKE_COMMAND_OUTPUT_FAULT signal

#ifndef BRAKE_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_FALSE
#define BRAKE_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef BRAKE_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_TRUE
#define BRAKE_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @BRAKE_INPUT_OUTPUT_FAULT signal

#ifndef BRAKE_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_FALSE
#define BRAKE_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef BRAKE_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_TRUE
#define BRAKE_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @BRAKE_OUTPUT_REPORTED_FAULT signal

#ifndef BRAKE_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_FALSE
#define BRAKE_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef BRAKE_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_TRUE
#define BRAKE_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @BRAKE_PACMOD_FAULT signal

#ifndef BRAKE_PACMOD_FAULT_WATCHDOG_RPT_FALSE
#define BRAKE_PACMOD_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef BRAKE_PACMOD_FAULT_WATCHDOG_RPT_TRUE
#define BRAKE_PACMOD_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @BRAKE_VEHICLE_FAULT signal

#ifndef BRAKE_VEHICLE_FAULT_WATCHDOG_RPT_FALSE
#define BRAKE_VEHICLE_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef BRAKE_VEHICLE_FAULT_WATCHDOG_RPT_TRUE
#define BRAKE_VEHICLE_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @BRAKE_TIMEOUT signal

#ifndef BRAKE_TIMEOUT_WATCHDOG_RPT_FALSE
#define BRAKE_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef BRAKE_TIMEOUT_WATCHDOG_RPT_TRUE
#define BRAKE_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @SHIFT_ENABLED signal

#ifndef SHIFT_ENABLED_WATCHDOG_RPT_FALSE
#define SHIFT_ENABLED_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef SHIFT_ENABLED_WATCHDOG_RPT_TRUE
#define SHIFT_ENABLED_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @SHIFT_OVERRIDE_ACTIVE signal

#ifndef SHIFT_OVERRIDE_ACTIVE_WATCHDOG_RPT_FALSE
#define SHIFT_OVERRIDE_ACTIVE_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef SHIFT_OVERRIDE_ACTIVE_WATCHDOG_RPT_TRUE
#define SHIFT_OVERRIDE_ACTIVE_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @SHIFT_COMMAND_OUTPUT_FAULT signal

#ifndef SHIFT_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_FALSE
#define SHIFT_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef SHIFT_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_TRUE
#define SHIFT_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @SHIFT_INPUT_OUTPUT_FAULT signal

#ifndef SHIFT_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_FALSE
#define SHIFT_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef SHIFT_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_TRUE
#define SHIFT_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @SHIFT_OUTPUT_REPORTED_FAULT signal

#ifndef SHIFT_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_FALSE
#define SHIFT_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef SHIFT_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_TRUE
#define SHIFT_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @SHIFT_PACMOD_FAULT signal

#ifndef SHIFT_PACMOD_FAULT_WATCHDOG_RPT_FALSE
#define SHIFT_PACMOD_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef SHIFT_PACMOD_FAULT_WATCHDOG_RPT_TRUE
#define SHIFT_PACMOD_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @SHIFT_VEHICLE_FAULT signal

#ifndef SHIFT_VEHICLE_FAULT_WATCHDOG_RPT_FALSE
#define SHIFT_VEHICLE_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef SHIFT_VEHICLE_FAULT_WATCHDOG_RPT_TRUE
#define SHIFT_VEHICLE_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @SHIFT_TIMEOUT signal

#ifndef SHIFT_TIMEOUT_WATCHDOG_RPT_FALSE
#define SHIFT_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef SHIFT_TIMEOUT_WATCHDOG_RPT_TRUE
#define SHIFT_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @STEER_ENABLED signal

#ifndef STEER_ENABLED_WATCHDOG_RPT_FALSE
#define STEER_ENABLED_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef STEER_ENABLED_WATCHDOG_RPT_TRUE
#define STEER_ENABLED_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @STEER_OVERRIDE_ACTIVE signal

#ifndef STEER_OVERRIDE_ACTIVE_WATCHDOG_RPT_FALSE
#define STEER_OVERRIDE_ACTIVE_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef STEER_OVERRIDE_ACTIVE_WATCHDOG_RPT_TRUE
#define STEER_OVERRIDE_ACTIVE_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @STEER_COMMAND_OUTPUT_FAULT signal

#ifndef STEER_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_FALSE
#define STEER_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef STEER_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_TRUE
#define STEER_COMMAND_OUTPUT_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @STEER_INPUT_OUTPUT_FAULT signal

#ifndef STEER_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_FALSE
#define STEER_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef STEER_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_TRUE
#define STEER_INPUT_OUTPUT_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @STEER_OUTPUT_REPORTED_FAULT signal

#ifndef STEER_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_FALSE
#define STEER_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef STEER_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_TRUE
#define STEER_OUTPUT_REPORTED_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @STEER_PACMOD_FAULT signal

#ifndef STEER_PACMOD_FAULT_WATCHDOG_RPT_FALSE
#define STEER_PACMOD_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef STEER_PACMOD_FAULT_WATCHDOG_RPT_TRUE
#define STEER_PACMOD_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @STEER_VEHICLE_FAULT signal

#ifndef STEER_VEHICLE_FAULT_WATCHDOG_RPT_FALSE
#define STEER_VEHICLE_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef STEER_VEHICLE_FAULT_WATCHDOG_RPT_TRUE
#define STEER_VEHICLE_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @STEER_TIMEOUT signal

#ifndef STEER_TIMEOUT_WATCHDOG_RPT_FALSE
#define STEER_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef STEER_TIMEOUT_WATCHDOG_RPT_TRUE
#define STEER_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMOD1_CONFIG_FAULT signal

#ifndef PACMOD1_CONFIG_FAULT_WATCHDOG_RPT_FALSE
#define PACMOD1_CONFIG_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMOD1_CONFIG_FAULT_WATCHDOG_RPT_TRUE
#define PACMOD1_CONFIG_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMOD1_CAN_TIMEOUT signal

#ifndef PACMOD1_CAN_TIMEOUT_WATCHDOG_RPT_FALSE
#define PACMOD1_CAN_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMOD1_CAN_TIMEOUT_WATCHDOG_RPT_TRUE
#define PACMOD1_CAN_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMOD1_COUNTER_FAULT signal

#ifndef PACMOD1_COUNTER_FAULT_WATCHDOG_RPT_FALSE
#define PACMOD1_COUNTER_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMOD1_COUNTER_FAULT_WATCHDOG_RPT_TRUE
#define PACMOD1_COUNTER_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMOD2_CONFIG_FAULT signal

#ifndef PACMOD2_CONFIG_FAULT_WATCHDOG_RPT_FALSE
#define PACMOD2_CONFIG_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMOD2_CONFIG_FAULT_WATCHDOG_RPT_TRUE
#define PACMOD2_CONFIG_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMOD2_CAN_TIMEOUT signal

#ifndef PACMOD2_CAN_TIMEOUT_WATCHDOG_RPT_FALSE
#define PACMOD2_CAN_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMOD2_CAN_TIMEOUT_WATCHDOG_RPT_TRUE
#define PACMOD2_CAN_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMOD2_COUNTER_FAULT signal

#ifndef PACMOD2_COUNTER_FAULT_WATCHDOG_RPT_FALSE
#define PACMOD2_COUNTER_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMOD2_COUNTER_FAULT_WATCHDOG_RPT_TRUE
#define PACMOD2_COUNTER_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMOD3_CONFIG_FAULT signal

#ifndef PACMOD3_CONFIG_FAULT_WATCHDOG_RPT_FALSE
#define PACMOD3_CONFIG_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMOD3_CONFIG_FAULT_WATCHDOG_RPT_TRUE
#define PACMOD3_CONFIG_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMOD3_CAN_TIMEOUT signal

#ifndef PACMOD3_CAN_TIMEOUT_WATCHDOG_RPT_FALSE
#define PACMOD3_CAN_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMOD3_CAN_TIMEOUT_WATCHDOG_RPT_TRUE
#define PACMOD3_CAN_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMOD3_COUNTER_FAULT signal

#ifndef PACMOD3_COUNTER_FAULT_WATCHDOG_RPT_FALSE
#define PACMOD3_COUNTER_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMOD3_COUNTER_FAULT_WATCHDOG_RPT_TRUE
#define PACMOD3_COUNTER_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI1_RPT_TIMEOUT signal

#ifndef PACMINI1_RPT_TIMEOUT_WATCHDOG_RPT_FALSE
#define PACMINI1_RPT_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI1_RPT_TIMEOUT_WATCHDOG_RPT_TRUE
#define PACMINI1_RPT_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI1_CONFIG_FAULT signal

#ifndef PACMINI1_CONFIG_FAULT_WATCHDOG_RPT_FALSE
#define PACMINI1_CONFIG_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI1_CONFIG_FAULT_WATCHDOG_RPT_TRUE
#define PACMINI1_CONFIG_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI1_CAN_TIMEOUT signal

#ifndef PACMINI1_CAN_TIMEOUT_WATCHDOG_RPT_FALSE
#define PACMINI1_CAN_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI1_CAN_TIMEOUT_WATCHDOG_RPT_TRUE
#define PACMINI1_CAN_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI1_COUNTER_FAULT signal

#ifndef PACMINI1_COUNTER_FAULT_WATCHDOG_RPT_FALSE
#define PACMINI1_COUNTER_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI1_COUNTER_FAULT_WATCHDOG_RPT_TRUE
#define PACMINI1_COUNTER_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI2_RPT_TIMEOUT signal

#ifndef PACMINI2_RPT_TIMEOUT_WATCHDOG_RPT_FALSE
#define PACMINI2_RPT_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI2_RPT_TIMEOUT_WATCHDOG_RPT_TRUE
#define PACMINI2_RPT_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI2_CONFIG_FAULT signal

#ifndef PACMINI2_CONFIG_FAULT_WATCHDOG_RPT_FALSE
#define PACMINI2_CONFIG_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI2_CONFIG_FAULT_WATCHDOG_RPT_TRUE
#define PACMINI2_CONFIG_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI2_CAN_TIMEOUT signal

#ifndef PACMINI2_CAN_TIMEOUT_WATCHDOG_RPT_FALSE
#define PACMINI2_CAN_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI2_CAN_TIMEOUT_WATCHDOG_RPT_TRUE
#define PACMINI2_CAN_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI2_COUNTER_FAULT signal

#ifndef PACMINI2_COUNTER_FAULT_WATCHDOG_RPT_FALSE
#define PACMINI2_COUNTER_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI2_COUNTER_FAULT_WATCHDOG_RPT_TRUE
#define PACMINI2_COUNTER_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI3_RPT_TIMEOUT signal

#ifndef PACMINI3_RPT_TIMEOUT_WATCHDOG_RPT_FALSE
#define PACMINI3_RPT_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI3_RPT_TIMEOUT_WATCHDOG_RPT_TRUE
#define PACMINI3_RPT_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI3_CONFIG_FAULT signal

#ifndef PACMINI3_CONFIG_FAULT_WATCHDOG_RPT_FALSE
#define PACMINI3_CONFIG_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI3_CONFIG_FAULT_WATCHDOG_RPT_TRUE
#define PACMINI3_CONFIG_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI3_CAN_TIMEOUT signal

#ifndef PACMINI3_CAN_TIMEOUT_WATCHDOG_RPT_FALSE
#define PACMINI3_CAN_TIMEOUT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI3_CAN_TIMEOUT_WATCHDOG_RPT_TRUE
#define PACMINI3_CAN_TIMEOUT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI3_COUNTER_FAULT signal

#ifndef PACMINI3_COUNTER_FAULT_WATCHDOG_RPT_FALSE
#define PACMINI3_COUNTER_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI3_COUNTER_FAULT_WATCHDOG_RPT_TRUE
#define PACMINI3_COUNTER_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMOD_SYSTEM_PRESENT_FAULT signal

#ifndef PACMOD_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_FALSE
#define PACMOD_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMOD_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_TRUE
#define PACMOD_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @PACMINI_SYSTEM_PRESENT_FAULT signal

#ifndef PACMINI_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_FALSE
#define PACMINI_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef PACMINI_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_TRUE
#define PACMINI_SYSTEM_PRESENT_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


// Value tables for @GLOBAL_INT_POWER_SUPPLY_FAULT signal

#ifndef GLOBAL_INT_POWER_SUPPLY_FAULT_WATCHDOG_RPT_FALSE
#define GLOBAL_INT_POWER_SUPPLY_FAULT_WATCHDOG_RPT_FALSE (0)
#endif

#ifndef GLOBAL_INT_POWER_SUPPLY_FAULT_WATCHDOG_RPT_TRUE
#define GLOBAL_INT_POWER_SUPPLY_FAULT_WATCHDOG_RPT_TRUE (1)
#endif


typedef struct
{
#ifdef PACMOD13_USE_BITS_SIGNAL

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_ENABLE_FLAG : 1;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_OVERRIDE_ACTIVE : 1;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_COMMAND_TIMEOUT_ERROR : 1;      //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_PACMOD_SUBSYSTEM_TIMEOUT : 1;   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_VEHICLE_CAN_TIMEOUT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_PACMOD_SYS_FAULT_ACTIVE : 1;    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_CONFIG_FAULT_ACTIVE : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_TIMEOUT : 1;                    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_ENABLED : 1;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_OVERRIDE_ACTIVE : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_COMMAND_OUTPUT_FAULT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_INPUT_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_OUTPUT_REPORTED_FAULT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_PACMOD_FAULT : 1;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_VEHICLE_FAULT : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_TIMEOUT : 1;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_ENABLED : 1;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_OVERRIDE_ACTIVE : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_COMMAND_OUTPUT_FAULT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_INPUT_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_OUTPUT_REPORTED_FAULT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_PACMOD_FAULT : 1;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_VEHICLE_FAULT : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_TIMEOUT : 1;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_ENABLED : 1;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_OVERRIDE_ACTIVE : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_COMMAND_OUTPUT_FAULT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_INPUT_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_OUTPUT_REPORTED_FAULT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_PACMOD_FAULT : 1;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_VEHICLE_FAULT : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_TIMEOUT : 1;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_ENABLED : 1;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_OVERRIDE_ACTIVE : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_COMMAND_OUTPUT_FAULT : 1;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_INPUT_OUTPUT_FAULT : 1;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_OUTPUT_REPORTED_FAULT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_PACMOD_FAULT : 1;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_VEHICLE_FAULT : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_TIMEOUT : 1;                     //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_CONFIG_FAULT : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_CAN_TIMEOUT : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_COUNTER_FAULT : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_CONFIG_FAULT : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_CAN_TIMEOUT : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_COUNTER_FAULT : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_CONFIG_FAULT : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_CAN_TIMEOUT : 1;               //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_COUNTER_FAULT : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_RPT_TIMEOUT : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_CONFIG_FAULT : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_CAN_TIMEOUT : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_COUNTER_FAULT : 1;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_RPT_TIMEOUT : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_CONFIG_FAULT : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_CAN_TIMEOUT : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_COUNTER_FAULT : 1;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_RPT_TIMEOUT : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_CONFIG_FAULT : 1;             //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_CAN_TIMEOUT : 1;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_COUNTER_FAULT : 1;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SYSTEM_PRESENT_FAULT : 1;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI_SYSTEM_PRESENT_FAULT : 1;      //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_INT_POWER_SUPPLY_FAULT : 1;     //      Bits= 1

#else

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_ENABLE_FLAG;                    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_OVERRIDE_ACTIVE;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_COMMAND_TIMEOUT_ERROR;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_PACMOD_SUBSYSTEM_TIMEOUT;       //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_VEHICLE_CAN_TIMEOUT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_PACMOD_SYS_FAULT_ACTIVE;        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_CONFIG_FAULT_ACTIVE;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_TIMEOUT;                        //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_ENABLED;                         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_OVERRIDE_ACTIVE;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_COMMAND_OUTPUT_FAULT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_INPUT_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_OUTPUT_REPORTED_FAULT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_PACMOD_FAULT;                    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_VEHICLE_FAULT;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t ACCEL_TIMEOUT;                         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_ENABLED;                         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_OVERRIDE_ACTIVE;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_COMMAND_OUTPUT_FAULT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_INPUT_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_OUTPUT_REPORTED_FAULT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_PACMOD_FAULT;                    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_VEHICLE_FAULT;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t BRAKE_TIMEOUT;                         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_ENABLED;                         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_OVERRIDE_ACTIVE;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_COMMAND_OUTPUT_FAULT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_INPUT_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_OUTPUT_REPORTED_FAULT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_PACMOD_FAULT;                    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_VEHICLE_FAULT;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t SHIFT_TIMEOUT;                         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_ENABLED;                         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_OVERRIDE_ACTIVE;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_COMMAND_OUTPUT_FAULT;            //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_INPUT_OUTPUT_FAULT;              //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_OUTPUT_REPORTED_FAULT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_PACMOD_FAULT;                    //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_VEHICLE_FAULT;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t STEER_TIMEOUT;                         //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_CONFIG_FAULT;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_CAN_TIMEOUT;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD1_COUNTER_FAULT;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_CONFIG_FAULT;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_CAN_TIMEOUT;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD2_COUNTER_FAULT;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_CONFIG_FAULT;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_CAN_TIMEOUT;                   //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD3_COUNTER_FAULT;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_RPT_TIMEOUT;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_CONFIG_FAULT;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_CAN_TIMEOUT;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI1_COUNTER_FAULT;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_RPT_TIMEOUT;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_CONFIG_FAULT;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_CAN_TIMEOUT;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI2_COUNTER_FAULT;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_RPT_TIMEOUT;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_CONFIG_FAULT;                 //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_CAN_TIMEOUT;                  //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI3_COUNTER_FAULT;                //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMOD_SYSTEM_PRESENT_FAULT;           //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t PACMINI_SYSTEM_PRESENT_FAULT;          //      Bits= 1

  //  0 : "FALSE"
  //  1 : "TRUE"
  uint8_t GLOBAL_INT_POWER_SUPPLY_FAULT;         //      Bits= 1

#endif // PACMOD13_USE_BITS_SIGNAL

#ifdef PACMOD13_USE_DIAG_MONITORS

  FrameMonitor_t mon1;

#endif // PACMOD13_USE_DIAG_MONITORS

} WATCHDOG_RPT_t;

// Function signatures

uint32_t Unpack_GLOBAL_RPT_pacmod13(GLOBAL_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_GLOBAL_RPT_pacmod13(GLOBAL_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_GLOBAL_RPT_pacmod13(GLOBAL_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_GLOBAL_RPT_2_pacmod13(GLOBAL_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_GLOBAL_RPT_2_pacmod13(GLOBAL_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_GLOBAL_RPT_2_pacmod13(GLOBAL_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_COMPONENT_RPT_00_pacmod13(COMPONENT_RPT_00_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_COMPONENT_RPT_00_pacmod13(COMPONENT_RPT_00_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_COMPONENT_RPT_00_pacmod13(COMPONENT_RPT_00_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_COMPONENT_RPT_01_pacmod13(COMPONENT_RPT_01_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_COMPONENT_RPT_01_pacmod13(COMPONENT_RPT_01_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_COMPONENT_RPT_01_pacmod13(COMPONENT_RPT_01_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_COMPONENT_RPT_02_pacmod13(COMPONENT_RPT_02_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_COMPONENT_RPT_02_pacmod13(COMPONENT_RPT_02_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_COMPONENT_RPT_02_pacmod13(COMPONENT_RPT_02_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_COMPONENT_RPT_03_pacmod13(COMPONENT_RPT_03_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_COMPONENT_RPT_03_pacmod13(COMPONENT_RPT_03_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_COMPONENT_RPT_03_pacmod13(COMPONENT_RPT_03_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_COMPONENT_RPT_04_pacmod13(COMPONENT_RPT_04_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_COMPONENT_RPT_04_pacmod13(COMPONENT_RPT_04_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_COMPONENT_RPT_04_pacmod13(COMPONENT_RPT_04_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_USER_PC_HEALTH_RPT_00_pacmod13(USER_PC_HEALTH_RPT_00_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_USER_PC_HEALTH_RPT_00_pacmod13(USER_PC_HEALTH_RPT_00_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_USER_PC_HEALTH_RPT_00_pacmod13(USER_PC_HEALTH_RPT_00_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_USER_PC_HEALTH_RPT_01_pacmod13(USER_PC_HEALTH_RPT_01_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_USER_PC_HEALTH_RPT_01_pacmod13(USER_PC_HEALTH_RPT_01_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_USER_PC_HEALTH_RPT_01_pacmod13(USER_PC_HEALTH_RPT_01_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_COMPONENT_RPT_05_pacmod13(COMPONENT_RPT_05_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_COMPONENT_RPT_05_pacmod13(COMPONENT_RPT_05_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_COMPONENT_RPT_05_pacmod13(COMPONENT_RPT_05_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SAFETY_FUNC_RPT_pacmod13(SAFETY_FUNC_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SAFETY_FUNC_RPT_pacmod13(SAFETY_FUNC_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SAFETY_FUNC_RPT_pacmod13(SAFETY_FUNC_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SAFETY_BRAKE_RPT_pacmod13(SAFETY_BRAKE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SAFETY_BRAKE_RPT_pacmod13(SAFETY_BRAKE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SAFETY_BRAKE_RPT_pacmod13(SAFETY_BRAKE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_VEHICLE_FAULT_RPT_pacmod13(VEHICLE_FAULT_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_VEHICLE_FAULT_RPT_pacmod13(VEHICLE_FAULT_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_VEHICLE_FAULT_RPT_pacmod13(VEHICLE_FAULT_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SAFETY_FUNC_RPT_2_pacmod13(SAFETY_FUNC_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SAFETY_FUNC_RPT_2_pacmod13(SAFETY_FUNC_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SAFETY_FUNC_RPT_2_pacmod13(SAFETY_FUNC_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SAFETY_RESPONSE_RPT_pacmod13(SAFETY_RESPONSE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SAFETY_RESPONSE_RPT_pacmod13(SAFETY_RESPONSE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SAFETY_RESPONSE_RPT_pacmod13(SAFETY_RESPONSE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_GLOBAL_CMD_pacmod13(GLOBAL_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_GLOBAL_CMD_pacmod13(GLOBAL_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_GLOBAL_CMD_pacmod13(GLOBAL_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SUPERVISORY_CTRL_pacmod13(SUPERVISORY_CTRL_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SUPERVISORY_CTRL_pacmod13(SUPERVISORY_CTRL_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SUPERVISORY_CTRL_pacmod13(SUPERVISORY_CTRL_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SAFETY_FUNC_CMD_pacmod13(SAFETY_FUNC_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SAFETY_FUNC_CMD_pacmod13(SAFETY_FUNC_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SAFETY_FUNC_CMD_pacmod13(SAFETY_FUNC_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SAFETY_BRAKE_CMD_pacmod13(SAFETY_BRAKE_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SAFETY_BRAKE_CMD_pacmod13(SAFETY_BRAKE_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SAFETY_BRAKE_CMD_pacmod13(SAFETY_BRAKE_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ACCEL_CMD_pacmod13(ACCEL_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ACCEL_CMD_pacmod13(ACCEL_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ACCEL_CMD_pacmod13(ACCEL_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_CMD_pacmod13(BRAKE_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_CMD_pacmod13(BRAKE_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_CMD_pacmod13(BRAKE_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_CRUISE_CONTROL_BUTTONS_CMD_pacmod13(CRUISE_CONTROL_BUTTONS_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_CRUISE_CONTROL_BUTTONS_CMD_pacmod13(CRUISE_CONTROL_BUTTONS_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_CRUISE_CONTROL_BUTTONS_CMD_pacmod13(CRUISE_CONTROL_BUTTONS_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_DASH_CONTROLS_LEFT_CMD_pacmod13(DASH_CONTROLS_LEFT_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_DASH_CONTROLS_LEFT_CMD_pacmod13(DASH_CONTROLS_LEFT_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_DASH_CONTROLS_LEFT_CMD_pacmod13(DASH_CONTROLS_LEFT_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_DASH_CONTROLS_RIGHT_CMD_pacmod13(DASH_CONTROLS_RIGHT_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_DASH_CONTROLS_RIGHT_CMD_pacmod13(DASH_CONTROLS_RIGHT_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_DASH_CONTROLS_RIGHT_CMD_pacmod13(DASH_CONTROLS_RIGHT_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_HAZARD_LIGHTS_CMD_pacmod13(HAZARD_LIGHTS_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_HAZARD_LIGHTS_CMD_pacmod13(HAZARD_LIGHTS_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_HAZARD_LIGHTS_CMD_pacmod13(HAZARD_LIGHTS_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_HEADLIGHT_CMD_pacmod13(HEADLIGHT_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_HEADLIGHT_CMD_pacmod13(HEADLIGHT_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_HEADLIGHT_CMD_pacmod13(HEADLIGHT_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_HORN_CMD_pacmod13(HORN_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_HORN_CMD_pacmod13(HORN_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_HORN_CMD_pacmod13(HORN_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_MEDIA_CONTROLS_CMD_pacmod13(MEDIA_CONTROLS_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_MEDIA_CONTROLS_CMD_pacmod13(MEDIA_CONTROLS_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_MEDIA_CONTROLS_CMD_pacmod13(MEDIA_CONTROLS_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_PARKING_BRAKE_CMD_pacmod13(PARKING_BRAKE_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_PARKING_BRAKE_CMD_pacmod13(PARKING_BRAKE_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_PARKING_BRAKE_CMD_pacmod13(PARKING_BRAKE_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SHIFT_CMD_pacmod13(SHIFT_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SHIFT_CMD_pacmod13(SHIFT_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SHIFT_CMD_pacmod13(SHIFT_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_STEERING_CMD_pacmod13(STEERING_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_STEERING_CMD_pacmod13(STEERING_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_STEERING_CMD_pacmod13(STEERING_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TURN_CMD_pacmod13(TURN_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TURN_CMD_pacmod13(TURN_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TURN_CMD_pacmod13(TURN_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_WIPER_CMD_pacmod13(WIPER_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_WIPER_CMD_pacmod13(WIPER_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_WIPER_CMD_pacmod13(WIPER_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SPRAYER_CMD_pacmod13(SPRAYER_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SPRAYER_CMD_pacmod13(SPRAYER_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SPRAYER_CMD_pacmod13(SPRAYER_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_DECEL_CMD_pacmod13(BRAKE_DECEL_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_DECEL_CMD_pacmod13(BRAKE_DECEL_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_DECEL_CMD_pacmod13(BRAKE_DECEL_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_REAR_PASS_DOOR_CMD_pacmod13(REAR_PASS_DOOR_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_REAR_PASS_DOOR_CMD_pacmod13(REAR_PASS_DOOR_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_REAR_PASS_DOOR_CMD_pacmod13(REAR_PASS_DOOR_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ENGINE_BRAKE_CMD_pacmod13(ENGINE_BRAKE_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ENGINE_BRAKE_CMD_pacmod13(ENGINE_BRAKE_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ENGINE_BRAKE_CMD_pacmod13(ENGINE_BRAKE_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_EXHAUST_BRAKE_CMD_pacmod13(EXHAUST_BRAKE_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_EXHAUST_BRAKE_CMD_pacmod13(EXHAUST_BRAKE_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_EXHAUST_BRAKE_CMD_pacmod13(EXHAUST_BRAKE_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_MARKER_LAMP_CMD_pacmod13(MARKER_LAMP_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_MARKER_LAMP_CMD_pacmod13(MARKER_LAMP_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_MARKER_LAMP_CMD_pacmod13(MARKER_LAMP_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_CABIN_TEMP_CMD_pacmod13(CABIN_TEMP_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_CABIN_TEMP_CMD_pacmod13(CABIN_TEMP_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_CABIN_TEMP_CMD_pacmod13(CABIN_TEMP_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_CABIN_FAN_SPEED_CMD_pacmod13(CABIN_FAN_SPEED_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_CABIN_FAN_SPEED_CMD_pacmod13(CABIN_FAN_SPEED_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_CABIN_FAN_SPEED_CMD_pacmod13(CABIN_FAN_SPEED_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_CABIN_CLIMATE_CMD_pacmod13(CABIN_CLIMATE_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_CABIN_CLIMATE_CMD_pacmod13(CABIN_CLIMATE_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_CABIN_CLIMATE_CMD_pacmod13(CABIN_CLIMATE_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIPPER_BODY_CMD_00_pacmod13(TIPPER_BODY_CMD_00_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIPPER_BODY_CMD_00_pacmod13(TIPPER_BODY_CMD_00_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIPPER_BODY_CMD_00_pacmod13(TIPPER_BODY_CMD_00_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_POWER_TAKE_OFF_CMD_pacmod13(POWER_TAKE_OFF_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_POWER_TAKE_OFF_CMD_pacmod13(POWER_TAKE_OFF_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_POWER_TAKE_OFF_CMD_pacmod13(POWER_TAKE_OFF_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_BRAKE_CMD_pacmod13(TRAILER_BRAKE_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_BRAKE_CMD_pacmod13(TRAILER_BRAKE_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_BRAKE_CMD_pacmod13(TRAILER_BRAKE_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_AIR_SUPPLY_CMD_pacmod13(TRAILER_AIR_SUPPLY_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_AIR_SUPPLY_CMD_pacmod13(TRAILER_AIR_SUPPLY_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_AIR_SUPPLY_CMD_pacmod13(TRAILER_AIR_SUPPLY_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ENGINE_CMD_pacmod13(ENGINE_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ENGINE_CMD_pacmod13(ENGINE_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ENGINE_CMD_pacmod13(ENGINE_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIPPER_BODY_CMD_01_pacmod13(TIPPER_BODY_CMD_01_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIPPER_BODY_CMD_01_pacmod13(TIPPER_BODY_CMD_01_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIPPER_BODY_CMD_01_pacmod13(TIPPER_BODY_CMD_01_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIPPER_BODY_CMD_02_pacmod13(TIPPER_BODY_CMD_02_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIPPER_BODY_CMD_02_pacmod13(TIPPER_BODY_CMD_02_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIPPER_BODY_CMD_02_pacmod13(TIPPER_BODY_CMD_02_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_DIFFERENTIAL_LOCKS_CMD_pacmod13(DIFFERENTIAL_LOCKS_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_DIFFERENTIAL_LOCKS_CMD_pacmod13(DIFFERENTIAL_LOCKS_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_DIFFERENTIAL_LOCKS_CMD_pacmod13(DIFFERENTIAL_LOCKS_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ACCEL_RPT_pacmod13(ACCEL_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ACCEL_RPT_pacmod13(ACCEL_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ACCEL_RPT_pacmod13(ACCEL_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ACCEL_CMD_LIMIT_RPT_pacmod13(ACCEL_CMD_LIMIT_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ACCEL_CMD_LIMIT_RPT_pacmod13(ACCEL_CMD_LIMIT_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ACCEL_CMD_LIMIT_RPT_pacmod13(ACCEL_CMD_LIMIT_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_RPT_pacmod13(BRAKE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_RPT_pacmod13(BRAKE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_RPT_pacmod13(BRAKE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_CMD_LIMIT_RPT_pacmod13(BRAKE_CMD_LIMIT_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_CMD_LIMIT_RPT_pacmod13(BRAKE_CMD_LIMIT_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_CMD_LIMIT_RPT_pacmod13(BRAKE_CMD_LIMIT_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_RPT_2_pacmod13(BRAKE_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_RPT_2_pacmod13(BRAKE_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_RPT_2_pacmod13(BRAKE_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_CRUISE_CONTROL_BUTTONS_RPT_pacmod13(CRUISE_CONTROL_BUTTONS_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_CRUISE_CONTROL_BUTTONS_RPT_pacmod13(CRUISE_CONTROL_BUTTONS_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_CRUISE_CONTROL_BUTTONS_RPT_pacmod13(CRUISE_CONTROL_BUTTONS_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_DASH_CONTROLS_LEFT_RPT_pacmod13(DASH_CONTROLS_LEFT_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_DASH_CONTROLS_LEFT_RPT_pacmod13(DASH_CONTROLS_LEFT_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_DASH_CONTROLS_LEFT_RPT_pacmod13(DASH_CONTROLS_LEFT_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_DASH_CONTROLS_RIGHT_RPT_pacmod13(DASH_CONTROLS_RIGHT_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_DASH_CONTROLS_RIGHT_RPT_pacmod13(DASH_CONTROLS_RIGHT_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_DASH_CONTROLS_RIGHT_RPT_pacmod13(DASH_CONTROLS_RIGHT_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_HAZARD_LIGHTS_RPT_pacmod13(HAZARD_LIGHTS_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_HAZARD_LIGHTS_RPT_pacmod13(HAZARD_LIGHTS_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_HAZARD_LIGHTS_RPT_pacmod13(HAZARD_LIGHTS_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_HEADLIGHT_RPT_pacmod13(HEADLIGHT_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_HEADLIGHT_RPT_pacmod13(HEADLIGHT_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_HEADLIGHT_RPT_pacmod13(HEADLIGHT_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_HORN_RPT_pacmod13(HORN_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_HORN_RPT_pacmod13(HORN_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_HORN_RPT_pacmod13(HORN_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_MEDIA_CONTROLS_RPT_pacmod13(MEDIA_CONTROLS_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_MEDIA_CONTROLS_RPT_pacmod13(MEDIA_CONTROLS_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_MEDIA_CONTROLS_RPT_pacmod13(MEDIA_CONTROLS_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_PARKING_BRAKE_RPT_pacmod13(PARKING_BRAKE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_PARKING_BRAKE_RPT_pacmod13(PARKING_BRAKE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_PARKING_BRAKE_RPT_pacmod13(PARKING_BRAKE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_PARKING_BRAKE_RPT_2_pacmod13(PARKING_BRAKE_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_PARKING_BRAKE_RPT_2_pacmod13(PARKING_BRAKE_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_PARKING_BRAKE_RPT_2_pacmod13(PARKING_BRAKE_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SHIFT_RPT_pacmod13(SHIFT_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SHIFT_RPT_pacmod13(SHIFT_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SHIFT_RPT_pacmod13(SHIFT_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_STEERING_RPT_pacmod13(STEERING_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_STEERING_RPT_pacmod13(STEERING_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_STEERING_RPT_pacmod13(STEERING_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_STEERING_CMD_LIMIT_RPT_pacmod13(STEERING_CMD_LIMIT_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_STEERING_CMD_LIMIT_RPT_pacmod13(STEERING_CMD_LIMIT_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_STEERING_CMD_LIMIT_RPT_pacmod13(STEERING_CMD_LIMIT_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_STEERING_RPT_2_pacmod13(STEERING_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_STEERING_RPT_2_pacmod13(STEERING_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_STEERING_RPT_2_pacmod13(STEERING_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TURN_RPT_pacmod13(TURN_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TURN_RPT_pacmod13(TURN_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TURN_RPT_pacmod13(TURN_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_WIPER_RPT_pacmod13(WIPER_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_WIPER_RPT_pacmod13(WIPER_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_WIPER_RPT_pacmod13(WIPER_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SPRAYER_RPT_pacmod13(SPRAYER_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SPRAYER_RPT_pacmod13(SPRAYER_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SPRAYER_RPT_pacmod13(SPRAYER_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_DECEL_RPT_pacmod13(BRAKE_DECEL_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_DECEL_RPT_pacmod13(BRAKE_DECEL_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_DECEL_RPT_pacmod13(BRAKE_DECEL_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_REAR_PASS_DOOR_RPT_pacmod13(REAR_PASS_DOOR_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_REAR_PASS_DOOR_RPT_pacmod13(REAR_PASS_DOOR_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_REAR_PASS_DOOR_RPT_pacmod13(REAR_PASS_DOOR_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ENGINE_BRAKE_RPT_pacmod13(ENGINE_BRAKE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ENGINE_BRAKE_RPT_pacmod13(ENGINE_BRAKE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ENGINE_BRAKE_RPT_pacmod13(ENGINE_BRAKE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_EXHAUST_BRAKE_RPT_pacmod13(EXHAUST_BRAKE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_EXHAUST_BRAKE_RPT_pacmod13(EXHAUST_BRAKE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_EXHAUST_BRAKE_RPT_pacmod13(EXHAUST_BRAKE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_MARKER_LAMP_RPT_pacmod13(MARKER_LAMP_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_MARKER_LAMP_RPT_pacmod13(MARKER_LAMP_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_MARKER_LAMP_RPT_pacmod13(MARKER_LAMP_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_CABIN_TEMP_RPT_pacmod13(CABIN_TEMP_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_CABIN_TEMP_RPT_pacmod13(CABIN_TEMP_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_CABIN_TEMP_RPT_pacmod13(CABIN_TEMP_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_CABIN_FAN_SPEED_RPT_pacmod13(CABIN_FAN_SPEED_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_CABIN_FAN_SPEED_RPT_pacmod13(CABIN_FAN_SPEED_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_CABIN_FAN_SPEED_RPT_pacmod13(CABIN_FAN_SPEED_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_CABIN_CLIMATE_RPT_pacmod13(CABIN_CLIMATE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_CABIN_CLIMATE_RPT_pacmod13(CABIN_CLIMATE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_CABIN_CLIMATE_RPT_pacmod13(CABIN_CLIMATE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIPPER_BODY_RPT_00_pacmod13(TIPPER_BODY_RPT_00_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIPPER_BODY_RPT_00_pacmod13(TIPPER_BODY_RPT_00_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIPPER_BODY_RPT_00_pacmod13(TIPPER_BODY_RPT_00_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_POWER_TAKE_OFF_RPT_pacmod13(POWER_TAKE_OFF_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_POWER_TAKE_OFF_RPT_pacmod13(POWER_TAKE_OFF_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_POWER_TAKE_OFF_RPT_pacmod13(POWER_TAKE_OFF_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_BRAKE_RPT_pacmod13(TRAILER_BRAKE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_BRAKE_RPT_pacmod13(TRAILER_BRAKE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_BRAKE_RPT_pacmod13(TRAILER_BRAKE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_AIR_SUPPLY_RPT_pacmod13(TRAILER_AIR_SUPPLY_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_AIR_SUPPLY_RPT_pacmod13(TRAILER_AIR_SUPPLY_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_AIR_SUPPLY_RPT_pacmod13(TRAILER_AIR_SUPPLY_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_AIR_SUPPLY_RPT_2_pacmod13(TRAILER_AIR_SUPPLY_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_AIR_SUPPLY_RPT_2_pacmod13(TRAILER_AIR_SUPPLY_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_AIR_SUPPLY_RPT_2_pacmod13(TRAILER_AIR_SUPPLY_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ENGINE_RPT_pacmod13(ENGINE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ENGINE_RPT_pacmod13(ENGINE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ENGINE_RPT_pacmod13(ENGINE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIPPER_BODY_RPT_01_pacmod13(TIPPER_BODY_RPT_01_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIPPER_BODY_RPT_01_pacmod13(TIPPER_BODY_RPT_01_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIPPER_BODY_RPT_01_pacmod13(TIPPER_BODY_RPT_01_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIPPER_BODY_RPT_02_pacmod13(TIPPER_BODY_RPT_02_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIPPER_BODY_RPT_02_pacmod13(TIPPER_BODY_RPT_02_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIPPER_BODY_RPT_02_pacmod13(TIPPER_BODY_RPT_02_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_DIFFERENTIAL_LOCKS_RPT_pacmod13(DIFFERENTIAL_LOCKS_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_DIFFERENTIAL_LOCKS_RPT_pacmod13(DIFFERENTIAL_LOCKS_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_DIFFERENTIAL_LOCKS_RPT_pacmod13(DIFFERENTIAL_LOCKS_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ACCEL_AUX_RPT_pacmod13(ACCEL_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ACCEL_AUX_RPT_pacmod13(ACCEL_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ACCEL_AUX_RPT_pacmod13(ACCEL_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_AUX_RPT_pacmod13(BRAKE_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_AUX_RPT_pacmod13(BRAKE_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_AUX_RPT_pacmod13(BRAKE_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_AUX_RPT_2_pacmod13(BRAKE_AUX_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_AUX_RPT_2_pacmod13(BRAKE_AUX_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_AUX_RPT_2_pacmod13(BRAKE_AUX_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_HEADLIGHT_AUX_RPT_pacmod13(HEADLIGHT_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_HEADLIGHT_AUX_RPT_pacmod13(HEADLIGHT_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_HEADLIGHT_AUX_RPT_pacmod13(HEADLIGHT_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_PARKING_BRAKE_AUX_RPT_pacmod13(PARKING_BRAKE_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_PARKING_BRAKE_AUX_RPT_pacmod13(PARKING_BRAKE_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_PARKING_BRAKE_AUX_RPT_pacmod13(PARKING_BRAKE_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SHIFT_AUX_RPT_pacmod13(SHIFT_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SHIFT_AUX_RPT_pacmod13(SHIFT_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SHIFT_AUX_RPT_pacmod13(SHIFT_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_STEERING_AUX_RPT_pacmod13(STEERING_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_STEERING_AUX_RPT_pacmod13(STEERING_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_STEERING_AUX_RPT_pacmod13(STEERING_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_STEERING_AUX_RPT_2_pacmod13(STEERING_AUX_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_STEERING_AUX_RPT_2_pacmod13(STEERING_AUX_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_STEERING_AUX_RPT_2_pacmod13(STEERING_AUX_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TURN_AUX_RPT_pacmod13(TURN_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TURN_AUX_RPT_pacmod13(TURN_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TURN_AUX_RPT_pacmod13(TURN_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_WIPER_AUX_RPT_pacmod13(WIPER_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_WIPER_AUX_RPT_pacmod13(WIPER_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_WIPER_AUX_RPT_pacmod13(WIPER_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_DECEL_AUX_RPT_pacmod13(BRAKE_DECEL_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_DECEL_AUX_RPT_pacmod13(BRAKE_DECEL_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_DECEL_AUX_RPT_pacmod13(BRAKE_DECEL_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ENGINE_BRAKE_AUX_RPT_pacmod13(ENGINE_BRAKE_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ENGINE_BRAKE_AUX_RPT_pacmod13(ENGINE_BRAKE_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ENGINE_BRAKE_AUX_RPT_pacmod13(ENGINE_BRAKE_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIPPER_BODY_AUX_RPT_00_pacmod13(TIPPER_BODY_AUX_RPT_00_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIPPER_BODY_AUX_RPT_00_pacmod13(TIPPER_BODY_AUX_RPT_00_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIPPER_BODY_AUX_RPT_00_pacmod13(TIPPER_BODY_AUX_RPT_00_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIPPER_BODY_AUX_RPT_01_pacmod13(TIPPER_BODY_AUX_RPT_01_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIPPER_BODY_AUX_RPT_01_pacmod13(TIPPER_BODY_AUX_RPT_01_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIPPER_BODY_AUX_RPT_01_pacmod13(TIPPER_BODY_AUX_RPT_01_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIPPER_BODY_AUX_RPT_02_pacmod13(TIPPER_BODY_AUX_RPT_02_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIPPER_BODY_AUX_RPT_02_pacmod13(TIPPER_BODY_AUX_RPT_02_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIPPER_BODY_AUX_RPT_02_pacmod13(TIPPER_BODY_AUX_RPT_02_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_VEHICLE_SPEED_RPT_pacmod13(VEHICLE_SPEED_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_VEHICLE_SPEED_RPT_pacmod13(VEHICLE_SPEED_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_VEHICLE_SPEED_RPT_pacmod13(VEHICLE_SPEED_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_MOTOR_RPT_1_pacmod13(BRAKE_MOTOR_RPT_1_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_MOTOR_RPT_1_pacmod13(BRAKE_MOTOR_RPT_1_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_MOTOR_RPT_1_pacmod13(BRAKE_MOTOR_RPT_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_MOTOR_RPT_2_pacmod13(BRAKE_MOTOR_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_MOTOR_RPT_2_pacmod13(BRAKE_MOTOR_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_MOTOR_RPT_2_pacmod13(BRAKE_MOTOR_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_MOTOR_RPT_3_pacmod13(BRAKE_MOTOR_RPT_3_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_MOTOR_RPT_3_pacmod13(BRAKE_MOTOR_RPT_3_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_MOTOR_RPT_3_pacmod13(BRAKE_MOTOR_RPT_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_STEERING_MOTOR_RPT_1_pacmod13(STEERING_MOTOR_RPT_1_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_STEERING_MOTOR_RPT_1_pacmod13(STEERING_MOTOR_RPT_1_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_STEERING_MOTOR_RPT_1_pacmod13(STEERING_MOTOR_RPT_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_STEERING_MOTOR_RPT_2_pacmod13(STEERING_MOTOR_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_STEERING_MOTOR_RPT_2_pacmod13(STEERING_MOTOR_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_STEERING_MOTOR_RPT_2_pacmod13(STEERING_MOTOR_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_STEERING_MOTOR_RPT_3_pacmod13(STEERING_MOTOR_RPT_3_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_STEERING_MOTOR_RPT_3_pacmod13(STEERING_MOTOR_RPT_3_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_STEERING_MOTOR_RPT_3_pacmod13(STEERING_MOTOR_RPT_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_WHEEL_SPEED_RPT_pacmod13(WHEEL_SPEED_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_WHEEL_SPEED_RPT_pacmod13(WHEEL_SPEED_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_WHEEL_SPEED_RPT_pacmod13(WHEEL_SPEED_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SOFTWARE_VERSION_RPT_00_pacmod13(SOFTWARE_VERSION_RPT_00_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SOFTWARE_VERSION_RPT_00_pacmod13(SOFTWARE_VERSION_RPT_00_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SOFTWARE_VERSION_RPT_00_pacmod13(SOFTWARE_VERSION_RPT_00_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SOFTWARE_VERSION_RPT_01_pacmod13(SOFTWARE_VERSION_RPT_01_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SOFTWARE_VERSION_RPT_01_pacmod13(SOFTWARE_VERSION_RPT_01_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SOFTWARE_VERSION_RPT_01_pacmod13(SOFTWARE_VERSION_RPT_01_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SOFTWARE_VERSION_RPT_02_pacmod13(SOFTWARE_VERSION_RPT_02_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SOFTWARE_VERSION_RPT_02_pacmod13(SOFTWARE_VERSION_RPT_02_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SOFTWARE_VERSION_RPT_02_pacmod13(SOFTWARE_VERSION_RPT_02_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SOFTWARE_VERSION_RPT_03_pacmod13(SOFTWARE_VERSION_RPT_03_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SOFTWARE_VERSION_RPT_03_pacmod13(SOFTWARE_VERSION_RPT_03_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SOFTWARE_VERSION_RPT_03_pacmod13(SOFTWARE_VERSION_RPT_03_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SOFTWARE_VERSION_RPT_04_pacmod13(SOFTWARE_VERSION_RPT_04_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SOFTWARE_VERSION_RPT_04_pacmod13(SOFTWARE_VERSION_RPT_04_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SOFTWARE_VERSION_RPT_04_pacmod13(SOFTWARE_VERSION_RPT_04_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_YAW_RATE_RPT_pacmod13(YAW_RATE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_YAW_RATE_RPT_pacmod13(YAW_RATE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_YAW_RATE_RPT_pacmod13(YAW_RATE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_LAT_LON_HEADING_RPT_pacmod13(LAT_LON_HEADING_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_LAT_LON_HEADING_RPT_pacmod13(LAT_LON_HEADING_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_LAT_LON_HEADING_RPT_pacmod13(LAT_LON_HEADING_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_DATE_TIME_RPT_pacmod13(DATE_TIME_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_DATE_TIME_RPT_pacmod13(DATE_TIME_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_DATE_TIME_RPT_pacmod13(DATE_TIME_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ENGINE_AUX_RPT_pacmod13(ENGINE_AUX_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ENGINE_AUX_RPT_pacmod13(ENGINE_AUX_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ENGINE_AUX_RPT_pacmod13(ENGINE_AUX_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_DETECTED_OBJECT_RPT_pacmod13(DETECTED_OBJECT_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_DETECTED_OBJECT_RPT_pacmod13(DETECTED_OBJECT_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_DETECTED_OBJECT_RPT_pacmod13(DETECTED_OBJECT_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_FIRE_SUPPRESSION_RPT_pacmod13(FIRE_SUPPRESSION_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_FIRE_SUPPRESSION_RPT_pacmod13(FIRE_SUPPRESSION_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_FIRE_SUPPRESSION_RPT_pacmod13(FIRE_SUPPRESSION_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_VEH_DYNAMICS_RPT_pacmod13(VEH_DYNAMICS_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_VEH_DYNAMICS_RPT_pacmod13(VEH_DYNAMICS_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_VEH_DYNAMICS_RPT_pacmod13(VEH_DYNAMICS_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_VIN_RPT_pacmod13(VIN_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_VIN_RPT_pacmod13(VIN_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_VIN_RPT_pacmod13(VIN_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_OCCUPANCY_RPT_pacmod13(OCCUPANCY_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_OCCUPANCY_RPT_pacmod13(OCCUPANCY_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_OCCUPANCY_RPT_pacmod13(OCCUPANCY_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_INTERIOR_LIGHTS_RPT_pacmod13(INTERIOR_LIGHTS_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_INTERIOR_LIGHTS_RPT_pacmod13(INTERIOR_LIGHTS_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_INTERIOR_LIGHTS_RPT_pacmod13(INTERIOR_LIGHTS_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_DOOR_RPT_pacmod13(DOOR_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_DOOR_RPT_pacmod13(DOOR_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_DOOR_RPT_pacmod13(DOOR_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_REAR_LIGHTS_RPT_pacmod13(REAR_LIGHTS_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_REAR_LIGHTS_RPT_pacmod13(REAR_LIGHTS_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_REAR_LIGHTS_RPT_pacmod13(REAR_LIGHTS_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_LINEAR_ACCEL_RPT_pacmod13(LINEAR_ACCEL_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_LINEAR_ACCEL_RPT_pacmod13(LINEAR_ACCEL_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_LINEAR_ACCEL_RPT_pacmod13(LINEAR_ACCEL_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ANG_VEL_RPT_pacmod13(ANG_VEL_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ANG_VEL_RPT_pacmod13(ANG_VEL_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ANG_VEL_RPT_pacmod13(ANG_VEL_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_NOTIFICATION_CMD_pacmod13(NOTIFICATION_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_NOTIFICATION_CMD_pacmod13(NOTIFICATION_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_NOTIFICATION_CMD_pacmod13(NOTIFICATION_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ESTOP_RPT_pacmod13(ESTOP_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ESTOP_RPT_pacmod13(ESTOP_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ESTOP_RPT_pacmod13(ESTOP_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_USER_NOTIFICATION_CMD_pacmod13(USER_NOTIFICATION_CMD_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_USER_NOTIFICATION_CMD_pacmod13(USER_NOTIFICATION_CMD_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_USER_NOTIFICATION_CMD_pacmod13(USER_NOTIFICATION_CMD_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIRE_PRESSURE_RPT_pacmod13(TIRE_PRESSURE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIRE_PRESSURE_RPT_pacmod13(TIRE_PRESSURE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIRE_PRESSURE_RPT_pacmod13(TIRE_PRESSURE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_DRIVE_TRAIN_FEATURE_RPT_pacmod13(DRIVE_TRAIN_FEATURE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_DRIVE_TRAIN_FEATURE_RPT_pacmod13(DRIVE_TRAIN_FEATURE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_DRIVE_TRAIN_FEATURE_RPT_pacmod13(DRIVE_TRAIN_FEATURE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SAFETY_FUNC_CRITICAL_STOP_RPT_pacmod13(SAFETY_FUNC_CRITICAL_STOP_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SAFETY_FUNC_CRITICAL_STOP_RPT_pacmod13(SAFETY_FUNC_CRITICAL_STOP_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SAFETY_FUNC_CRITICAL_STOP_RPT_pacmod13(SAFETY_FUNC_CRITICAL_STOP_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_WATCHDOG_RPT_2_pacmod13(WATCHDOG_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_WATCHDOG_RPT_2_pacmod13(WATCHDOG_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_WATCHDOG_RPT_2_pacmod13(WATCHDOG_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_VIN_RPT_2_pacmod13(VIN_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_VIN_RPT_2_pacmod13(VIN_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_VIN_RPT_2_pacmod13(VIN_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_NOTIFICATION_RPT_pacmod13(NOTIFICATION_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_NOTIFICATION_RPT_pacmod13(NOTIFICATION_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_NOTIFICATION_RPT_pacmod13(NOTIFICATION_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_AIR_PRESSURE_RPT_pacmod13(AIR_PRESSURE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_AIR_PRESSURE_RPT_pacmod13(AIR_PRESSURE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_AIR_PRESSURE_RPT_pacmod13(AIR_PRESSURE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ENGINE_AUX_RPT_2_pacmod13(ENGINE_AUX_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ENGINE_AUX_RPT_2_pacmod13(ENGINE_AUX_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ENGINE_AUX_RPT_2_pacmod13(ENGINE_AUX_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_WHEEL_SPEED_RPT_2_pacmod13(WHEEL_SPEED_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_WHEEL_SPEED_RPT_2_pacmod13(WHEEL_SPEED_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_WHEEL_SPEED_RPT_2_pacmod13(WHEEL_SPEED_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ENGINE_LOAD_FACTOR_RPT_pacmod13(ENGINE_LOAD_FACTOR_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ENGINE_LOAD_FACTOR_RPT_pacmod13(ENGINE_LOAD_FACTOR_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ENGINE_LOAD_FACTOR_RPT_pacmod13(ENGINE_LOAD_FACTOR_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_BRAKE_PRESSURE_RPT_00_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_00_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_BRAKE_PRESSURE_RPT_00_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_00_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_BRAKE_PRESSURE_RPT_00_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_00_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_BRAKE_PRESSURE_RPT_01_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_01_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_BRAKE_PRESSURE_RPT_01_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_01_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_BRAKE_PRESSURE_RPT_01_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_01_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_BRAKE_PRESSURE_RPT_02_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_02_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_BRAKE_PRESSURE_RPT_02_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_02_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_BRAKE_PRESSURE_RPT_02_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_02_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_BRAKE_PRESSURE_RPT_03_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_03_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_BRAKE_PRESSURE_RPT_03_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_03_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_BRAKE_PRESSURE_RPT_03_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_03_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_BRAKE_PRESSURE_RPT_04_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_04_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_BRAKE_PRESSURE_RPT_04_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_04_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_BRAKE_PRESSURE_RPT_04_pacmod13(TRAILER_BRAKE_PRESSURE_RPT_04_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_WHEEL_SPEED_RPT_00_pacmod13(TRAILER_WHEEL_SPEED_RPT_00_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_WHEEL_SPEED_RPT_00_pacmod13(TRAILER_WHEEL_SPEED_RPT_00_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_WHEEL_SPEED_RPT_00_pacmod13(TRAILER_WHEEL_SPEED_RPT_00_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BATTERY_VOLTAGE_LEVEL_RPT_1_pacmod13(BATTERY_VOLTAGE_LEVEL_RPT_1_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BATTERY_VOLTAGE_LEVEL_RPT_1_pacmod13(BATTERY_VOLTAGE_LEVEL_RPT_1_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BATTERY_VOLTAGE_LEVEL_RPT_1_pacmod13(BATTERY_VOLTAGE_LEVEL_RPT_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIRE_PRESSURE_EXTENDED_RPT_pacmod13(TIRE_PRESSURE_EXTENDED_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIRE_PRESSURE_EXTENDED_RPT_pacmod13(TIRE_PRESSURE_EXTENDED_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIRE_PRESSURE_EXTENDED_RPT_pacmod13(TIRE_PRESSURE_EXTENDED_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIRE_PRESSURE_EXTENDED_RPT_2_pacmod13(TIRE_PRESSURE_EXTENDED_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIRE_PRESSURE_EXTENDED_RPT_2_pacmod13(TIRE_PRESSURE_EXTENDED_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIRE_PRESSURE_EXTENDED_RPT_2_pacmod13(TIRE_PRESSURE_EXTENDED_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIRE_TEMPERATURE_EXTENDED_RPT_pacmod13(TIRE_TEMPERATURE_EXTENDED_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIRE_TEMPERATURE_EXTENDED_RPT_pacmod13(TIRE_TEMPERATURE_EXTENDED_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIRE_TEMPERATURE_EXTENDED_RPT_pacmod13(TIRE_TEMPERATURE_EXTENDED_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TIRE_TEMPERATURE_EXTENDED_RPT_2_pacmod13(TIRE_TEMPERATURE_EXTENDED_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TIRE_TEMPERATURE_EXTENDED_RPT_2_pacmod13(TIRE_TEMPERATURE_EXTENDED_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TIRE_TEMPERATURE_EXTENDED_RPT_2_pacmod13(TIRE_TEMPERATURE_EXTENDED_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_REMOTE_STOP_RPT_pacmod13(REMOTE_STOP_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_REMOTE_STOP_RPT_pacmod13(REMOTE_STOP_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_REMOTE_STOP_RPT_pacmod13(REMOTE_STOP_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_AUTOMS_MAN_SWITCH_RPT_pacmod13(AUTOMS_MAN_SWITCH_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_AUTOMS_MAN_SWITCH_RPT_pacmod13(AUTOMS_MAN_SWITCH_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_AUTOMS_MAN_SWITCH_RPT_pacmod13(AUTOMS_MAN_SWITCH_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_PAYLOAD_RPT_00_pacmod13(TRAILER_PAYLOAD_RPT_00_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_PAYLOAD_RPT_00_pacmod13(TRAILER_PAYLOAD_RPT_00_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_PAYLOAD_RPT_00_pacmod13(TRAILER_PAYLOAD_RPT_00_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_PAYLOAD_RPT_01_pacmod13(TRAILER_PAYLOAD_RPT_01_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_PAYLOAD_RPT_01_pacmod13(TRAILER_PAYLOAD_RPT_01_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_PAYLOAD_RPT_01_pacmod13(TRAILER_PAYLOAD_RPT_01_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_PAYLOAD_RPT_02_pacmod13(TRAILER_PAYLOAD_RPT_02_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_PAYLOAD_RPT_02_pacmod13(TRAILER_PAYLOAD_RPT_02_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_PAYLOAD_RPT_02_pacmod13(TRAILER_PAYLOAD_RPT_02_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BATTERY_VOLTAGE_LEVEL_RPT_2_pacmod13(BATTERY_VOLTAGE_LEVEL_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BATTERY_VOLTAGE_LEVEL_RPT_2_pacmod13(BATTERY_VOLTAGE_LEVEL_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BATTERY_VOLTAGE_LEVEL_RPT_2_pacmod13(BATTERY_VOLTAGE_LEVEL_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_GNSS_TIME_pacmod13(GNSS_TIME_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_GNSS_TIME_pacmod13(GNSS_TIME_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_GNSS_TIME_pacmod13(GNSS_TIME_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_VEHICLE_FAULT_RPT_2_pacmod13(VEHICLE_FAULT_RPT_2_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_VEHICLE_FAULT_RPT_2_pacmod13(VEHICLE_FAULT_RPT_2_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_VEHICLE_FAULT_RPT_2_pacmod13(VEHICLE_FAULT_RPT_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_FAULT_RPT_00_pacmod13(TRAILER_FAULT_RPT_00_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_FAULT_RPT_00_pacmod13(TRAILER_FAULT_RPT_00_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_FAULT_RPT_00_pacmod13(TRAILER_FAULT_RPT_00_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_FAULT_RPT_01_pacmod13(TRAILER_FAULT_RPT_01_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_FAULT_RPT_01_pacmod13(TRAILER_FAULT_RPT_01_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_FAULT_RPT_01_pacmod13(TRAILER_FAULT_RPT_01_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_FAULT_RPT_02_pacmod13(TRAILER_FAULT_RPT_02_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_FAULT_RPT_02_pacmod13(TRAILER_FAULT_RPT_02_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_FAULT_RPT_02_pacmod13(TRAILER_FAULT_RPT_02_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_FAULT_RPT_03_pacmod13(TRAILER_FAULT_RPT_03_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_FAULT_RPT_03_pacmod13(TRAILER_FAULT_RPT_03_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_FAULT_RPT_03_pacmod13(TRAILER_FAULT_RPT_03_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_TRAILER_FAULT_RPT_04_pacmod13(TRAILER_FAULT_RPT_04_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_TRAILER_FAULT_RPT_04_pacmod13(TRAILER_FAULT_RPT_04_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_TRAILER_FAULT_RPT_04_pacmod13(TRAILER_FAULT_RPT_04_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_SOFTWARE_VERSION_RPT_05_pacmod13(SOFTWARE_VERSION_RPT_05_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_SOFTWARE_VERSION_RPT_05_pacmod13(SOFTWARE_VERSION_RPT_05_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_SOFTWARE_VERSION_RPT_05_pacmod13(SOFTWARE_VERSION_RPT_05_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_ACCEL_PEDAL_POSITION_VOLTAGE_RPT_pacmod13(ACCEL_PEDAL_POSITION_VOLTAGE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_ACCEL_PEDAL_POSITION_VOLTAGE_RPT_pacmod13(ACCEL_PEDAL_POSITION_VOLTAGE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_ACCEL_PEDAL_POSITION_VOLTAGE_RPT_pacmod13(ACCEL_PEDAL_POSITION_VOLTAGE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_MC_VOLTAGE_RPT_pacmod13(BRAKE_MC_VOLTAGE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_MC_VOLTAGE_RPT_pacmod13(BRAKE_MC_VOLTAGE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_MC_VOLTAGE_RPT_pacmod13(BRAKE_MC_VOLTAGE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_BRAKE_PEDAL_POSITION_VOLTAGE_RPT_pacmod13(BRAKE_PEDAL_POSITION_VOLTAGE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_BRAKE_PEDAL_POSITION_VOLTAGE_RPT_pacmod13(BRAKE_PEDAL_POSITION_VOLTAGE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_BRAKE_PEDAL_POSITION_VOLTAGE_RPT_pacmod13(BRAKE_PEDAL_POSITION_VOLTAGE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_STEERING_TRQ_SENSOR_VOLTAGE_RPT_pacmod13(STEERING_TRQ_SENSOR_VOLTAGE_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_STEERING_TRQ_SENSOR_VOLTAGE_RPT_pacmod13(STEERING_TRQ_SENSOR_VOLTAGE_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_STEERING_TRQ_SENSOR_VOLTAGE_RPT_pacmod13(STEERING_TRQ_SENSOR_VOLTAGE_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

uint32_t Unpack_WATCHDOG_RPT_pacmod13(WATCHDOG_RPT_t* _m, const uint8_t* _d, uint8_t dlc_);
#ifdef PACMOD13_USE_CANSTRUCT
uint32_t Pack_WATCHDOG_RPT_pacmod13(WATCHDOG_RPT_t* _m, __CoderDbcCanFrame_t__* cframe);
#else
uint32_t Pack_WATCHDOG_RPT_pacmod13(WATCHDOG_RPT_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide);
#endif // PACMOD13_USE_CANSTRUCT

#ifdef __cplusplus
}
#endif
